<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>betty bear</title>
  <icon>https://www.gravatar.com/avatar/847b9f7eaddb6b4da64abd43ef873fa5</icon>
  
  <link href="http://xczf.shop/atom.xml" rel="self"/>
  
  <link href="http://xczf.shop/"/>
  <updated>2023-12-17T07:44:18.462Z</updated>
  <id>http://xczf.shop/</id>
  
  <author>
    <name>betty bear</name>
    <email>3025346417@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>devops</title>
    <link href="http://xczf.shop/2023/10/01/DevOps/"/>
    <id>http://xczf.shop/2023/10/01/DevOps/</id>
    <published>2023-10-01T11:00:41.000Z</published>
    <updated>2023-12-17T07:44:18.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Devops"><a href="#Devops" class="headerlink" title="Devops"></a>Devops</h1><h2 id="一-Devops介绍"><a href="#一-Devops介绍" class="headerlink" title="一.Devops介绍"></a>一.Devops介绍</h2><p>  DevOps是Development &amp;Operations的缩写，也就是开发&amp;运维。<br>  软件开发最开始是由两个团队组成：开发团队从头开始设计和整体系统的构建，因此系统不停的迭代更新。运维团队将开发团队的Code进行测试后部署上线，系统稳定安全运行。两个目标不同的团队需要协同完成一个软件的开发。开发团队指定好计划并完成coding后，需要提供到运维团队。运维团队向开发团队反馈需要修复的BUG以及一些需要返工的任务。这时开发团队需要经常等待运维团队的反馈，延长了事件并推迟了整个软件开发的周期。<br>会有一种方式，在开发团队等待的时候，让开发团队转移到下一个项目中。等待运维团队为之前的代码提供反馈。可是这样就意味着一个完整的项目需要一个更长的周期才可以开发出最终代码。让开发团队和运维团队成一个团队，协同应对一套软件就被称为DevOps。<br>  软件的开发流程：</p><ul><li>PLAN：开发团队根据客户的目标制定开发计划</li><li>CODE:  根据PLAN开始编码过程，将不同版本的代码存储在一个库中。</li><li>BUILD: 编码完成后，需要将代码构建并且运行。</li><li>TEST: 成功构建项目后，需要测试代码是否存在BUG或错误。</li><li>DEPLOY:代码经过手动测试和自动化测试后，认定代码已经准备好部署并且交给运维团队。</li><li>OPERATE:运维团队将代码部署到生产环境中。</li><li>MONITOR:项目部署上线后，需要持续的监控产品。</li><li>INTEGRATE:然后将监控阶段收到的反馈发送回PLAN阶段，整体反复的流程，即持续集成、持续部署。<h2 id="二-多进程-多线程"><a href="#二-多进程-多线程" class="headerlink" title="二.多进程,多线程"></a>二.多进程,多线程</h2><h3 id="进程process"><a href="#进程process" class="headerlink" title="进程process"></a>进程process</h3>进程是一个在系统中运行的程序<br>进程是已启动的可执行程序的运行实例，进程有以下组成部分:</li><li>已分配内存的地址空间</li><li>安全属性，包括所有权凭据和特权</li><li>进程代码的一个或多个执行线程</li><li>进程状态<br>程序：二进制文件，静态&#x2F;bin&#x2F;date，&#x2F;usr&#x2F;sbin&#x2F;httpd，&#x2F;usr&#x2F;sbin&#x2F;sshd，&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;ngix<br>进程：是程序运行的过程，动态，有生命周期及运行状态<h3 id="进程类型"><a href="#进程类型" class="headerlink" title="进程类型"></a>进程类型</h3>守护进程：在系统引导过程中启动的进程，跟终端无关的进程<br>前台进程：跟终端相关，通过终端启动的进程<h3 id="进程的生命周期"><a href="#进程的生命周期" class="headerlink" title="进程的生命周期"></a>进程的生命周期</h3><img src="/image/devops/25.jpg" alt="进程的生命周期"><br>父进程复制自己的地址空间(fork)创建一个新的子进程结构。每个新进程分配一个唯一的进程ID(PID)，满足跟踪安全性之需。PID和父进程ID(PPID)是子进程环境的元素，任何进程都可以创建子进程，所有进程都是第一个系统进程的后代。<h3 id="进程状态"><a href="#进程状态" class="headerlink" title="进程状态"></a>进程状态</h3>子进程继承父进程的安全性身份、过去和当前的文件描述符、端口和资源特权、环境变量，以及程序代码。随后，子进程可能exec自己的程序代码。通常，父进程在子进程运行期间处于睡眠(sleeping)状态。当子进程完成时发出(exit)信息请求，在退出时，子进程已经关闭或丢弃了其资源环境，剩余的部分称之为僵尸(zombie)。父进程在子进程退出时收到信号而被唤醒，清理剩余的结构，然后继续执行其自己的程序代码。<br>在多任务处理操作系统中，每个CPU(或核心)在一个时间点上只能处理一个进程。在进程运行时，它对CPU时间和资源分配的要求会不断变化，从而为进程分配一个状态，它随着环境要求而改变。<h4 id="R运行状态-runing"><a href="#R运行状态-runing" class="headerlink" title="R运行状态(runing)"></a>R运行状态(runing)</h4>表明进程要么在运行中要么在运行队列里，并不意味着进程一定在运行中。<h4 id="S睡眠状态（sleeping）"><a href="#S睡眠状态（sleeping）" class="headerlink" title="S睡眠状态（sleeping）"></a>S睡眠状态（sleeping）</h4>意味着进程在等待事件的完成（这里的睡眠有时候也叫做可中断睡眠）<h4 id="D磁盘睡眠状态-Disk-sleep"><a href="#D磁盘睡眠状态-Disk-sleep" class="headerlink" title="D磁盘睡眠状态(Disk sleep)"></a>D磁盘睡眠状态(Disk sleep)</h4>有时候也叫做不可中断睡眠，在这个状态的进程通常会等待IO的结束<h4 id="T停止状态（stopped）"><a href="#T停止状态（stopped）" class="headerlink" title="T停止状态（stopped）"></a>T停止状态（stopped）</h4>可以通过发送SIGSTOP信号给进程来停止(T)进程。这个被暂停的进程可以通过发送SIGCNT信号让进程继续运行。<h4 id="Z僵尸状态-zombie"><a href="#Z僵尸状态-zombie" class="headerlink" title="Z僵尸状态(zombie)"></a>Z僵尸状态(zombie)</h4>通知父进程回收所有的资源<h4 id="X死亡状态（dead）"><a href="#X死亡状态（dead）" class="headerlink" title="X死亡状态（dead）"></a>X死亡状态（dead）</h4>这个状态只是一个返回状态，你不会在任务列表里看到这个状态。<h4 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h4>当一个进程fork一个子进程之后，如果子进程退出，而父进程没有利用wait 或者<br>waitpid 来获取子进程的状态信息，那么子进程的状态描述符依然保存在系统中。<h4 id="孤儿进程"><a href="#孤儿进程" class="headerlink" title="孤儿进程"></a>孤儿进程</h4>当一个父进程fork一个子进程之后，父进程突然被终止了，那么这个子进程就成为了一个孤儿进程，它会被init进程接管<br>参考：<a href="https://blog.csdn.net/dream_1996/article/details/71001006">https://blog.csdn.net/dream_1996/article/details/71001006</a><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><h4 id="ps命令"><a href="#ps命令" class="headerlink" title="ps命令"></a>ps命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ps -aux 不同于 ps aux</span></span><br><span class="line">ps -aux</span><br><span class="line">u：以用户为中心组织进程状态信息显示</span><br><span class="line">a：与终端相关的进程；</span><br><span class="line">x：与终端无关的进程；</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">USER PID %CPU %MEM</span><br><span class="line">用户 进程ID CPU占用 内存占用</span><br><span class="line">VSZ：Virtual memory SiZe 虚拟内存集</span><br><span class="line">RSS：ReSident Size 常驻内存集———其他的都可以放入交换内存中</span><br><span class="line">STAT：进程状态</span><br><span class="line">START：启动时间</span><br><span class="line">TIME：运行占据cpu的累积时长</span><br><span class="line">COMMAND：进程文件，进程名</span><br><span class="line"></span><br><span class="line">R 运行</span><br><span class="line">S 可中断睡眠 Sleep</span><br><span class="line">D 不可中断睡眠</span><br><span class="line">T 停止的进程</span><br><span class="line">Z 僵尸进程</span><br><span class="line">X 死掉的进程</span><br><span class="line">Ss s进程的领导者，父进程</span><br><span class="line">S&lt; &lt;优先级较高的进程</span><br><span class="line">SN N优先级较低的进程</span><br><span class="line">R+ +表示是前台的进程组</span><br><span class="line">Sl 以线程的方式运行</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">ps -ef</span><br><span class="line"><span class="comment"># -e：显示所有进程</span></span><br><span class="line"><span class="comment"># -f：显示完整格式程序信息</span></span><br><span class="line">ps -eFH</span><br><span class="line"><span class="comment"># -F：显示完成格式的进程信息</span></span><br><span class="line"><span class="comment"># -H：以进程层级格式显示进程相关信息</span></span><br><span class="line"><span class="comment"># 自定义想要查询的字段值</span></span><br><span class="line">-eo pid,tid,class,rtprio,ni,pri,psr,pcpu,<span class="built_in">stat</span>,wchan:14,<span class="built_in">comm</span></span><br><span class="line">-axo pid,tid,class,rtprio,ni,pri,psr,pcpu,<span class="built_in">stat</span>,wcha n:14,<span class="built_in">comm</span></span><br><span class="line"></span><br><span class="line">ni：<span class="built_in">nice</span>值</span><br><span class="line">pri：priority，优先级</span><br><span class="line">psr：processor，CPU</span><br><span class="line">rtprio：实时优先级</span><br><span class="line"><span class="comment"># 查看进程树</span></span><br><span class="line">pstree</span><br></pre></td></tr></table></figure><h4 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">top -d 1 <span class="comment"># 一秒钟刷新一次</span></span><br><span class="line">top -d 1 -p 6995 <span class="comment"># 查看指定PID</span></span><br><span class="line">top -d 1 -p 6995,1 <span class="comment"># 查看多个PID进程</span></span><br><span class="line">top -d 1 -u apache <span class="comment"># 查看指定用户的进程</span></span><br><span class="line">top -d 1 -b -n 2 &gt; top.txt <span class="comment"># 将2次top信息写入到文件</span></span><br></pre></td></tr></table></figure><h3 id="使用信号控制进程"><a href="#使用信号控制进程" class="headerlink" title="使用信号控制进程"></a>使用信号控制进程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">kill</span> -l <span class="comment"># 列出所有支持的信号</span></span><br><span class="line">1 SIGHUP 重新加载配置</span><br><span class="line">2 SIGINT 键盘中断ctrl + c</span><br><span class="line">3 SIGQUIT 键盘退出</span><br><span class="line">9 SIGKILL 强制终止</span><br><span class="line">15 SIGTERM 终止(正常结束),缺省信号</span><br><span class="line">18 SIGCONT 继续</span><br><span class="line">19 SIGSTOP 停止</span><br><span class="line">20 SIGTSTP 暂停ctrl + z</span><br></pre></td></tr></table></figure><h4 id="踢出远程登录用户"><a href="#踢出远程登录用户" class="headerlink" title="踢出远程登录用户"></a>踢出远程登录用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w</span><br><span class="line"><span class="comment"># centos pts/2 192.168.222.1 19:21 3.00s 0.04s 0.04s -bash</span></span><br><span class="line">pkill -u centos</span><br><span class="line">pkill -t pts/2 <span class="comment"># 终止pts/2上所有进程</span></span><br><span class="line">pkill -9 -t pts/2   <span class="comment"># 终止pts/2上所有进程，并结束pts/2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进程优先级-nice"><a href="#进程优先级-nice" class="headerlink" title="进程优先级 nice"></a>进程优先级 nice</h3>Nice值：-20，19<br>nice值越高表示优先级越低，例如+19，该进程容易将CPU使用量让给其他进程。<br>nice值越低表示优先级越高，例如-20，该进程更倾向于不让出CPU<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用ps查看nice级别</span></span><br><span class="line">ps axo pid,<span class="built_in">command</span>,<span class="built_in">nice</span> --<span class="built_in">sort</span>=<span class="built_in">nice</span></span><br><span class="line">ps axo pid,<span class="built_in">command</span>,<span class="built_in">nice</span>,cls --<span class="built_in">sort</span>=-<span class="built_in">nice</span></span><br></pre></td></tr></table></figure><h4 id="更改现有进程的nice级别"><a href="#更改现有进程的nice级别" class="headerlink" title="更改现有进程的nice级别"></a>更改现有进程的nice级别</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 7000 &amp;</span><br><span class="line"><span class="comment"># [2] 10267</span></span><br><span class="line">renice -20 10267</span><br><span class="line"><span class="comment"># 10267 (进程 ID) 旧优先级为 0，新优先级为 -20</span></span><br></pre></td></tr></table></figure><h3 id="作业控制jobs"><a href="#作业控制jobs" class="headerlink" title="作业控制jobs"></a>作业控制jobs</h3>foreground ：前台进程是在终端中运行的命令，该终端为进程的 控制终端 。前台进程接受键盘产生的输入和信号,并允许从终端读取或写入到终端。<br>background ：后台进程没有控制终端 ，它不需要终端的交互。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sleep</span> 3000 &amp; <span class="comment"># 运行程序(时)，让其在后台执行</span></span><br><span class="line"><span class="built_in">sleep</span> 4000   <span class="comment"># 将前台的程序挂起(暂停)到后台</span></span><br><span class="line"><span class="built_in">jobs</span>         <span class="comment"># 查看后台作业</span></span><br><span class="line"><span class="comment"># [1]- 运行中 sleep 3000 &amp;</span></span><br><span class="line"><span class="comment"># [2]+ 已停止 sleep 4000</span></span><br><span class="line"><span class="built_in">bg</span> %2        <span class="comment"># 让作业2在后台运行</span></span><br><span class="line"><span class="built_in">fg</span> %1 <span class="comment"># 将作业1调回到前台</span></span><br></pre></td></tr></table></figure><h3 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h3>linux下后台执行命令的工具<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y screen</span><br><span class="line">screen -R test1</span><br><span class="line">screen -<span class="built_in">ls</span></span><br><span class="line">screen -r [ID]</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="什么是进程、线程、协程，他们之间有什么区别？"><a href="#什么是进程、线程、协程，他们之间有什么区别？" class="headerlink" title="什么是进程、线程、协程，他们之间有什么区别？"></a>什么是进程、线程、协程，他们之间有什么区别？</h4>进程：进程是系统进行资源分配调度的单位，有独立内存空间<br>线程：CPU的调度单位，比进程更小，没有独立系统资源<br>协程：程序所控制，比线程更小<br>线程与进程的区别:</li><li>线程是进程内的一个执行单元，一个程序至少有一个进程，一个进程至少有一个线程，它们共享进程的地址空间，而进程有自己独立的地址空间，线线程不能够独立执行，必须依存在进程中</li><li>进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源</li><li>线程是进程的一个实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位.线程自己基本上不拥有系统资源,但是它可与同属一个进程的其他的线程共享进程所拥有的全部资源。</li><li>二者均可并发执行</li><li>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制</li></ul><p>协程与线程的区别:</p><ul><li>一个线程可以多个协程，一个进程也可以单独拥有多个协程。</li><li>线程进程都是同步机制，而协程则是异步。</li><li>协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态。</li><li>线程是抢占式，而协程是非抢占式的，所以需要用户自己释放使用权来切换到其他协程，因此同一时间其实只有一个协程拥有运行权，相当于单线程的能力。</li><li>协程并不是取代线程, 而且抽象于线程之上, 线程是被分割的CPU资源, 协程是组织好的代码流程, 协程需要线程来承载运行, 线程是协程的资源, 但协程不会直接使用线程, 协程直接利用的是执行器(Interceptor), 执行器可以关联任意线程或线程池, 可以使当前线程, UI线程, 或新建新程.。</li><li>线程是协程的资源。协程通过Interceptor来间接使用线程这个资源。<h4 id="buff和cache之间有什么区别？"><a href="#buff和cache之间有什么区别？" class="headerlink" title="buff和cache之间有什么区别？"></a>buff和cache之间有什么区别？</h4></li><li>buffer缓冲区<br>buffer为了提高内存和硬盘(或其他I&#x2F;O设备)之间数据交换速度而设计的。buffer是根据硬盘的读写设计的，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。</li><li>cache缓存区<br>cache是为了提高CPU和内存之间的数据交换速度而设计的。<br>即将经常用到的数据放到缓存区内，方便CPU的读取，从而提高性能。</li><li>共性<br>都属于内存，数据都是临时的，一旦关机数据都会丢失。</li><li>差异<br>buffer是写入数据，cache是读取数据<br>buffer数据丢失会影响数据完整性，源数据不受影响；cache数据丢失不影响数据完整性，但影响性能<br>buffer大小够用就行；cache越大，性能越好<h4 id="进程间的通信方式有哪些？"><a href="#进程间的通信方式有哪些？" class="headerlink" title="进程间的通信方式有哪些？"></a>进程间的通信方式有哪些？</h4></li><li>无名管道( pipe )： 管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</li><li>高级管道（popen）： 将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</li><li>有名管道（named pipe）： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</li><li>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</li><li>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</li><li>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</li><li>共享内存( shared memory ) ： 共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</li><li>套接字( socket ) ： 套解字也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。<h3 id="什么是forking"><a href="#什么是forking" class="headerlink" title="什么是forking"></a>什么是forking</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fork(分叉)在linux中使用非常广泛</span><br><span class="line">某一个命令执行时，父进程fork一个子进程</span><br><span class="line">父进程将自身资源拷贝一份，命令在子进程中运行时，具有和父进程一样的运行环境</span><br></pre></td></tr></table></figure>编写shell脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim ~/chdir.sh</span><br><span class="line">***</span><br><span class="line"><span class="comment">#! /bin/bash</span></span><br><span class="line"><span class="built_in">cd</span> /home</span><br><span class="line">***</span><br><span class="line"><span class="built_in">chmod</span> a+x chdir.sh</span><br><span class="line">bash chdir.sh <span class="comment"># 没有变化，因为脚本是在子进程执行的</span></span><br><span class="line">./chdir.sh <span class="comment"># 只能用bash解释器解释</span></span><br><span class="line"><span class="built_in">source</span> chdir.sh <span class="comment"># 有变化，脚本在当前进程执行</span></span><br></pre></td></tr></table></figure><h3 id="僵尸进程-1"><a href="#僵尸进程-1" class="headerlink" title="僵尸进程"></a>僵尸进程</h3>僵尸进程没有任何可执行代码，也不能被调度<br>如果系统中过多僵尸进程，将因为没有进程号而导致系统不能产生新的进程<br>可以杀死父进程或重启系统来消除僵尸进程</li></ul><p>解决方法：<br>父进程通过os.waut()来得到子进程是否终止信息<br>在子进程终止和父进程调用wait()之间时间，子进程才是僵尸进程<br>如果子进程没有终止，父进程先退出了，那么子进程会持续工作，系统将子进程的父进程设置为init（），并用来负责清除僵尸进程<br>python可以使用waitpid()来处理子进程：<br>waitpid()接收两个参数，第一个参数设置为-1，表示与wait（）函数相同；第二参数如果设置0表示挂机父进程，直到子进程退出，设置为1表示不挂起父进程。返回值0则子进程没有结束，否则返回子进程的PID</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 产生僵尸进程</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;starting&#x27;</span>)</span><br><span class="line">ret_val = os.fork()</span><br><span class="line"><span class="keyword">if</span> ret_val: <span class="comment"># 父进程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;in parent&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">30</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;parent done&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;in child&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">15</span>) <span class="comment"># 后续15s即为僵尸进程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;child done&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决僵尸进程</span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;starting&#x27;</span>)</span><br><span class="line">ret_val = os.fork()</span><br><span class="line"><span class="keyword">if</span> ret_val: <span class="comment"># 父进程</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;in parent&#x27;</span>)</span><br><span class="line">result = os.waitpid(-<span class="number">1</span>,<span class="number">0</span>) <span class="comment"># 挂起，子进程结束处理之后才会继续工作</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># 返回元组：PID,0</span></span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;parent done&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;in child&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;child done&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="案例1：单进程，单线程ping"><a href="#案例1：单进程，单线程ping" class="headerlink" title="案例1：单进程，单线程ping"></a>案例1：单进程，单线程ping</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过ping测试主机是否可达</span><br><span class="line">ping不通，不管什么原因都认为主机不可达</span><br><span class="line">通过ping方式，扫描主机所在网段所有IP地址</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ping</span>(<span class="params">host</span>):</span><br><span class="line">result = subprocess.run(</span><br><span class="line"><span class="string">&#x27;ping -c2 %s &amp;&gt; /dev/null&#x27;</span> % host,shell=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> result.returncode == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s:up&#x27;</span> % host)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s:down&#x27;</span> % host)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">ips = [<span class="string">&#x27;192.168.189.%s&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>)]</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">ping(ip)</span><br><span class="line">***</span><br><span class="line">python ping.py</span><br></pre></td></tr></table></figure><h3 id="案例2：dorking基础应用"><a href="#案例2：dorking基础应用" class="headerlink" title="案例2：dorking基础应用"></a>案例2：dorking基础应用</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父进程打印“In parent”然后睡眠10s</span><br><span class="line">在子进程中编写循环，5次，输出当前系统时间，每次循环结束后睡眠1秒</span><br><span class="line">父进程结束后，分别打印“parent exit”和“child exit”</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;starting&#x27;</span>)</span><br><span class="line">ret_val = os.fork()</span><br><span class="line"><span class="keyword">if</span> ret_val:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;in parent&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;parent exit&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;in child&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;child exit&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="案例3：扫描存活主机"><a href="#案例3：扫描存活主机" class="headerlink" title="案例3：扫描存活主机"></a>案例3：扫描存活主机</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">通过ping测试主机是否可达</span><br><span class="line">如果ping不通，不管什么原因都认为不可用</span><br><span class="line">需要通过ping方式，扫描主机所在网段所有IP地址</span><br><span class="line">通过fork方式实现并发扫描</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fork_ping.py</span><br><span class="line">***</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ping</span>(<span class="params">host</span>):</span><br><span class="line">result = subprocess.run(</span><br><span class="line"><span class="string">&#x27;ping -c2 %s &amp;&gt; /dev/null&#x27;</span> % host,shell=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> result.returncode == <span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s:up&#x27;</span> % host)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%s:down&#x27;</span> % host)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">ips = [<span class="string">&#x27;192.168.189.%s&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>)]</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">ret_val = os.fork()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ret_val: <span class="comment"># 不是父进程，即子进程</span></span><br><span class="line">ping(ip)</span><br><span class="line">exit() <span class="comment"># 不退出子进程就会一直工作</span></span><br></pre></td></tr></table></figure><h3 id="多线程动机"><a href="#多线程动机" class="headerlink" title="多线程动机"></a>多线程动机</h3><p>并行运行相互独立的子任务可以大幅度提示整个任务的效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say_hi</span>(<span class="params">word</span>):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello %s&quot;</span> % word)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">t = threading.Thread(target=say_hi,args=(<span class="string">&#x27;tedu&#x27;</span>,)) <span class="comment"># 启动工作线程</span></span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h3 id="案例4：扫描存活主机-多线程"><a href="#案例4：扫描存活主机-多线程" class="headerlink" title="案例4：扫描存活主机-多线程"></a>案例4：扫描存活主机-多线程</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过ping测试主机是否可达</span><br><span class="line">如果ping不通，不管什么原因都认为不可用</span><br><span class="line">通过多线程方式实现并发扫描</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ping</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,host</span>):</span><br><span class="line">self.host = host</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self,host</span>):</span><br><span class="line">        result = subprocess.run(</span><br><span class="line">            <span class="string">&#x27;ping -c2 %s &amp;&gt; /dev/null&#x27;</span> % host,shell=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> result.returncode == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s:up&#x27;</span> % host)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s:down&#x27;</span> % host)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">ips = [<span class="string">&#x27;192.168.189.%s&#x27;</span> % i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">255</span>)]</span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> ips:</span><br><span class="line">t = threading.Thread(target=ping(ip))</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h2 id="三-urllib模块"><a href="#三-urllib模块" class="headerlink" title="三.urllib模块"></a>三.urllib模块</h2><h3 id="urllib四个模块"><a href="#urllib四个模块" class="headerlink" title="urllib四个模块"></a>urllib四个模块</h3><p>urllib.request可以用来发送request和获取request结果<br>urllib.error包含urllib.request产生的异常<br>urllib.parse用来解析和处理url<br>urllib.robotparse解析页面的robots.txt文件</p><h3 id="爬取网页"><a href="#爬取网页" class="headerlink" title="爬取网页"></a>爬取网页</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">html = urllib.request.urlopen(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">html.readline()</span><br><span class="line">html.read(<span class="number">4096</span>)</span><br><span class="line">html.readlines()</span><br></pre></td></tr></table></figure><h3 id="模拟客户端"><a href="#模拟客户端" class="headerlink" title="模拟客户端"></a>模拟客户端</h3><p>有些网页拥有反爬虫的设置，可以设置一些Headers信息，模仿浏览器去访问这些网站</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;xxxxx&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20230820 Firefox/52.0&#x27;</span>&#125;</span><br><span class="line">r = request.Request(url,headers=headers)</span><br><span class="line">html = request.urlopen(r)</span><br></pre></td></tr></table></figure><h3 id="获取图片"><a href="#获取图片" class="headerlink" title="获取图片"></a>获取图片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">url = <span class="string">&#x27;https://img1.baidu.com/it/u=834894649,3086306884&amp;fm=253&amp;app=120&amp;size=w931&amp;n=0&amp;f=JPEG&amp;fmt=auto?sec=1698512400&amp;t=e015c76b90018a5747a0f8336ad3dbf8&#x27;</span></span><br><span class="line">html = urllib.request.urlopen(url)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/image/picture.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> jpg:</span><br><span class="line">jpg.write(html.read())</span><br><span class="line"><span class="comment"># eog /tmp/image/picture.jpg 可以进行图片的查看</span></span><br></pre></td></tr></table></figure><h4 id="下载一个网页所有图片"><a href="#下载一个网页所有图片" class="headerlink" title="下载一个网页所有图片"></a>下载一个网页所有图片</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> wget</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url</span>(<span class="params">fname,patt,charset=<span class="literal">None</span></span>):</span><br><span class="line"><span class="string">&#x27;用于指定文件取出所有模式，并返回列表&#x27;</span></span><br><span class="line">result = []</span><br><span class="line">cpatt = re.<span class="built_in">compile</span>(patt) <span class="comment"># 编译正则表达式,返回对象</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(fname,encoding=charset) <span class="keyword">as</span> fobj:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fobj:</span><br><span class="line">m = cpatt.search(line)</span><br><span class="line"><span class="keyword">if</span> m:</span><br><span class="line">result.append(m.group())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">path = <span class="string">&#x27;/tmp/image&#x27;</span> <span class="comment"># 存储位置</span></span><br><span class="line">fname = <span class="string">&#x27;/tmp/tmp.html&#x27;</span> <span class="comment"># 网页文件名字</span></span><br><span class="line">url = <span class="string">&#x27;xxxxxxx&#x27;</span> <span class="comment"># 爬取网站</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(path): <span class="comment"># 不存在路径就创建</span></span><br><span class="line">os.mkdir(path)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fname): <span class="comment"># 文件不存在下载</span></span><br><span class="line">wget.download(url,fname)</span><br><span class="line">url_path = <span class="string">&#x27;(http|https)://[\w./-]+\.(jpg\jpeg\png\gif)&#x27;</span> <span class="comment"># 正则表达式</span></span><br><span class="line">img_list = geturl(fname,url_path,<span class="string">&#x27;gbk&#x27;</span>) <span class="comment"># 字符编码读取注意</span></span><br><span class="line"><span class="keyword">for</span> img_url <span class="keyword">in</span> img_list: <span class="comment"># 下载</span></span><br><span class="line">wget.download(img_url,path)</span><br></pre></td></tr></table></figure><h3 id="下载网络资源"><a href="#下载网络资源" class="headerlink" title="下载网络资源"></a>下载网络资源</h3><p>有些文件比较大，需要像读取文件一样，每次读取一部分数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">html = urllib.request.urlopen(<span class="string">&#x27;http&quot;//python.pdf&#x27;</span>)</span><br><span class="line">fobj = <span class="built_in">open</span>(<span class="string">&#x27;/tmp/file/python.pdf&#x27;</span>,<span class="string">&#x27;ab&#x27;</span>) <span class="comment"># a追加，没有则创建新文件</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">data = html.read(<span class="number">4096</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> data: <span class="keyword">break</span></span><br><span class="line">fobj.write(data)</span><br><span class="line">fobj.close()</span><br></pre></td></tr></table></figure><p>urllib然而不如wget的效率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install wget <span class="comment"># 安装模块</span></span><br><span class="line"><span class="keyword">import</span> wget</span><br><span class="line">wget.download(<span class="string">&#x27;目标文件&#x27;</span>,<span class="string">&#x27;存储地址&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="四-paramiko模块"><a href="#四-paramiko模块" class="headerlink" title="四.paramiko模块"></a>四.paramiko模块</h2><p>模块作用：</p><ul><li>通过ssh协议远程执行命令</li><li>文件上传下载<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地安装</span></span><br><span class="line">yum install -y gcc gcc-c++ python-devel</span><br><span class="line">tar xzf paramiko-1.15.4.tar.gz</span><br><span class="line">python setup.py install</span><br><span class="line"><span class="comment"># 网络安装</span></span><br><span class="line">pip install paramiko</span><br></pre></td></tr></table></figure><h3 id="使用多线程编写实现ssh访问的脚本"><a href="#使用多线程编写实现ssh访问的脚本" class="headerlink" title="使用多线程编写实现ssh访问的脚本"></a>使用多线程编写实现ssh访问的脚本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">vim servers.txt</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">***</span><br><span class="line">python rcmd.py servers.txt <span class="string">&#x27;sleep 3;id root&#x27;</span></span><br><span class="line">***</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1.创建SSHClient实例</span></span><br><span class="line"><span class="string">2.设置添加主机密钥策略</span></span><br><span class="line"><span class="string">3.连接ssh服务器</span></span><br><span class="line"><span class="string">4.执行指定命令</span></span><br><span class="line"><span class="string">5.在shell命令中接受远程服务器密码以及在远程主机执行命令</span></span><br><span class="line"><span class="string">ssh = paramiko.SSHClient()</span></span><br><span class="line"><span class="string">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span></span><br><span class="line"><span class="string">ssh.connect(&#x27;127.0.0.1&#x27;,username=&#x27;root&#x27;,password=&#x27;redhat&#x27;)</span></span><br><span class="line"><span class="string">result = ssh.exec_command(&#x27;id root;id xc&#x27;)</span></span><br><span class="line"><span class="string">out = result[1].read()</span></span><br><span class="line"><span class="string">error = result[2].read()</span></span><br><span class="line"><span class="string">ssh.close()</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rcmd</span>(<span class="params">host,user,passwd,port=<span class="number">22</span>,cmds=<span class="literal">None</span></span>):</span><br><span class="line">ssh = paramiko.SSHClient()</span><br><span class="line">ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">ssh.connect(host,username=user,password=passwd,port=port)</span><br><span class="line">stdin,stdout,stderr = ssh.exec_command(cmds)</span><br><span class="line">out = stdout.read()</span><br><span class="line">err = stderr.read()</span><br><span class="line"><span class="keyword">if</span> out: <span class="comment"># 如果输出非空</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[%s] OUT:\n%s&#x27;</span> % (host,out.decode()))</span><br><span class="line"><span class="keyword">if</span> err: <span class="comment"># 如果错误非空</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[%s] ERROR:\n%s&#x27;</span> % (host,err.decode()))</span><br><span class="line">ssh.close()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"><span class="comment"># rcmd(&#x27;127.0.0.1&#x27;,&#x27;root&#x27;,&#x27;redhat&#x27;,cmds=&#x27;id root;id xc&#x27;)</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) != <span class="number">3</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Usage: %s ipfile &#x27;commands&#x27;&quot;</span> % sys.argv[<span class="number">0</span>])</span><br><span class="line">exit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(sys.argv[<span class="number">1</span>]):</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;No such file:&#x27;</span>,sys.argv[<span class="number">1</span>])</span><br><span class="line">exit(<span class="number">2</span>)</span><br><span class="line">ipfile = sys.argv[<span class="number">1</span>]</span><br><span class="line">passwd = getpass.getpass()</span><br><span class="line">cmds = sys.argv[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(ipfile) <span class="keyword">as</span> fobj:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fobj:</span><br><span class="line">ip = line.strip() <span class="comment"># 移除结尾的\n</span></span><br><span class="line">t = threading.Thread(target=rcmd,args=(ip,<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;redhat&#x27;</span>,<span class="number">22</span>,cmds))</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h2 id="五-邮件编程"><a href="#五-邮件编程" class="headerlink" title="五.邮件编程"></a>五.邮件编程</h2>python的smtplib提供了途径发送电子邮件，对smtp协议进行了简单的封装<h3 id="标准邮件需要三个头部信息"><a href="#标准邮件需要三个头部信息" class="headerlink" title="标准邮件需要三个头部信息"></a>标准邮件需要三个头部信息</h3>From：发件人 To：收件人 Subject：主题<h3 id="案例1：本机发送邮件"><a href="#案例1：本机发送邮件" class="headerlink" title="案例1：本机发送邮件"></a>案例1：本机发送邮件</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">账户发件人本机root和收件人xc，zf</span><br><span class="line">useradd xc</span><br><span class="line">useradd zf</span><br><span class="line">python local——mail.py</span><br><span class="line">mail -u xc</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备邮件 local——mail.py</span></span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="comment"># 准备邮件</span></span><br><span class="line"><span class="comment"># plain表示纯文本，即不含任务文字以外的内容</span></span><br><span class="line">msg = MIMEText(<span class="string">&#x27;python local test\n&#x27;</span>,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 为邮件添加头部信息</span></span><br><span class="line">msg[<span class="string">&#x27;From&#x27;</span>] = Header(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">msg[<span class="string">&#x27;To&#x27;</span>] = Header(<span class="string">&#x27;xc&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(<span class="string">&#x27;python test&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line"><span class="comment"># 发送邮件</span></span><br><span class="line">smtp = smtplib.SMTP(<span class="string">&#x27;127.0.0.1&#x27;</span>)</span><br><span class="line">sender = <span class="string">&#x27;root&#x27;</span></span><br><span class="line">receivers = [<span class="string">&#x27;xc&#x27;</span>,<span class="string">&#x27;zf&#x27;</span>]</span><br><span class="line">smtp.sendmail(sender,receivers,msg.as_bytes())</span><br></pre></td></tr></table></figure><h3 id="案例2：互联网服务器发送邮件"><a href="#案例2：互联网服务器发送邮件" class="headerlink" title="案例2：互联网服务器发送邮件"></a>案例2：互联网服务器发送邮件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inet_mail</span>(<span class="params">host,sender,passwd,receivers,body,subject</span>):</span><br><span class="line">    msg = MIMEText(body,<span class="string">&#x27;plain&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 新版QQ邮箱原因，不需要字符串编码</span></span><br><span class="line">    <span class="comment"># msg[&#x27;From&#x27;] = Header(sender,&#x27;utf8&#x27;)</span></span><br><span class="line">    msg[<span class="string">&#x27;From&#x27;</span>] = Header(sender)</span><br><span class="line">    msg[<span class="string">&#x27;To&#x27;</span>] = Header(receivers[<span class="number">0</span>],<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    msg[<span class="string">&#x27;Subject&#x27;</span>] = Header(subject,<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    smtp = smtplib.SMTP()</span><br><span class="line">    smtp.connect(host)</span><br><span class="line">    smtp.login(sender, passwd)</span><br><span class="line">    <span class="comment"># smtp.starttls() # 服务器有安全连接则打开此注释</span></span><br><span class="line">    smtp.sendmail(sender,receivers,msg.as_bytes())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># QQmail</span></span><br><span class="line">    <span class="comment"># 设置---&gt;账户---&gt;POP3/SMTP服务---&gt;启动并获取授权码</span></span><br><span class="line">    server = <span class="string">&#x27;smtp.qq.com&#x27;</span></span><br><span class="line">    sender = <span class="string">&#x27;xxxxxxxxxx@qq.com&#x27;</span></span><br><span class="line">    receivers = [<span class="string">&#x27;xxxxxxxxxx@qq.com&#x27;</span>,<span class="string">&#x27;xxxxxxxxxx@qq.com&#x27;</span>]</span><br><span class="line">    passwd = getpass.getpass() <span class="comment"># 授权码，发短信获取</span></span><br><span class="line">    body = <span class="string">&#x27;python test\n&#x27;</span></span><br><span class="line">    subject = <span class="string">&#x27;py test&#x27;</span></span><br><span class="line">    inet_mail(server,sender,passwd,receivers,body,subject)</span><br></pre></td></tr></table></figure><h2 id="六-JSON"><a href="#六-JSON" class="headerlink" title="六.JSON"></a>六.JSON</h2>JSON（JavaScript Object Notation）轻量级的数据交换格式<br>其特性使其成为理想的数据交换语言<h3 id="dumps和loads方法"><a href="#dumps和loads方法" class="headerlink" title="dumps和loads方法"></a>dumps和loads方法</h3>对编码后的对象进行decode解码，得到原始数据，需要使用json.loads()函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">adict = &#123;<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;20&#x27;</span>&#125;</span><br><span class="line">data = json.dumps(adict) <span class="comment"># 转换，字典变为字符串</span></span><br><span class="line">jdata = json.loads(data) <span class="comment"># 转换，字符串变为字典</span></span><br><span class="line"><span class="built_in">print</span>(data);<span class="built_in">print</span>(jdata)</span><br></pre></td></tr></table></figure><h3 id="案例1：天气信息查询"><a href="#案例1：天气信息查询" class="headerlink" title="案例1：天气信息查询"></a>案例1：天气信息查询</h3>中国天气网全城市代码:<a href="https://blog.csdn.net/mxh3600/article/details/121580770">https://blog.csdn.net/mxh3600/article/details/121580770</a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">sk_url = <span class="string">&#x27;http://www.weather.com.cn/data/sk/101191101.html&#x27;</span></span><br><span class="line">r = request.urlopen(sk_url)</span><br><span class="line">data = r.read()</span><br><span class="line"><span class="comment"># print(data) # bytes类型</span></span><br><span class="line">info = json.loads(data)</span><br><span class="line">val = info[<span class="string">&#x27;weatherinfo&#x27;</span>] <span class="comment"># 取值</span></span><br></pre></td></tr></table></figure><h2 id="七-requests"><a href="#七-requests" class="headerlink" title="七.requests"></a>七.requests</h2></li><li>用python语言编写的简单的HTTP库，内部采用urilib3，并且需要单独安装</li><li>特性:支持keep-alive的连接池，支持通用域名以及URL地址，使用cookie，拥有类似浏览器的SSL验证，可以支持文件的上传下载<h3 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://pypi.tuna.tsinghua.edu.cn/packages/d1/05/059c78cd5d740d2299266ffa15514dad6692d4694df571bf168e2cdd98fb/pip-<span class="number">20.1</span>.tar.gz<span class="comment">#sha256=572c0f25eca7c87217b21f6945b7192744103b18f4e4b16b8a83b227a811e192 --no-check-certificate</span></span><br><span class="line">wget https://bootstrap.pypa.io/ez_setup.py -O - | sudo python</span><br><span class="line">tar zxf pip-<span class="number">20.1</span>.tar.gz</span><br><span class="line">cd pip-<span class="number">20.1</span></span><br><span class="line">python setup.py install</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;http://www.baidu.com&#x27;</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line">url2 = <span class="string">&#x27;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&#x27;</span></span><br><span class="line">r2 = requests.get(url2)</span><br><span class="line">r.content() <span class="comment"># 获取bytes类型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/tmp/a.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fobj: <span class="comment"># 查看图片</span></span><br><span class="line">fobj.write(r2.content)</span><br><span class="line">eog /tmp/a.jpg</span><br><span class="line">url3 = <span class="string">&#x27;http://www.weather.com.cn/data/sk/101191101.html&#x27;</span></span><br><span class="line">r3 = requests.get(url3)</span><br><span class="line">r3.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">r3.json()</span><br></pre></td></tr></table></figure><h3 id="案例1：查询快递信息"><a href="#案例1：查询快递信息" class="headerlink" title="案例1：查询快递信息"></a>案例1：查询快递信息</h3>结果并不准确<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">query_info</span>(<span class="params">i, j</span>):</span><br><span class="line"><span class="comment"># F12--&gt;NetWork中获取</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.kuaidi100.com/&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">f&#x27;https://www.kuaidi100.com/query?type=<span class="subst">&#123;j&#125;</span>&amp;postid=<span class="subst">&#123;i&#125;</span>&amp;temp=0.53162373256954096&amp;phone=&#x27;</span></span><br><span class="line">    resp = requests.get(url, headers=headers)</span><br><span class="line">    datas = json.loads(resp.text)[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;您的快递物流信息查询结果如下：\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> datas:</span><br><span class="line">        time_ = item[<span class="string">&#x27;time&#x27;</span>]</span><br><span class="line">        info = item[<span class="string">&#x27;context&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;时间：<span class="subst">&#123;time_&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;物流状态：<span class="subst">&#123;info&#125;</span>&#x27;</span> + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    delivery_dic = &#123;</span><br><span class="line">        <span class="string">&#x27;圆通&#x27;</span>: <span class="string">&#x27;yuantong&#x27;</span>, <span class="string">&#x27;申通&#x27;</span>: <span class="string">&#x27;shentong&#x27;</span>, <span class="string">&#x27;中通&#x27;</span>: <span class="string">&#x27;zhongtong&#x27;</span>, <span class="string">&#x27;百世快递&#x27;</span>: <span class="string">&#x27;huitongkuaidi&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;韵达&#x27;</span>: <span class="string">&#x27;yunda&#x27;</span>, <span class="string">&#x27;顺丰&#x27;</span>: <span class="string">&#x27;shunfeng&#x27;</span>, <span class="string">&#x27;天天快递&#x27;</span>: <span class="string">&#x27;tiantian&#x27;</span>, <span class="string">&#x27;邮政&#x27;</span>: <span class="string">&#x27;youzhengguonei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;EMS&#x27;</span>: <span class="string">&#x27;ems&#x27;</span>, <span class="string">&#x27;京东&#x27;</span>: <span class="string">&#x27;jd&#x27;</span>, <span class="string">&#x27;德邦快递&#x27;</span>: <span class="string">&#x27;debangwuliu&#x27;</span>, <span class="string">&#x27;极兔快递&#x27;</span>: <span class="string">&#x27;jtexpress&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    post_id = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要查询物流的快递单号：&#x27;</span>)</span><br><span class="line">    delivery = <span class="built_in">input</span>(<span class="string">&#x27;请输入快递公司：&#x27;</span>)</span><br><span class="line">    query_info(post_id, delivery_dic[delivery])</span><br></pre></td></tr></table></figure><h3 id="案例2：钉钉机器人"><a href="#案例2：钉钉机器人" class="headerlink" title="案例2：钉钉机器人"></a>案例2：钉钉机器人</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line">url = getpass.getpass() <span class="comment"># robot的Webhook</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json;charesr=utf-8&#x27;</span>&#125; <span class="comment"># 开发手册获取http请求头格式</span></span><br><span class="line"><span class="comment"># data包含关键词，否则发不出</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&quot;msgtype&quot;</span>: <span class="string">&quot;text&quot;</span>,</span><br><span class="line">        <span class="string">&quot;text&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&quot;ERROR-鲜衣怒马少年郎，谁人不识理塘王&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;at&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;atMobiles&quot;</span>: [</span><br><span class="line">        <span class="comment"># &quot;&quot;额外添加@对象</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;isAtAll&quot;</span>: <span class="literal">False</span> <span class="comment"># @所有人</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url,headers=headers,data=json.dumps(data))</span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br></pre></td></tr></table></figure></li></ul><hr><p><img src="/image/devops/1.jpg" alt="芝士雪豹"></p><hr><h3 id="http-超文本传输协议"><a href="#http-超文本传输协议" class="headerlink" title="http 超文本传输协议"></a>http 超文本传输协议</h3><h4 id="HTTP请求的过程与原理"><a href="#HTTP请求的过程与原理" class="headerlink" title="HTTP请求的过程与原理"></a>HTTP请求的过程与原理</h4><p>每个服务器都有一个进程，它不断监听TCP的端口80，以便发现是否有浏览器向它发出连接建立请求监听到连接请求，就会建立TCP连接浏览器向服务器发出浏览某个页面的请求，服务器接着就返回所请求的页面作为响应最后，释放TCP连接</p><h4 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h4><ul><li>1XX：信息性状态码</li><li>2XX：成功状态码</li><li>3XX：重定向状态码</li><li>4XX：客户端错误状态码</li><li>5XX：服务端错误状态码<h5 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h5></li><li>100：切换请求协议</li><li>200：请求成功</li><li>301：请求资源永久移动，返回新URI</li><li>302：请求资源临时移动，继续使用原URI</li><li>400：客服端语法错误，服务端无法理解</li><li>401：请求需要认证</li><li>403：服务端理解请求，但拒绝执行</li><li>404：服务器未找到文件</li><li>500：服务器内部错误<h4 id="HTTP请求方式"><a href="#HTTP请求方式" class="headerlink" title="HTTP请求方式"></a>HTTP请求方式</h4>POST、DELETE、PUT、GET对应增、删、改、查</li><li>GET：对服务器获取资源的简单请求</li><li>POST：向服务器提交数据请求</li><li>PUT：修改指定资源</li><li>DELETE：删除URL标记的指定资源</li><li>CONNECT：用于代理服务器</li><li>TRANCE：用于回环测试</li><li>OPTIONS：返回所有可用方法</li><li>HEAD：获取URL标记资源的首部<h5 id="GET-和-POST-的区别"><a href="#GET-和-POST-的区别" class="headerlink" title="GET 和 POST 的区别"></a>GET 和 POST 的区别</h5></li></ul><ol><li>HTTP 报文层面，GET 请求将信息放在 URL，POST 将请求信息放在请求体中。这使得 GET 请求携带的数据量有限，因为 URL 本身是有长度限制的，而 POST 请求的数据存放在报文体中，因此对大小没有限制。从形式上，GET 请求把数据放 URL 上不太安全，而 POST 请求把数据放在请求体里想比较而言安全一些。</li><li>数据库层面，GET 符合幂等性和安全性， POST 请求不符合。这个和 GET&#x2F;POST 请求的作用有关。按照 HTTP 的约定，GET 请求用于查看信息，不会改变服务器上的信息；POST 请求用来改变服务器上的信息。正因为 GET 请求只查看信息，不改变信息，对数据库的一次或多次操作获得的结果是一致的，认为它符合幂等性。<strong>安全性是指对数据库操作没有改变数据库中的数据。</strong></li><li>其他层面，GET 请求能够被缓存，GET 请求能够保存在浏览器的浏览记录里，GET 请求的 URL 能够保存为浏览器书签。这些都是 POST 请求所不具备的。缓存是 GET 请求被广泛应用的根本，能够被缓存也是因为它的幂等性和安全性，除了返回结果没有其他多余的动作，因此绝大部分的 GET 请求都被 CDN 缓存起来了，大大减少了 Web 服务器的负担。<h5 id="GET-的长度限制"><a href="#GET-的长度限制" class="headerlink" title="GET 的长度限制"></a>GET 的长度限制</h5>HTTP中的GET方法是通过URL传递数据的，但是URL本身其实并没有对数据的长度进行限制，真正限制GET长度的是浏览器。（IE：2000，FireFox：65536，Chrome：8281）<h4 id="URI和URL区别"><a href="#URI和URL区别" class="headerlink" title="URI和URL区别"></a>URI和URL区别</h4><strong>URI 像是身份证，可以唯一标识一个人，而 URL 更像一个住址，可以通过 URL 找到这个人</strong><br>URI：统一资源标识符(Uniform Resource Identifier， URI)，标识的是Web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都是由一个URI进行标识的。<br>URL：统一资源定位符（Uniform Resource Location)，<strong>URI的一种子集</strong>，主要作用是提供资源的路径。<h4 id="HTTP-x2F-1-0，1-1，2-0"><a href="#HTTP-x2F-1-0，1-1，2-0" class="headerlink" title="HTTP&#x2F;1.0，1.1，2.0"></a>HTTP&#x2F;1.0，1.1，2.0</h4><strong>HTTP&#x2F;1.0 默认是短连接，可以强制开启，HTTP&#x2F;1.1 默认长连接，HTTP&#x2F;2.0 采用多路复用</strong><h5 id="HTTP-x2F-1-0"><a href="#HTTP-x2F-1-0" class="headerlink" title="HTTP&#x2F;1.0"></a>HTTP&#x2F;1.0</h5>默认使用短连接，每次请求都需要建立一个 TCP 连接。它可以设置Connection: keep-alive 这个字段，强制开启长连接<h5 id="HTTP-x2F-1-1"><a href="#HTTP-x2F-1-1" class="headerlink" title="HTTP&#x2F;1.1"></a>HTTP&#x2F;1.1</h5>引入了持久连接，即 TCP 连接默认不关闭，可以被多个请求复用；分块传输编码，即服务端每产生一块数据，就发送一块，用” 流模式” 取代” 缓存模式”；管道机制，即在同一个 TCP 连接里面，客户端可以同时发送多个请求。<h5 id="HTTP-x2F-2-0"><a href="#HTTP-x2F-2-0" class="headerlink" title="HTTP&#x2F;2.0"></a>HTTP&#x2F;2.0</h5>二进制协议，1.1 版本的头信息是文本（ASCII 编码），数据体可以是文本或者二进制；2.0 中，头信息和数据体都是二进制；完全多路复用，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应；报头压缩，HTTP 协议不带有状态，每次请求都必须附上所有信息。Http&#x2F;2.0 引入了头信息压缩机制，使用 gzip 或 compress 压缩后再发送；服务端推送，允许服务器未经请求，主动向客户端发送资源。<h5 id="HTTP实现长连接-怎么会超时"><a href="#HTTP实现长连接-怎么会超时" class="headerlink" title="HTTP实现长连接+怎么会超时"></a>HTTP实现长连接+怎么会超时</h5>TCP 长连接可以复用一个 TCP 连接，来发起多次的 HTTP 请求，这样就可以减少资源消耗，比如一次请求 HTML，如果是短连接的话，可能还需要请求后续的 JS&#x2F;CSS<br>设置长连接：通过在头部（请求和响应头）设置 Connection 字段指定为keep-alive，HTTP&#x2F;1.0 协议支持，但是是默认关闭的，从 HTTP&#x2F;1.1 以后，连接默认都是长连接。<br>超时：HTTP 一般会有 httpd 守护进程，里面可以设置 keep-alive timeout，当 tcp 连接闲置超过这个时间就会关闭，也可以在 HTTP 的 header 里面设置超时时间<h4 id="HTTP-x2F-3"><a href="#HTTP-x2F-3" class="headerlink" title="HTTP&#x2F;3"></a>HTTP&#x2F;3</h4>HTTP&#x2F;3主要有两大变化，<strong>传输层基于UDP</strong>、<strong>QUIC保证UDP可靠性</strong><br>QUIC 有自己的⼀套机制可以保证传输的可靠性的。当某个流发⽣丢包时，只会阻塞这个流，其他流不会受到影响<h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信<br>HTTP 的端⼝号是 80，HTTPS 的端⼝号是 443<br>HTTPS 在 TCP 三次握⼿之后，还需进⾏ SSL&#x2F;TLS 的握⼿过程，才可进⼊加密报⽂传输<h5 id="什么要用HTTPS"><a href="#什么要用HTTPS" class="headerlink" title="什么要用HTTPS"></a>什么要用HTTPS</h5>HTTP 是明⽂传输，存在安全上的风险（窃听⻛险，篡改⻛险，冒充⻛险），HTTPS 在 HTTP 与 TCP 层之间加⼊了 SSL&#x2F;TLS 协议，可以进行信息加密，校验机制，身份证书。<h5 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h5></li><li>客户端发起 HTTPS 请求，连接到服务端的 443 端口。</li><li>服务端有一套数字证书（证书内容有公钥、证书颁发机构、失效日期等）。</li><li>服务端将自己的数字证书发送给客户端（公钥在证书里面，私钥由服务器持有）。</li><li>客户端收到数字证书之后，会验证证书的合法性。如果证书验证通过，就会生成一个随机的对称密钥，用证书的公钥加密。</li><li>客户端将公钥加密后的密钥发送到服务器。</li><li>服务器接收到客户端发来的密文密钥之后，用自己之前保留的私钥对其进行非对称解密，解密之后就得到客户端的密钥，然后用客户端密钥对返回数据进行对称加密，酱紫传输的数据都是密文啦。</li><li>服务器将加密后的密文返回到客户端。</li><li>客户端收到后，用自己的密钥对其进行对称解密，得到服务器返回的数据。<h2 id="八-zabbix-API"><a href="#八-zabbix-API" class="headerlink" title="八.zabbix API"></a>八.zabbix API</h2></li></ol><ul><li>官方手册：<a href="https://www.zabbix.com/documentation/4.0/zh/manual/api">https://www.zabbix.com/documentation/4.0/zh/manual/api</a></li><li>zabbix API允许以编程的方式检索和修改zabbix配置，并提供历史数据的访问</li><li>zabbix API是基于Web的API，作为前端的一部分提供，使用的是JSON-RPC2.0协议</li><li>位置：&#x2F;var&#x2F;www&#x2F;html&#x2F;zabbix&#x2F;api_jsonrpc.php，<strong>直接打开为空内容</strong><h3 id="获取zabbix版本信息"><a href="#获取zabbix版本信息" class="headerlink" title="获取zabbix版本信息"></a>获取zabbix版本信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://192.168.189.130/zabbix/api_jsonrpc.php&quot;</span></span><br><span class="line"><span class="comment"># 头部必须设置以下之一(application/json-rpc,application/json,application/jsonrequest)</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;application/json-rpc&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 开发手册查找格式,大量方法需要身份验证才可回复</span></span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,             <span class="comment"># jsonrpc协议版本</span></span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;apiinfo.version&quot;</span>,  <span class="comment"># 方法</span></span><br><span class="line"><span class="string">&quot;params&quot;</span>: [],                 <span class="comment"># 参数</span></span><br><span class="line"><span class="string">&quot;id&quot;</span>: <span class="number">1</span>                       <span class="comment"># 表示作业号，随意指定</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(url,headers=headers,data=json.dumps(data))</span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br></pre></td></tr></table></figure><h3 id="获取令牌"><a href="#获取令牌" class="headerlink" title="获取令牌"></a>获取令牌</h3>使用user.login方法登录获取身份验证令牌，<strong>令牌具有时效性</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;user.login&quot;</span>,</span><br><span class="line">  <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: <span class="string">&quot;Admin&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;zabbix&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">&quot;auth&quot;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="获取主机信息"><a href="#获取主机信息" class="headerlink" title="获取主机信息"></a>获取主机信息</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line"><span class="string">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;method&quot;</span>: <span class="string">&quot;host.get&quot;</span>,</span><br><span class="line">  <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;output&quot;</span>: <span class="string">&quot;extend&quot;</span>,</span><br><span class="line">    <span class="string">&quot;filter&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;host&quot;</span>: &#123;</span><br><span class="line">            <span class="comment"># &quot;zabbix server&quot;,</span></span><br><span class="line">            <span class="comment"># &quot;linux server&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">&quot;auth&quot;</span>: <span class="string">&quot;身份令牌&quot;</span>,</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九-git"><a href="#九-git" class="headerlink" title="九.git"></a>九.git</h2>官网下载：<a href="https://git-scm.com/downloads/">https://git-scm.com/downloads/</a></li></ul><hr><p><img src="/image/devops/2.jpg" alt="git结构"></p><hr><p>暂存区:git不算⼯作区，只是git的版本库 版本库中只有暂存区和⾃动创建的master分⽀及指向master的⼀个指针HEAD,git跟踪的是每次修改⽽不是⽂件，如果不将修改添加到暂存区是⽆法进⾏提交的</p><h3 id="集中式版本控制器-CSV-x2F-SVN"><a href="#集中式版本控制器-CSV-x2F-SVN" class="headerlink" title="集中式版本控制器 CSV&#x2F;SVN"></a>集中式版本控制器 CSV&#x2F;SVN</h3><p>特点：速度慢，必须联⽹<br>只有⼀个中央数据仓库，如果中央数据仓库挂了或者⽆法访问，所有的使⽤者⽆法使⽤SVN，⽆法进⾏提交或备份操作</p><h3 id="分布式版本控制器-Git"><a href="#分布式版本控制器-Git" class="headerlink" title="分布式版本控制器 Git"></a>分布式版本控制器 Git</h3><p>特点：直接快照，而非比较差异；近乎所有操作本地执行；时刻保持数据的完整性（所有数据保存前都需要进行校验和checksum计算，作为唯一标识和索引）</p><h3 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h3><ul><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git -y</span><br></pre></td></tr></table></figure></li><li>配置本地用户信息<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;your name&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;your email&quot;</span></span><br><span class="line">git config --global core.editor vim <span class="comment"># 默认编辑器</span></span><br><span class="line">git config --global color.ui <span class="literal">true</span></span><br><span class="line">git config --list <span class="comment"># 查看信息 cat ~/.gitconfig</span></span><br></pre></td></tr></table></figure><h3 id="操作使用"><a href="#操作使用" class="headerlink" title="操作使用"></a>操作使用</h3></li><li>创建仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不存在项目时，直接创建</span></span><br><span class="line">git init tag_name</span><br><span class="line"><span class="comment"># 有项目时，在已有的项目的目录中创建仓库</span></span><br><span class="line"><span class="built_in">cd</span> web_location &amp;&amp; git init</span><br></pre></td></tr></table></figure></li><li>从仓库克隆<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接克隆</span></span><br><span class="line">git <span class="built_in">clone</span> tag_url</span><br><span class="line"><span class="comment"># 指定本地目录</span></span><br><span class="line">git <span class="built_in">clone</span> tag_url local_name</span><br></pre></td></tr></table></figure></li><li>文件状态 git status</li></ul><hr><p><img src="/image/devops/3.jpg" alt="文件生命周期"></p><hr><p>工作目录下的文件有俩种状态：跟踪和未跟踪<br>已跟踪文件指被纳入版本控制管理的文件，上次快照中有它们的记录，工作一段时间后，它们的状态可能未更新，已修改或放入暂存区，其它文件属于未跟踪文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跟踪文件</span></span><br><span class="line">git add TXT</span><br><span class="line"><span class="comment"># 跟踪所有文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>忽略文件：.gitignore<br>所有空行或以# 开头的行会被Git忽略，可以使用gloc模式匹配，匹配模式最后跟反斜杠说明忽略的是目录，要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号取反</li><li>文件加到仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> my_git <span class="comment"># 切换到项目</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> &gt; README.txt</span><br><span class="line">git add README.txt</span><br><span class="line">git commit -m <span class="string">&quot;write a README.txt file&quot;</span></span><br></pre></td></tr></table></figure></li><li>修改文件内容，查询状态并提交<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello gitlab&quot;</span> &gt;&gt; README.txt</span><br><span class="line">git status</span><br><span class="line">***</span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 尚未暂存以备提交的变更：</span></span><br><span class="line"><span class="comment"># （使用 &quot;git add &lt;file&gt;...&quot; 更新要提交的内容）</span></span><br><span class="line"><span class="comment"># （使用 &quot;git checkout -- &lt;file&gt;...&quot; 丢弃工作区的改动）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 修改： README.txt</span></span><br><span class="line">***</span><br><span class="line"><span class="comment"># 修改尚未加入提交（使用 &quot;git add&quot; 和/或 &quot;git commit -a&quot;）</span></span><br><span class="line">git add README.txt</span><br><span class="line">git status</span><br><span class="line">***</span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 要提交的变更：</span></span><br><span class="line"><span class="comment"># （使用 &quot;git reset HEAD &lt;file&gt;...&quot; 撤出暂存区）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 修改： README.txt</span></span><br><span class="line">***</span><br><span class="line">git commit -m <span class="string">&quot;append hello gitlab to README.txt&quot;</span></span><br><span class="line">git status</span><br><span class="line">***</span><br><span class="line"><span class="comment"># 位于分支 master</span></span><br><span class="line"><span class="comment"># 无文件要提交，干净的工作区</span></span><br><span class="line">***</span><br></pre></td></tr></table></figure></li><li>查询文件内容的变动<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello linux&quot;</span> &gt;&gt; README.txt</span><br><span class="line">git diff README.txt</span><br><span class="line">git commit -a -m <span class="string">&quot;append hello linux to README.txt&quot;</span></span><br></pre></td></tr></table></figure></li><li>查询历史记录并退回<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br><span class="line">git reflog <span class="comment"># 查看所有历史记录</span></span><br><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line"><span class="comment"># ca3e26c append hello linux to README.txt</span></span><br><span class="line"><span class="comment"># 176a262 append hello gitlab to README.txt</span></span><br><span class="line"><span class="comment"># 854d889 write a README.txt file</span></span><br><span class="line">git reset --hard 176a262</span><br><span class="line"><span class="built_in">cat</span> README.txt</span><br></pre></td></tr></table></figure></li><li>删除文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> README.txt</span><br><span class="line">git commit -m <span class="string">&quot;delete README.txt&quot;</span></span><br></pre></td></tr></table></figure></li><li>修改文件名称<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> README.txt readme.txt</span><br><span class="line">git <span class="built_in">mv</span> readme.txt README.txt</span><br><span class="line">git commit -a -m <span class="string">&quot;rename readme.txt to README.txt&quot;</span></span><br></pre></td></tr></table></figure></li><li>停止跟踪文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --oneline</span><br><span class="line">git reset --hard 6599d6c</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3>分支就是平行空间,尽量保持master分支是非常稳定的，仅用于发布新版本，不要随便直接修改里面的数据文件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分⽀</span></span><br><span class="line">git branch</span><br><span class="line"><span class="comment"># 列出所有远程分⽀</span></span><br><span class="line">git branch -r</span><br><span class="line"><span class="comment"># 列出所有本地分⽀和远程分⽀</span></span><br><span class="line">git branch -a</span><br><span class="line"><span class="comment"># 新建⼀个分⽀，但依然停留在当前分⽀</span></span><br><span class="line">git branch [branch-name]</span><br><span class="line"><span class="comment"># 新建⼀个分⽀，并切换到该分⽀</span></span><br><span class="line">git checkout -b [branch]</span><br><span class="line"><span class="comment"># 新建⼀个分⽀，指向指定commit</span></span><br><span class="line">git branch [branch] [commit]</span><br><span class="line"><span class="comment"># 新建⼀个分⽀，与指定的远程分⽀建⽴追踪关系</span></span><br><span class="line">git branch --track [branch] [remote-branch]</span><br><span class="line"><span class="comment"># 切换到指定分⽀，并更新⼯作区</span></span><br><span class="line">git checkout [branch-name]</span><br><span class="line"><span class="comment"># 切换到上⼀个分⽀</span></span><br><span class="line">git checkout -</span><br><span class="line"><span class="comment"># 建⽴追踪关系，在现有分⽀与指定的远程分⽀之间</span></span><br><span class="line">git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"><span class="comment"># 合并指定分⽀到当前分⽀</span></span><br><span class="line">git merge [branch]</span><br><span class="line"><span class="comment"># 选择⼀个commit，合并进当前分⽀</span></span><br><span class="line">git cherry-pick [commit]</span><br><span class="line"><span class="comment"># 删除分⽀</span></span><br><span class="line">git branch -d [branch-name]</span><br><span class="line"><span class="comment"># 删除远程分⽀</span></span><br><span class="line">git push origin --delete [branch-name]</span><br><span class="line">git branch -dr [remote/branch]</span><br><span class="line"><span class="comment"># 检出head版本的README⽂件（可⽤于修改错误回退）</span></span><br><span class="line">git checkout -- README</span><br></pre></td></tr></table></figure><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3>标签也是指向了一次commit提交，是一个里程碑式的标签，回滚打标签直接加标签号，不需要加唯一字符串。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给当前状态打标签</span></span><br><span class="line">git tag -a v1.0 -m <span class="string">&quot; version 1.0&quot;</span></span><br><span class="line"><span class="comment"># 指定某次状态打标签</span></span><br><span class="line">git tag -a v2.0 [哈希值] -m <span class="string">&quot;version 2.0&quot;</span></span><br><span class="line"><span class="comment"># 查看所有标签信息</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 查看指定标签信息</span></span><br><span class="line">git show v1.0</span><br><span class="line"><span class="comment"># 删除标签</span></span><br><span class="line">git tag -d v1.0</span><br><span class="line"><span class="comment"># 以标签回滚</span></span><br><span class="line">git reset --hard v2.0</span><br><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">git tag</span><br><span class="line"><span class="comment"># 新建⼀个tag在当前commit</span></span><br><span class="line">git tag [tag]</span><br><span class="line"><span class="comment"># 新建⼀个tag在指定commit</span></span><br><span class="line">git tag [tag] [commit]</span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">git tag -d [tag]</span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">git push origin :refs/tags/[tagName]</span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">git show [tag]</span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">git push [remote] [tag]</span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">git push [remote] --tags</span><br><span class="line"><span class="comment"># 新建⼀个分⽀，指向某个tag</span></span><br><span class="line">git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">git fetch [remote]</span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">git remote -v</span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">git remote show [remote]</span><br><span class="line"><span class="comment"># 增加⼀个新的远程仓库，并命名</span></span><br><span class="line">git remote add [shortname] [url]</span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分⽀合并</span></span><br><span class="line">git pull [remote] [branch]</span><br><span class="line"><span class="comment"># 上传本地指定分⽀到远程仓库</span></span><br><span class="line">git push [remote] [branch]</span><br><span class="line"><span class="comment"># 强⾏推送当前分⽀到远程仓库，即使有冲突</span></span><br><span class="line">git push [remote] --force</span><br><span class="line"><span class="comment"># 推送所有分⽀到远程仓库</span></span><br><span class="line">git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定⽂件到⼯作区</span></span><br><span class="line">git checkout [file]</span><br><span class="line"><span class="comment"># 恢复某个commit的指定⽂件到暂存区和⼯作区</span></span><br><span class="line">git checkout [commit] [file]</span><br><span class="line"><span class="comment"># 恢复暂存区的所有⽂件到⼯作区</span></span><br><span class="line">git checkout .</span><br><span class="line"><span class="comment"># 重置暂存区的指定⽂件，与上⼀次commit保持⼀致，但⼯作区不变</span></span><br><span class="line">git reset [file]</span><br><span class="line"><span class="comment"># 重置暂存区与⼯作区，与上⼀次commit保持⼀致</span></span><br><span class="line">git reset --hard</span><br><span class="line"><span class="comment"># 重置当前分⽀的指针为指定commit，同时重置暂存区，但⼯作区不变</span></span><br><span class="line">git reset [commit]</span><br><span class="line"><span class="comment"># 重置当前分⽀的HEAD为指定commit，同时重置暂存区和⼯作区，与指定commit⼀致</span></span><br><span class="line">git reset --hard [commit]</span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和⼯作区不变</span></span><br><span class="line">git reset --keep [commit]</span><br><span class="line"><span class="comment"># 新建⼀个commit，⽤来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应⽤到当前分⽀</span></span><br><span class="line">git revert [commit]</span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移⼊</span></span><br><span class="line">git stash</span><br><span class="line">git stash pop</span><br></pre></td></tr></table></figure><h3 id="gitlab服务器搭建"><a href="#gitlab服务器搭建" class="headerlink" title="gitlab服务器搭建"></a>gitlab服务器搭建</h3>Glitlab 比较占用内存，官方建议最低配置为 2核4G。</li><li>docker安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙或放行端口，关闭selinux</span></span><br><span class="line">yum install -y docker docker-ce</span><br><span class="line">systemctl --now <span class="built_in">enable</span> docker &amp;&amp; systemctl start docker</span><br><span class="line">docker search gitlab/gitlab</span><br><span class="line">docker pull gitlab/gitlab-ce</span><br><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">***</span><br><span class="line">Port 2022 <span class="comment"># 修改ssh端口</span></span><br><span class="line">***</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></li><li>gitlab部署<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 挂载数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /srv/gitlab</span><br><span class="line"><span class="built_in">mkdir</span> -p /srv/gitlab/config <span class="comment"># 映射到 Glitlab 容器中的配置目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /srv/gitlab/logs <span class="comment"># 映射到 Glitlab 容器中的日志目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /srv/gitlab/data <span class="comment"># 映射到 Glitlab 容器中的数据目录</span></span><br><span class="line"><span class="comment"># 启动docker容器时报错:iptables failed: iptables --wait -t nat -A DOCKER -p tc (手动添加iptables规则)</span></span><br><span class="line">sudo iptables -P FORWARD ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -i docker0 -j ACCEPT</span><br><span class="line">sudo iptables -A FORWARD -o docker0 -j ACCEPT</span><br><span class="line"><span class="comment"># 启动容器，并进行映象</span></span><br><span class="line">docker run -d -h gitlab --name gitlab -p 443:443 -p 80:80 -p 22:22 --restart always -v /srv/gitlab/config:/etc/gitlab:Z -v /srv/gitlab/logs:/var/log/gitlab:Z -v /srv/gitlab/data:/var/opt/gitlab:Z --privileged=<span class="literal">true</span> gitlab/gitlab-ce</span><br><span class="line">docker ps <span class="comment"># 查看状态</span></span><br></pre></td></tr></table></figure></li><li>登录：获取密码<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find / -name initial_root_password <span class="comment"># 查找文件</span></span><br><span class="line"><span class="built_in">cat</span> /srv/gitlab/config/initial_root_password <span class="comment"># 获取root密码</span></span><br></pre></td></tr></table></figure>仍然提示密码错误<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it -uroot gitlab /bin/bash</span><br><span class="line"><span class="built_in">cd</span> /opt/gitlab/bin</span><br><span class="line">gitlab-rails console</span><br><span class="line"> u=User.<span class="built_in">where</span>(<span class="built_in">id</span>:1).first</span><br><span class="line"> u.password=<span class="string">&#x27;new password&#x27;</span></span><br><span class="line"> u.password_confirmation=<span class="string">&#x27;new password&#x27;</span></span><br><span class="line"> u.save</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure></li><li>gitlab设置中文</li></ul><hr><p><img src="/image/devops/4.jpg" alt="中文"></p><hr><h3 id="gitlab使用"><a href="#gitlab使用" class="headerlink" title="gitlab使用"></a>gitlab使用</h3><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><ul><li>创建用户</li></ul><hr><p><img src="/image/devops/5.jpg" alt="创建用户"></p><hr><ul><li>创建完成后，点击左侧编辑可以添加密码</li></ul><hr><p><img src="/image/devops/6.jpg" alt="添加密码"></p><hr><ul><li>添加到群组，并设置权限</li></ul><hr><p><img src="/image/devops/7.jpg" alt="添加到群组"></p><hr><ul><li>添加到项目，并设置权限</li></ul><hr><p><img src="/image/devops/8.jpg" alt="添加到项目"></p><hr><h4 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h4><ul><li>创建新的版本库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> http://192.168.189.130/devops/myweb.git <span class="comment"># 域名解析+仓库名+项目名</span></span><br><span class="line"><span class="built_in">cd</span> myweb</span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git commit -m <span class="string">&quot;add README&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li>存在新的文件夹<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> exist_myweb</span><br><span class="line">git init</span><br><span class="line">git remote add origin http://192.168.189.130/devops/myweb.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li><li>存在Git版本库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> exist_myweb</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin http://192.168.189.130/devops/myweb.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure><h4 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h4></li><li>生成公钥<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></li></ul><hr><p><img src="/image/devops/9.jpg" alt="SSH"></p><hr><ul><li>推送<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@192.168.189.130:devops/myweb.git</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="pycharm关联gitlab"><a href="#pycharm关联gitlab" class="headerlink" title="pycharm关联gitlab"></a>pycharm关联gitlab</h3>文件——&gt;关闭项目——&gt;”从VSC获取”</li></ul><hr><p><img src="/image/devops/10.jpg" alt="远程仓库地址"></p><hr><p>在文件夹下存放文件后</p><hr><p><img src="/image/devops/11.jpg" alt="提交"></p><hr><p>全部勾选&#x2F;选择需要文件 + 提交信息+推送</p><h2 id="10-jenkins"><a href="#10-jenkins" class="headerlink" title="10.jenkins"></a>10.jenkins</h2><p>jenkins是java编写的一款开源工具，用于构建和测试各种项目<br>主要功能：监视重复工作的执行，例如软件工程的构建或在cron下设置jobs</p><hr><p><img src="/image/devops/12.jpg" alt="jenkins"></p><hr><h3 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h3><p>官网：<a href="http://jenkins.io/">http://jenkins.io</a></p><ul><li>安装JDK11<br>官网：<a href="https://www.oracle.com/java/technologies/downloads/#java11">https://www.oracle.com/java/technologies/downloads/#java11</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh jdk-11.0.21_linux-x64_bin.rpm</span><br><span class="line">vim /etc/profile</span><br><span class="line">*** <span class="comment"># 添加</span></span><br><span class="line"><span class="comment">#set java environment;</span></span><br><span class="line">    JAVA_HOME=/usr/java/jdk11  <span class="comment">#修改为自己的路径，和jdk文件名</span></span><br><span class="line">    CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib.tools.jar</span><br><span class="line">    PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">    <span class="built_in">export</span> JAVA_HOME CLASSPATH PATH</span><br><span class="line">***</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure></li><li>安装git<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y git</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure></li><li>安装jenkins-rpm包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.huaweicloud.com/jenkins/redhat-stable/jenkins-2.414.2-1.1.noarch.rpm</span><br><span class="line">rpm -ivh jenkins-2.414.2-1.1.noarch.rpm</span><br><span class="line">yum -y install dejavu-sans-fonts fontconfig xorg-x11-server-Xvfb</span><br></pre></td></tr></table></figure></li><li>修改jenkins配置-添加自己的jdk路径 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/init.d/jenkins</span><br></pre></td></tr></table></figure></li></ul><hr><p><img src="/image/devops/13.jpg" alt="jenkins配置"></p><hr><ul><li>修改jenkins用户权限为root<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line"><span class="comment"># JENKINS_USER=&quot;root&quot;</span></span><br></pre></td></tr></table></figure></li><li>启动jenkins<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙或放行接口，并关闭selinux</span></span><br><span class="line">firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br><span class="line">systemctl restart firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">/etc/init.d/jenkins start <span class="comment"># 启动</span></span><br><span class="line">/etc/init.d/jenkins stop <span class="comment"># 关闭</span></span><br><span class="line">/etc/init.d/jenkins restart <span class="comment"># 重启</span></span><br><span class="line"><span class="comment"># 查看密码</span></span><br><span class="line"><span class="built_in">cat</span> /var/lib/jenkins/secrets/initialAdminPassword</span><br></pre></td></tr></table></figure></li></ul><hr><p><img src="/image/devops/14.jpg" alt="自定义Jenkins"><br><img src="/image/devops/15.jpg" alt="自定义Jenkins"></p><hr><ul><li>使用admin登录</li><li>实例配置默认</li><li>admin–&gt;config–&gt;修改密码<h3 id="Jenkins配置"><a href="#Jenkins配置" class="headerlink" title="Jenkins配置"></a>Jenkins配置</h3><h4 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h4></li></ul><hr><p><img src="/image/devops/16.jpg" alt="插件"></p><hr><ul><li>默认官方站点安装慢，修改配置进行加速<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/http:\/\/updates.jenkinsci.org\/download/https:\/\/mirrors.tuna.tsinghua.edu.cn\/jenkins/g&#x27;</span> /var/lib/jenkins/updates/default.json &amp;&amp; sed -i <span class="string">&#x27;s/http:\/\/www.google.com/https:\/\/www.baidu.com/g&#x27;</span> /var/lib/jenkins/updates/default.json</span><br><span class="line">/etc/init.d/jenkins restart</span><br></pre></td></tr></table></figure></li><li>安装谷歌浏览器<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</span><br><span class="line">yum install -y google-chrome-stable_current_x86_64.rpm</span><br><span class="line">google-chrome-stable --no-sandbox &amp;</span><br></pre></td></tr></table></figure></li><li>安装插件</li></ul><hr><p><img src="/image/devops/17.jpg" alt="插件"></p><hr><h4 id="git仓库"><a href="#git仓库" class="headerlink" title="git仓库"></a>git仓库</h4><ul><li>创建本地仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /root/git_project</span><br><span class="line"><span class="built_in">cd</span> /root/git_project</span><br><span class="line">git init mysite</span><br><span class="line"><span class="built_in">cd</span> mysite</span><br><span class="line">vim index.html</span><br><span class="line">***</span><br><span class="line">&lt;h1&gt;My Web Site&lt;/h1&gt;</span><br><span class="line">***</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;init data&quot;</span></span><br><span class="line">git tag 1.0</span><br><span class="line">vim index.html</span><br><span class="line">***</span><br><span class="line">&lt;h1&gt;My Web Site&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;2 version&lt;/h2&gt;</span><br><span class="line">***</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;my site 2.0&quot;</span></span><br><span class="line">git tag 2.0</span><br><span class="line">git status</span><br></pre></td></tr></table></figure></li><li>远程仓库</li></ul><hr><p><img src="/image/devops/18.jpg" alt="mysite项目"></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@192.168.189.130:devops/mysite.git</span><br><span class="line">git push --set-upstream origin --all</span><br><span class="line">git push --set-upstream origin --tags</span><br></pre></td></tr></table></figure><hr><p><img src="/image/devops/19.jpg" alt="mysite项目"></p><hr><h4 id="jenkins管理"><a href="#jenkins管理" class="headerlink" title="jenkins管理"></a>jenkins管理</h4><ul><li>创建一个mysite任务</li></ul><hr><p><img src="/image/devops/20.jpg" alt="参数"><br><img src="/image/devops/21.jpg" alt="源码管理"></p><hr><ul><li>拉取</li></ul><hr><p><img src="/image/devops/22.jpg" alt="tag1.0"></p><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ls</span> /var/lib/jenkins/workspace/mysite/</span><br></pre></td></tr></table></figure><ul><li>根据版本拉取到不同目录</li></ul><hr><p><img src="/image/devops/23.jpg" alt="mysite项目"></p><hr><h4 id="分发应用程序"><a href="#分发应用程序" class="headerlink" title="分发应用程序"></a>分发应用程序</h4><ul><li>在Jenkins服务器上安装apache，拱辰还需要打包成一个文件，还需要为其生成md5值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/www/html/deploy/pkgs</span><br><span class="line"><span class="built_in">chown</span> -R jenkins:jenkins /var/www/html/deploy</span><br><span class="line">systemctl start httpd &amp;&amp; systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure></li><li>构建shell</li></ul><hr><p><img src="/image/devops/24.jpg" alt="shell"></p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pkg_dir=/var/www/html/deploy/pkgs</span><br><span class="line">cp -r mysite-$webver $pkg_dir</span><br><span class="line">cd $pkg_dir</span><br><span class="line">rm -rf mysite-$webver/.git</span><br><span class="line">tar czf mysite-$webver.tar.gz mysite-$webver</span><br><span class="line">rm -rf mysite-$webver</span><br><span class="line">md5sum mysite-$webver.tar.gz | awk &#x27;&#123;print $1&#125;&#x27; &gt; mysite-$webver.tar.gz.md5</span><br><span class="line">cd ..</span><br><span class="line">[-f live_ver] &amp;&amp; cat live_ver &gt; last_ver</span><br><span class="line">echo -n $webver &gt; live_ver</span><br></pre></td></tr></table></figure><h3 id="自动化部署框架"><a href="#自动化部署框架" class="headerlink" title="自动化部署框架"></a>自动化部署框架</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install httpd -y</span><br><span class="line"><span class="built_in">mkdir</span> -p /var/www/deploy <span class="comment"># 存储解压应用</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/www/download <span class="comment"># 存储下载应用</span></span><br></pre></td></tr></table></figure><ul><li>python脚本<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">import</span> wget</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">has_new_ver</span>(<span class="params">ver_fname, ver_url</span>):</span><br><span class="line">    <span class="string">&#x27;用于判断是否有新版本，有新版本返回True,否则返回False&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.isfile(ver_fname):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取出远程版本号</span></span><br><span class="line">    r = requests.get(ver_url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 远程版本与本地版本比较</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(ver_fname) <span class="keyword">as</span> fobj:</span><br><span class="line">        local_ver = fobj.read()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> local_ver != r.text:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">file_ok</span>(<span class="params">app_fname, md5_url</span>):</span><br><span class="line">    <span class="string">&#x27;用于校验软件包是否完好，完好返回True,否则返回False&#x27;</span></span><br><span class="line">    <span class="comment"># 计算文件的md5值</span></span><br><span class="line">    m = hashlib.md5()</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(app_fname, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> fobj:</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            data = fobj.read(<span class="number">4096</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            m.update(data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在网上取出公布的md5值</span></span><br><span class="line">    r = requests.get(md5_url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 判断两个值是否相等</span></span><br><span class="line">    <span class="keyword">if</span> m.hexdigest() == r.text.strip():</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deploy</span>(<span class="params">app_fname, deploy_dir, dest</span>):</span><br><span class="line">    <span class="string">&#x27;部署软件包到web服务器&#x27;</span></span><br><span class="line">    <span class="comment"># 解压到部署目录</span></span><br><span class="line">    tar = tarfile.<span class="built_in">open</span>(app_fname)</span><br><span class="line">    tar.extractall(path=deploy_dir)</span><br><span class="line">    tar.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接出解压目录的绝对路径</span></span><br><span class="line">    app_dir = os.path.basename(app_fname)</span><br><span class="line">    app_dir = dest.replace(<span class="string">&#x27;.tar.gz&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    app_dir = os.path.join(deploy_dir, app_dir)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建链接</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(dest):  <span class="comment"># 如果链接文件已存在，先删除它</span></span><br><span class="line">        os.remove(dest)</span><br><span class="line">    os.symlink(app_dir, dest)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 没有新版本软件，则退出</span></span><br><span class="line">    ver_fname = <span class="string">&#x27;/var/www/deploy/live_ver&#x27;</span></span><br><span class="line">    ver_url = <span class="string">&#x27;http://192.168.189.130:82/deploy/live_ver&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> has_new_ver(ver_fname, ver_url):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;未发现新版本。&#x27;</span>)</span><br><span class="line">        exit(<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 下载新版本软件包</span></span><br><span class="line">    r = requests.get(ver_url)</span><br><span class="line">    app_url = <span class="string">&#x27;http://192.168.189.130:82/deploy/pkgs/mysite-%s.tar.gz&#x27;</span> % r.text</span><br><span class="line">    app_fname = <span class="string">&#x27;/var/www/download/mysite-%s.tar.gz&#x27;</span> % r.text</span><br><span class="line">    wget.download(app_url, app_fname)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 校验软件包是否完好，软件包已损坏的话，删除损坏的包，退出</span></span><br><span class="line">    md5_url = app_url + <span class="string">&#x27;.md5&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_ok(app_fname, md5_url):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件已损坏。&#x27;</span>)</span><br><span class="line">        exit(<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 部署软件包</span></span><br><span class="line">    deploy_dir = <span class="string">&#x27;/var/www/deploy&#x27;</span></span><br><span class="line">    dest = <span class="string">&#x27;/var/www/html/current&#x27;</span></span><br><span class="line">    deploy(app_fname, deploy_dir, dest)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新本地软件版本文件</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(ver_fname):</span><br><span class="line">        os.remove(ver_fname)</span><br><span class="line">    wget.download(ver_url, ver_fname)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Devops&quot;&gt;&lt;a href=&quot;#Devops&quot; class=&quot;headerlink&quot; title=&quot;Devops&quot;&gt;&lt;/a&gt;Devops&lt;/h1&gt;&lt;h2 id=&quot;一-Devops介绍&quot;&gt;&lt;a href=&quot;#一-Devops介绍&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/linux/"/>
    
    
    <category term="linux" scheme="http://xczf.shop/tags/linux/"/>
    
    <category term="python" scheme="http://xczf.shop/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>memcache</title>
    <link href="http://xczf.shop/2023/09/01/memcache/"/>
    <id>http://xczf.shop/2023/09/01/memcache/</id>
    <published>2023-09-01T11:00:41.000Z</published>
    <updated>2023-12-10T08:50:07.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Memcached-分布式缓存系统"><a href="#Memcached-分布式缓存系统" class="headerlink" title="Memcached 分布式缓存系统"></a>Memcached 分布式缓存系统</h2><p>Memcached 官网：<a href="https://memcached.org/">https://memcached.org/</a><br><strong>Memcached是一个自由开源的，高性能，分布式内存对象缓存系统。</strong><br>Memcached<strong>基于内存的key-value存储，用来存储小块的任意数据（字符串、对象）</strong>。这些数据可以是数据库调用、API调用或者是页面渲染的结果。简洁设计便于快速开发，减轻开发难度，解决了大数据量缓存的很多问题。它的API兼容大部分流行的开发语言。<strong>目的是，通过缓存数据库查询结果，减少数据库访问次数，以提高动态Web应用的速度、提高可扩展性。</strong></p><h3 id="缓存流程"><a href="#缓存流程" class="headerlink" title="缓存流程"></a>缓存流程</h3><ol><li>检查客户端请求的数据是否在 Memcach中，如果存在，直接将请求的数据返回，不在对数据进行任何操作。</li><li>如果请求的数据不在 Memcache 中，就去数据库查询，把从数据库中获取的数据返回给客户端，同时把数据缓存。</li><li>每次更新数据库的同时更新 Memcache中的数据库。确保数据信息一致性。</li><li>当分配给 Memcache 内存空间用完后，会使用 LRU(least Recently Used ，最近最少使用 ) 策略加到其失效策略，失效的数据首先被替换掉，然后在替换掉最近未使用的数据<h3 id="Memcached和Redis之间的区别"><a href="#Memcached和Redis之间的区别" class="headerlink" title="Memcached和Redis之间的区别"></a>Memcached和Redis之间的区别</h3></li><li>Redis不<strong>仅支持简单的k&#x2F;v类型的数据，同时还支持list、set、zset(sorted set)、hash等丰富数据结构的存储</strong>。</li><li>Redis最大的亮点是<strong>支持数据持久化</strong>，它在运行的时候可以将数据备份在磁盘中，断电或重启后，缓存数据可以再次加载到内存中，只要Redis配置的合理，基本上不会丢失数据。</li><li>Redis支持<strong>主从模式的应用</strong>。</li><li>Redis单个<strong>value的最大限制是1GB，而Memcached则只能保存1MB内的数据</strong>。</li><li>Memcache在并发场景下，能用cas保证一致性，而Redis<strong>事务支持比较弱</strong>，只能保证事务中的每个操作连续执行。</li><li>性能方面，Redis在读操作和写操作上是略领先Memcached的。</li><li>Memcached的内存管理不像Redis那么复杂，元数据metadata更小，相对来说<strong>额外开销就很少</strong>。Memcached<strong>唯一支持的数据类型是字符串string</strong>，非常适合缓存只读数据，因为字符串不需要额外的处理。<h3 id="slab存储机制"><a href="#slab存储机制" class="headerlink" title="slab存储机制"></a>slab存储机制</h3>参考：<a href="https://www.jianshu.com/p/2ec61d727c4d">https://www.jianshu.com/p/2ec61d727c4d</a><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3></li></ol><ul><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> yum install libevent libevent-devel -y <span class="comment"># 下载相关依赖软件包</span></span><br><span class="line">yum install memcached -y</span><br></pre></td></tr></table></figure></li><li>命令管理服务相关参数<br>-d是启动一个守护进程<br>-m是分配给Memcache使用的内存数量，单位是MB<br>-u是运行Memcache的用户<br>-l是监听的服务器IP地址，可以有多个地址<br>-p是设置Memcache监听的端口，最好是1024以上的端口<br>-c是最大运行的并发连接数，默认是1024<br>-P是设置保存Memcache的pid文件</li><li>启动memcached服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memcached -d -m 1024 -u memcached -l 127.0.0.1 -p 11211 -c 1024 -P /tmp/memcached.pid</span><br><span class="line">ps -ef|grep memcached | grep -v grep <span class="comment"># 查看memcached进程</span></span><br></pre></td></tr></table></figure></li><li>远程连接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install telnet -y</span><br><span class="line">telnet 127.0.0.1 11211</span><br></pre></td></tr></table></figure></li><li>关闭服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkill memcached || ss -tanl | grep 11211</span><br></pre></td></tr></table></figure><h3 id="memcached存储命令"><a href="#memcached存储命令" class="headerlink" title="memcached存储命令"></a>memcached存储命令</h3><h4 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> key flags exptime bytes [noreply]</span><br><span class="line">value</span><br><span class="line"><span class="comment"># set name 0 900 8</span></span><br></pre></td></tr></table></figure>key：键值 key-value 结构中的 key，用于查找缓存值。<br>flags：可以包括键值对的整型参数，客户机使用它存储关于键值对的额外信息 。<br>exptime：在缓存中保存键值对的时间长度（以秒为单位，0 表示永远）<br>bytes：在缓存中存储的字节数<br>noreply（可选）： 该参数告知服务器不需要返回数据<br>value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）<h4 id="add命令"><a href="#add命令" class="headerlink" title="add命令"></a>add命令</h4>用于将 value(数据值) 存储在不存在的 key(键) 中，如果 add 的 key 已经存在，则不会更新数据(过期的 key 会更新)，之前的值将仍然保持相同，并且将获得响应 <strong>NOT_STORED</strong>。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add key flags exptime bytes [noreply]</span><br><span class="line">value</span><br><span class="line"><span class="comment"># add name 0 900 8</span></span><br></pre></td></tr></table></figure><h4 id="replace命令"><a href="#replace命令" class="headerlink" title="replace命令"></a>replace命令</h4>用于替换已存在的 key(键) 的 value(数据值)。如果 key 不存在，则替换失败，并且您将获得响应 NOT_STORED。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">replace key flags exptime bytes [noreply]</span><br><span class="line">value</span><br><span class="line"><span class="comment"># replace name 0 900 8</span></span><br></pre></td></tr></table></figure><h4 id="append命令"><a href="#append命令" class="headerlink" title="append命令"></a>append命令</h4>用于向已存在 key(键) 的 value(数据值) 后面追加数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">append key flags exptime bytes [noreply]</span><br><span class="line">value</span><br><span class="line"><span class="comment"># append key1 0 900 5</span></span><br></pre></td></tr></table></figure><h4 id="prepend命令"><a href="#prepend命令" class="headerlink" title="prepend命令"></a>prepend命令</h4>用于向已存在 key(键) 的 value(数据值) 前面追加数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prepend key flags exptime bytes [noreply]</span><br><span class="line">value</span><br><span class="line"><span class="comment"># prepend key1 0 900 5</span></span><br></pre></td></tr></table></figure><h4 id="cas命令"><a href="#cas命令" class="headerlink" title="cas命令"></a>cas命令</h4>用于执行一个”检查并设置”的操作它仅在当前客户端最后一次取值后，该key 对应的值没有被其他客户端修改的情况下， 才能够将值写入。<br><strong>检查是通过cas_token参数进行的， 这个参数是Memcach指定给已经存在的元素的一个唯一的64位值。</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cas key flags exptime bytes unique_cas_token [noreply]</span><br><span class="line">value</span><br><span class="line"><span class="comment"># gets tp #获取令牌</span></span><br><span class="line"><span class="comment"># cas tp 0 900 5 1 #指定上对应的令牌为1</span></span><br></pre></td></tr></table></figure>key：键值 key-value 结构中的 key，用于查找缓存值。<br>flags：可以包括键值对的整型参数，客户机使用它存储关于键值对的额外信息 。<br>exptime：在缓存中保存键值对的时间长度（以秒为单位，0 表示永远）<br>bytes：在缓存中存储的字节数<br>unique_cas_token：通过 gets 命令获取的一个唯一的64位值。<br>noreply（可选）： 该参数告知服务器不需要返回数据<br>value：存储的值（始终位于第二行）（可直接理解为key-value结构中的value）<h3 id="memcached查找命令"><a href="#memcached查找命令" class="headerlink" title="memcached查找命令"></a>memcached查找命令</h3><h4 id="get命令"><a href="#get命令" class="headerlink" title="get命令"></a>get命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get key <span class="comment"># key：键值 key-value 结构中的 key，用于查找缓存值。</span></span><br><span class="line">get key1 key2 key</span><br></pre></td></tr></table></figure><h4 id="gets命令"><a href="#gets命令" class="headerlink" title="gets命令"></a>gets命令</h4>gets 命令获取带有 CAS 令牌存 的 value(数据值) ，如果 key 不存在，则返回空<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gets key</span><br><span class="line">gets key1 key2 key3</span><br></pre></td></tr></table></figure><h4 id="delete命令"><a href="#delete命令" class="headerlink" title="delete命令"></a>delete命令</h4>用于删除已存在的 key(键)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete key [noreply]</span><br></pre></td></tr></table></figure><h4 id="incr与decr命令"><a href="#incr与decr命令" class="headerlink" title="incr与decr命令"></a>incr与decr命令</h4>incr 与 decr 命令用于对已存在的 key(键) 的数字值进行自增或自减操作<br><strong>incr 与 decr 命令操作的数据必须是十进制的32位无符号整数</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">incr key increment_value <span class="comment"># increment_value 增加的数值</span></span><br><span class="line"><span class="comment"># incr age 1</span></span><br></pre></td></tr></table></figure><h3 id="memcached统计命令"><a href="#memcached统计命令" class="headerlink" title="memcached统计命令"></a>memcached统计命令</h3><h4 id="stat命令"><a href="#stat命令" class="headerlink" title="stat命令"></a>stat命令</h4>用于返回统计信息例如 PID(进程号)、版本号、连接数等。</li></ul><p>pid： memcache服务器进程ID<br>uptime：服务器已运行秒数<br>time：服务器当前Unix时间戳<br>version：memcache版本<br>pointer_size：操作系统指针大小<br>rusage_user：进程累计用户时间<br>rusage_system：进程累计系统时间<br>curr_connections：当前连接数量<br>total_connections：Memcached运行以来连接总数<br>connection_structures：Memcached分配的连接结构数量<br>cmd_get：get命令请求次数<br>cmd_set：set命令请求次数<br>cmd_flush：flush命令请求次数<br>get_hits：get命令命中次数<br>get_misses：get命令未命中次数<br>delete_misses：delete命令未命中次数<br>delete_hits：delete命令命中次数<br>incr_misses：incr命令未命中次数<br>incr_hits：incr命令命中次数<br>decr_misses：decr命令未命中次数<br>decr_hits：decr命令命中次数<br>cas_misses：cas命令未命中次数<br>cas_hits：cas命令命中次数<br>cas_badval：使用擦拭次数<br>auth_cmds：认证命令处理的次数<br>auth_errors：认证失败数目<br>bytes_read：读取总字节数<br>bytes_written：发送总字节数<br>limit_maxbytes：分配的内存总大小（字节）<br>accepting_conns：服务器是否达到过最大连接（0&#x2F;1）<br>listen_disabled_num：失效的监听数<br>threads：当前线程数<br>conn_yields：连接操作主动放弃数目<br>bytes：当前存储占用的字节数<br>curr_items：当前存储的数据总数<br>total_items：启动以来存储的数据总数<br>evictions：LRU释放的对象数目<br>reclaimed：已过期的数据条目来存储新数据的数目</p><h4 id="stats-items"><a href="#stats-items" class="headerlink" title="stats items"></a>stats items</h4><p>用于显示各个 slab 中 item 的数目和存储时长(最后一次访问距离现在的秒<br>数)</p><h4 id="stats-slab"><a href="#stats-slab" class="headerlink" title="stats slab"></a>stats slab</h4><p>用于显示各个slab的信息，包括chunk的大小、数目、使用情况</p><h4 id="stats-sizes"><a href="#stats-sizes" class="headerlink" title="stats sizes"></a>stats sizes</h4><p>用于显示所有item的大小和个数</p><h4 id="flush-all命令"><a href="#flush-all命令" class="headerlink" title="flush_all命令"></a>flush_all命令</h4><p>令用于清理缓存中的所有 key&#x3D;&gt;value(键&#x3D;&gt;值) ，该命令提供了一个可选参数 time，用于在制定的时间后执行清理缓存操作</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Memcached-分布式缓存系统&quot;&gt;&lt;a href=&quot;#Memcached-分布式缓存系统&quot; class=&quot;headerlink&quot; title=&quot;Memcached 分布式缓存系统&quot;&gt;&lt;/a&gt;Memcached 分布式缓存系统&lt;/h2&gt;&lt;p&gt;Memcached </summary>
      
    
    
    
    <category term="数据库" scheme="http://xczf.shop/cate%EF%BC%9Agories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://xczf.shop/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Openstack</title>
    <link href="http://xczf.shop/2023/07/15/OpenStack/"/>
    <id>http://xczf.shop/2023/07/15/OpenStack/</id>
    <published>2023-07-15T11:00:41.000Z</published>
    <updated>2023-12-14T13:12:45.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h1><p>文档 <a href="http://docs.openstack.or/">http://docs.openstack.or</a><br>社区 <a href="http://www.openstack.org,wiki.openstack.org/">www.openstack.org,wiki.openstack.org</a></p><h2 id="一-OpenStack简介"><a href="#一-OpenStack简介" class="headerlink" title="一.OpenStack简介"></a>一.OpenStack简介</h2><p>云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络访问， 进入可配置的计算资源共享池（资源包括网络，服务器，存储，应用软件，服务）OpenStack：是由 Rackspace 和 NASA 共同开发的云计算平台， 是一个开源的 IaaS（基础设施及服务）云计算平台，让任何人都可以自行建立和提供云端运算服务<br><strong>云计算所包含的几个层次服务</strong><br>•SaaS（ Software as a Service）： 把在线软件作为一种服务。<br>•Paas（ Platform as a Service）： 把平台作为一种服务。<br>•Iaas（ Infrastructure as a Service）：把硬件设备作为一种服务。</p><h3 id="构成组件"><a href="#构成组件" class="headerlink" title="构成组件"></a>构成组件</h3><p><img src="/image/openstack/1.jpg" alt="1"></p><hr><ul><li>OpenStack 共享服务组件<br>数据库服务（ Database Service ）：MairaDB 及 MongoDB<br>消息传输（Message Queues）：RabbitMQ<br>缓存（cache）： Memcached<br>时间（time sync）：NTP<br>存储（storge provider）：ceph、GFS、LVM、ISICI 等<br>高可用及负载均衡：pacemaker、HAproxy、keepalive、lvs </li><li>OpenStack 核心组件<br>身份服务（ Identity Service ）：Keystone<br>计算（ Compute ）： Nova<br>镜像服务（ Image Service ）： Glance<br>网络 &amp; 地址管理（ Network ）： Neutron<br>对象存储（ Object Storage ）： Swift<br>块存储 (Block Storage) ： Cinder<br>UI 界面 (Dashboard) ： Horizon<br>测量 (Metering) ： Ceilometer<br>部署编排 (Orchestration) ： Heat<h3 id="ntp-网络时间协议"><a href="#ntp-网络时间协议" class="headerlink" title="ntp 网络时间协议"></a>ntp 网络时间协议</h3>NTP（Network Time Protocol）是TCP&#x2F;IP协议族里面的一个应用层协议，用来使客户端和服务器之间进行时钟同步，提供高精准度的时间校正。NTP服务器从权威时钟源（例如原子钟、GPS）接收精确的协调世界时UTC，客户端再从服务器请求和接收时间。<br>NTP基于UDP报文进行传输，使用的<strong>UDP端口号为123</strong><br><strong>内网环境安装NTP服务，一般有2种方式：<br>1、如果没有现成的时间同步服务器。一台主机A做为NTP服务器，其它主机B只安装ntpdate服务，B主机们通过ntpdate命令同步主机A的时间。</strong><br>2、有现成的时间同步服务器。所有主机直接通过ntpdate命令，同步时间服务器的时间。</li><li>yum安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install ntp</span><br></pre></td></tr></table></figure></li><li>服务端配置 &#x2F;etc&#x2F;ntp.conf<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 然后添加这两行 ，意思是 允许IPV4 IPV6 查询 拒绝修改</span></span><br><span class="line">restrict -4 default kod notrap nomodify   </span><br><span class="line">restrict -6 default kod notrap nomodify </span><br><span class="line"><span class="comment">#  --------------- 其它配置方式 start ----------------- #</span></span><br><span class="line"><span class="comment"># 1.允许任何IP的客户机都可以进行时间同步</span></span><br><span class="line">restrict default nomodify</span><br><span class="line"><span class="comment"># 只允许192.168.11.*网段的客户机进行时间同步 </span></span><br><span class="line"><span class="comment"># 在restrict default nomodify notrap noquery（表示默认拒绝所有IP的时间同步）之后增加一行：</span></span><br><span class="line">restrict 192.168.11.0 mask 255.255.255.0 nomodify</span><br><span class="line"><span class="comment"># 只允许192.168.11.70机器修改本机时间</span></span><br><span class="line">restrict 192.168.11.70 nomodify notrap noquery</span><br><span class="line"><span class="comment"># 允许上层机器10.173.24.27 进行修改本机时间</span></span><br><span class="line">restrict 10.173.24.27 nomodify notrap noquery</span><br></pre></td></tr></table></figure></li><li>客户端配置 &#x2F;etc&#x2F;ntp.conf<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server 10.173.24.27  </span><br><span class="line">fudge 10.173.24.27 stratum 8 </span><br></pre></td></tr></table></figure></li><li>常用命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动,停止, 重启, 查询ntp服务状态</span></span><br><span class="line">service ntpd status    </span><br><span class="line">service ntpd start      </span><br><span class="line">service ntpd stop      </span><br><span class="line">service ntpd restart</span><br><span class="line"><span class="comment">#查看ntp服务器与上层ntp的状态</span></span><br><span class="line">ntpq -p     </span><br><span class="line"><span class="comment"># 命令查看时间同步状态</span></span><br><span class="line">ntpstat  </span><br></pre></td></tr></table></figure><h3 id="部署服务安装"><a href="#部署服务安装" class="headerlink" title="部署服务安装"></a>部署服务安装</h3><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4>控制节点：1个处理器，4 GB内存和5 GB存储<br>计算节点：1个处理器，2 GB内存和10 GB存储<br>在虚拟机中安装请调整内存、处理器和磁盘大小，以满足硬件最低要求，并勾选虚拟化<br>操作系统：CentOS 8.3<br><img src="/image/openstack/3.jpg" alt="设置"><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4></li><li>修改主机名<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 控制节点</span></span><br><span class="line">hostnamectl set-hostname controller</span><br><span class="line"><span class="built_in">exec</span> bash</span><br><span class="line"><span class="comment"># 计算节点</span></span><br><span class="line">hostnamectl set-hostname compute</span><br><span class="line"><span class="built_in">exec</span> bash</span><br></pre></td></tr></table></figure></li><li>更换网路服务<br><strong>安装部署OpenStack时，OpenStack的网络服务会与NetworkManager服务产生冲突</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Network服务</span></span><br><span class="line">dnf install network-scripts -y</span><br><span class="line"><span class="comment"># 停用NetworkManager并禁止开机自启</span></span><br><span class="line">systemctl stop NetworkManager &amp;&amp; systemctl <span class="built_in">disable</span> NetworkManager</span><br><span class="line"><span class="comment"># 启用 Network并设置开机自启</span></span><br><span class="line">systemctl start network &amp;&amp; systemctl <span class="built_in">enable</span> network</span><br><span class="line">systemctl stop firewalld &amp;&amp; systemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure></li><li>配置host解析<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;192.168.xxx.xxx\tcontroller\n192.168.xxx.xxx\tcompute&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">cat</span> /etc/hosts</span><br></pre></td></tr></table></figure></li><li>时间同步<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dnf install -y chrony vim</span><br><span class="line">vim /etc/chrony.conf</span><br><span class="line"><span class="comment"># 注意：在计算节点仅修改第一条，修改为server controller iburst，直接与控制节点同步</span></span><br><span class="line"><span class="comment"># Please consider joining the pool (http://www.pool.ntp.org/join.html).</span></span><br><span class="line">server ntp6.aliyun.com iburst</span><br><span class="line"><span class="comment"># Allow NTP client access from local network.</span></span><br><span class="line">allow 192.168.xxx.0/24</span><br><span class="line">systemctl restart chronyd &amp;&amp; systemctl <span class="built_in">enable</span> chronyd</span><br></pre></td></tr></table></figure></li><li>安装openstack<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dnf config-manager --<span class="built_in">enable</span> powertools</span><br><span class="line">dnf install centos-release-openstack-victoria -y</span><br><span class="line">dnf upgrade -y</span><br><span class="line">dnf install python3-openstackclient openstack-selinux -y</span><br></pre></td></tr></table></figure><h4 id="SQL数据库"><a href="#SQL数据库" class="headerlink" title="SQL数据库"></a>SQL数据库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dnf install mariadb mariadb-server python3-PyMySQL -y</span><br><span class="line"><span class="comment"># 创建一个 [mysqld] 部分，并将 bind-address 密钥设置为控制器节点的管理IP地址，以允许其他节点通过管理网络进行访问</span></span><br><span class="line">vim /etc/my.cnf.d/openstack.cnf</span><br><span class="line">*****************************</span><br><span class="line">[mysqld]</span><br><span class="line">bind-address = 192.168.xxx.xxx</span><br><span class="line">default-storage-engine = innodb</span><br><span class="line">innodb_file_per_table = on</span><br><span class="line">max_connections = 4096</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">character-set-server = utf8</span><br><span class="line">*****************************</span><br><span class="line">systemctl start mariadb &amp;&amp; systemctl <span class="built_in">enable</span> mariadb</span><br></pre></td></tr></table></figure><h2 id="二-Rabbitmq消息队列"><a href="#二-Rabbitmq消息队列" class="headerlink" title="二.Rabbitmq消息队列"></a>二.Rabbitmq消息队列</h2><h3 id="消息队列（-MQ-）"><a href="#消息队列（-MQ-）" class="headerlink" title="消息队列（ MQ ）"></a>消息队列（ MQ ）</h3>是一种应用程序对应用程序的通信方法。<strong>应用程序通过读写出入队列的消息来通信</strong>，而无需专用连接来链接它们。<br>消息传递指的是程序之间通过在消息中发送数据进行通信，而不是<strong>通过直接调用彼此来通信</strong>。排队指的是应用程序通过队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。<br>AMQP (Advanced Message Queuing Protocol)：高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。消息中间件主要用于组件之间的解耦，消息的发送者无需知道消息使用者的存在，反之亦然。<h3 id="耦合、解耦"><a href="#耦合、解耦" class="headerlink" title="耦合、解耦"></a>耦合、解耦</h3>耦合就是一个系统的各个部分之间彼此关联、互相影响的程度。当系统内部的各个部分之间耦合度较高时，它们的行为会更加<strong>紧密地相互关联，但也更加复杂、难以控制</strong>。相反，当各个部分之间的耦合度较低时，它们的行为会更加独立，但也会导致系统的整体性能较差。<br>解耦就是是<strong>减少耦合的过程，使得模块或组件之间的依赖尽可能小</strong>。这样可以使得代码更加模块化、灵活、易于维护和扩展。<h3 id="Rabbitmq-概念"><a href="#Rabbitmq-概念" class="headerlink" title="Rabbitmq 概念"></a>Rabbitmq 概念</h3>特点：使用 Erlang 编写，支持持久化，支持 HA，提供 C# , erlang，java，perl，python，ruby 等的 client 开<br>Broker：简单来说就是消息队列服务器实体。<br>Exchange：消息交换机，它指定消息按什么规则，路由到哪个队列。<br>Queue：消息队列载体，每个消息都会被投入到一个或多个队列。<br>Binding：绑定，它的作用就是把 exchange 和 queue 按照路由规则绑定起来。<br>Routing Key：路由关键字， exchange 根据这个关键字进行消息投<br>vhost：虚拟主机，一个 broker 里可以开设多个 vhost，用作不同用户的权限分离。<br>producer：消息生产者，就是投递消息的程序。<br>consumer：消息消费者，就是接受消息的程序。<br>channel：消息通道，在客户端的每个连接里，可建立多个 channel，每个channel 代表一个会话任务。<h3 id="RabbitMQ-工作过程"><a href="#RabbitMQ-工作过程" class="headerlink" title="RabbitMQ 工作过程"></a>RabbitMQ 工作过程</h3></li></ul><ol><li>客户端连接到消息队列服务器，打开一个 channel。</li><li>客户端声明一个 exchange，并设置相关属性。</li><li>客户端声明一个 queue，并设置相关属性。</li><li>客户端使用 routing key，在 exchange 和 queue 之间建立好绑定关系。</li><li>客户端投递消息到 exchange。</li><li>exchange 接收到消息后，就根据消息的 key 和已经设置的 binding，进行消息路由，将消息投递到一个或多个队列里<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3></li></ol><ul><li>准备：3 台 linux 系统，epel源，无密钥登入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure></li><li>安装rabbtimq和erlang软件包（所有node）port:5672<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y erlang</span><br><span class="line">yum install rabbitmq-server.noarch -y</span><br><span class="line">systemctl <span class="built_in">enable</span> rabbitmq-server.service &amp;&amp; systemctl start rabbitmq-server.service</span><br></pre></td></tr></table></figure></li><li>编辑 rabbittmq 变量文件：node1<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RABBITMQ_NODE_PORT=5672</span><br><span class="line"><span class="built_in">ulimit</span> -S -n 4096</span><br><span class="line">RABBITMQ_SERVER_ERL_ARGS=<span class="string">&quot;+K true +A30 +P 1048576 -kernel inet_default_connect_options</span></span><br><span class="line"><span class="string">[&#123;nodelay,true&#125;,&#123;raw,6,18,&lt;&lt;5000:64/native&gt;&gt;&#125;] -kernel inet_default_listen_options</span></span><br><span class="line"><span class="string">[&#123;raw,6,18,&lt;&lt;5000:64/native&gt;&gt;&#125;]&quot;</span> RABBITMQ_NODE_IP_ADDRESS=192.168.189.130</span><br></pre></td></tr></table></figure></li><li>将 rabbittmq 变量文件拷贝到其他两节点，之后并修改相应节点的ip<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/rabbitmq/rabbitmq-env.conf con2:/etc/rabbitmq/</span><br><span class="line">scp /etc/rabbitmq/rabbitmq-env.conf con3:/etc/rabbitmq</span><br></pre></td></tr></table></figure>查看 rabbitmq 插件 :&#x2F;usr&#x2F;lib&#x2F;rabbitmq&#x2F;bin&#x2F;rabbitmq-plugins list</li><li>开启web管理界面<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br><span class="line">systemctl restart rabbitmq-server.service</span><br><span class="line"><span class="comment"># 修改密码为admin</span></span><br><span class="line">rabbitmqctl change_password guest admin</span><br><span class="line"><span class="comment"># 添加一个openstack用户，并设置为admin，权限为管理员</span></span><br><span class="line">rabbitmqctl add_user openstack admin</span><br><span class="line">rabbitmqctl set_permissions openstack <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span> <span class="string">&quot;.*&quot;</span></span><br><span class="line">rabbitmqctl set_user_tags openstack administor</span><br></pre></td></tr></table></figure></li><li>发送 erlang.cookie 到其他节点配置集 node1 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rabbitmqctl status</span><br><span class="line">scp /var/lib/rabbitmq/.erlang.cookie con2:/var/lib/rabbitmq/.erlang.cookie</span><br><span class="line">scp /var/lib/rabbitmq/.erlang.cookie con3:/var/lib/rabbitmq/.erlang.cookie</span><br><span class="line"><span class="comment"># node2 和 node3 停止应用，并以 ram 的方式加入 node1 节点，之后重启</span></span><br><span class="line">systemctl restart rabbitmq-server.service</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl join_cluster --ram rabbit@con1</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure><strong>其他</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更改节点类型（内存型或磁盘型）</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl change_cluster_node_type disc 或 rabbitmqctl change_cluster_node_type ram</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line"><span class="comment"># 从集群移除节点（或者重置节点）</span></span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">rabbitmqctl cluster_status</span><br><span class="line"><span class="comment"># 从某个节点移除集群中其他节点</span></span><br><span class="line">rabbitmqctl forget_cluster_node rabbit@node3</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl start_app</span><br><span class="line">rabbitmqctl cluster_status</span><br></pre></td></tr></table></figure><h2 id="三-keystone身份认证服务"><a href="#三-keystone身份认证服务" class="headerlink" title="三.keystone身份认证服务"></a>三.keystone身份认证服务</h2>keystone是openstack的组件之一，用于为openstack家族中的其他组件成员提供统一的认证服务，包括身份验证、令牌的发放和校验、服务列表、用户权限的定义等等。云环境中所有的服务之间的授权和认证都需要经过keystone。<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3></li><li>user<br>使用服务的用户，可以是人、服务或者系统，只要是使用了openstack服务的对象都可以称为用户。当user对openstack进行访问时，keystone会对其身份进行验证。</li><li>project<br>租户，可以理解为一个人、项目或者组织拥有的资源的合集。在一个租户中可以拥有很多个用户，这些用户可以根据权限的划分使用租户中的资源。</li><li>role<br>角色，用于分配操作的权限，角色可以被指定给用户，使得该用户获得角色对应的操作权限。</li><li>service<br>openstack service，即openstack中运行的组件服务，如nova、glance等都是服务。服务决定每个role能做什么事情，服务通过各自的policy.json文件对role进行访问控制</li><li>endpoint<br>一个可以通过网络来访问和定位某个openstack service的地址，通常是一个URL，user通过endpoint访问资源和执行操作<br>三类endpoint<br>Admin URL：给admin用户使用，被从常规的访问中分离<br>Internal URL：openstack内部服务使用来跟别的服务通信，只能被局域网访问<br>public URL：其他用户可以访问的地址，可以被全局访问</li><li>credentials<br>用于确认用户身份的凭证<h3 id="认证原理"><a href="#认证原理" class="headerlink" title="认证原理"></a>认证原理</h3><img src="/image/openstack/4.jpg" alt="keystone"></li><li>Token认证原理<br>当用户拿着有效的用户名和密码去keystone认证后，keystone就会返回给他一个token，这个token就是一个uuid。以后用户进行其他操作时，都必须出示这个token，但是在大业务量的情况下，keystone将会成为性能瓶颈。</li><li>PKI认证原理<br>在keystone初始化时，keystone生成了CA的公钥CA.pem和私钥CA.key。同时，产生了自己的公钥keystone.pub和私钥keystone.key, 然后将keystone.pub进行了CA的签名，生成了keystone.pem。当用户拿着有效的用户名和密码去keystone认证后，keystone就将用户的基本信息通过keystone.key进行了加密，将这一密文作为token返回给用户。<h3 id="部署keystone-控制节点"><a href="#部署keystone-控制节点" class="headerlink" title="部署keystone (控制节点)"></a>部署keystone (控制节点)</h3><h4 id="创库授权"><a href="#创库授权" class="headerlink" title="创库授权"></a>创库授权</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE keystone;</span><br><span class="line">GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span><br><span class="line">GRANT ALL PRIVILEGES ON keystone.* TO &#x27;keystone&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;KEYSTONE_DBPASS&#x27;;</span><br><span class="line">flush privileges;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><h4 id="安装KeyStone"><a href="#安装KeyStone" class="headerlink" title="安装KeyStone"></a>安装KeyStone</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-keystone httpd python3-mod_wsgi -y</span><br><span class="line"><span class="comment"># 备份该文件，然后去掉注释信息</span></span><br><span class="line"><span class="built_in">cp</span> /etc/keystone/keystone.conf /etc/keystone/keystone.conf.bak</span><br><span class="line">grep -Ev <span class="string">&#x27;^$|^#&#x27;</span> /etc/keystone/keystone.conf.bak &gt;/etc/keystone/keystone.conf</span><br><span class="line">vim /etc/keystone/keystone.conf</span><br><span class="line">*******************************</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class="line">[token]</span><br><span class="line">provider = fernet</span><br><span class="line">********************</span><br></pre></td></tr></table></figure></li><li>配置工具:通过命令修改文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dnf install crudini -y</span><br><span class="line">crudini --<span class="built_in">set</span> /etc/keystone/keystone.conf database connection</span><br><span class="line">mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone</span><br><span class="line">crudini --<span class="built_in">set</span> /etc/keystone/keystone.conf token provider fernet</span><br></pre></td></tr></table></figure></li><li>初始化<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su -s /bin/sh -c <span class="string">&quot;keystone-manage db_sync&quot;</span> keystone</span><br><span class="line">mysql -uroot -p123456 -e <span class="string">&quot;use keystone;show tables;&quot;</span></span><br></pre></td></tr></table></figure></li><li>初始化Fernet<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure></li><li>引导身份认证服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage bootstrap --bootstrap-password ADMIN_PASS \</span><br><span class="line">--bootstrap-admin-url http://controller:5000/v3/ \</span><br><span class="line">--bootstrap-internal-url http://controller:5000/v3/ \</span><br><span class="line">--bootstrap-public-url http://controller:5000/v3/ \</span><br><span class="line">--bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><h4 id="配置Apache-HTTP服务"><a href="#配置Apache-HTTP服务" class="headerlink" title="配置Apache HTTP服务"></a>配置Apache HTTP服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br><span class="line">***********************</span><br><span class="line">ServerName controller</span><br><span class="line">***********************</span><br><span class="line"><span class="built_in">ln</span> -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br><span class="line">systemctl start httpd &amp;&amp; systemctl <span class="built_in">enable</span> httpd</span><br><span class="line"><span class="comment"># 创建环境变量脚本来配置管理员账号</span></span><br><span class="line">vim /admin-openrc.sh</span><br><span class="line">***********************</span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br><span class="line">***********************</span><br></pre></td></tr></table></figure><h4 id="创建域，项目，用户和角色"><a href="#创建域，项目，用户和角色" class="headerlink" title="创建域，项目，用户和角色"></a>创建域，项目，用户和角色</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建域，程序中已存在默认域，此命令只是一个创建域的例子，可以不执行</span></span><br><span class="line">openstack domain create --description <span class="string">&quot;An Example Domain&quot;</span> example</span><br><span class="line"><span class="comment"># 创建 service 项目，也叫做租户</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Service Project&quot;</span> service</span><br><span class="line"><span class="comment"># 创建 myproject 测试项目</span></span><br><span class="line">openstack project create --domain default --description <span class="string">&quot;Demo Project&quot;</span> myproject</span><br><span class="line"><span class="comment"># 创建 myuser 用户</span></span><br><span class="line"><span class="comment"># 执行命令后需要设置用户密码，输入两次相同的密码</span></span><br><span class="line">openstack user create --domain default --password-prompt myuser</span><br><span class="line"><span class="comment"># 创建 myrole 角色</span></span><br><span class="line">openstack role create myrole</span><br><span class="line"><span class="comment"># 将 myrole 角色添加到 myproject 项目和 myuser 用户</span></span><br><span class="line">openstack role add --project myproject --user myuser myrole</span><br><span class="line"><span class="comment"># 编辑环境变量脚本 vim /admin-openrc.sh ，修改脚本，把创建的项目用户信息添加到环境变量值</span></span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_USER_DOMAIN_NAME=Default</span><br><span class="line"><span class="built_in">export</span> OS_PROJECT_NAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_USERNAME=admin</span><br><span class="line"><span class="built_in">export</span> OS_PASSWORD=ADMIN_PASS</span><br><span class="line"><span class="built_in">export</span> OS_AUTH_URL=http://controller:5000/v3</span><br><span class="line"><span class="built_in">export</span> OS_IDENTITY_API_VERSION=3</span><br><span class="line"><span class="built_in">export</span> OS_IMAGE_API_VERSION=2</span><br><span class="line"><span class="comment"># 初始化脚本，建议添加开机自启</span></span><br><span class="line"><span class="comment"># echo &#x27;source /admin-openrc.sh&#x27; &gt; .bashrc</span></span><br><span class="line"><span class="built_in">source</span> /admin-openrc.sh</span><br><span class="line"><span class="comment"># 验证KeyStone服务是否正常</span></span><br><span class="line">openstack token issue</span><br></pre></td></tr></table></figure><h2 id="四-Glance镜像服务"><a href="#四-Glance镜像服务" class="headerlink" title="四.Glance镜像服务"></a>四.Glance镜像服务</h2>Image Service的项目代号是Glance，它是Openstack的镜像服务组件。<br><strong>glance是openstack镜像服务，用来注册、登陆、和检索虚拟机镜像</strong><br>Glance服务提供了一个REST API，使你能够查询虚拟机镜像元数据和检索的实际镜像<br>通过镜像服务提供的虚拟机镜像可以存储在不同的位置<br>提供了对虚拟机部署的时候所能提供的镜像的管理，包括镜像的导入，格式以及制作相应的模板<br><img src="/image/openstack/5.jpg" alt="工作流程"><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3></li><li>alnce-api<br>接收镜像api的调用，注入镜像发现、恢复和存储</li><li>glance-registry<br>存储、处理和恢复镜像的元数据，元数据包括注入大小和类型。通过响应从 glance-api 发送过来的Image Metadata REST Request ，然后与MySQL进行交互，实现 Image Metadate 的存储、处理、获取</li><li>数据库<br>存放镜像元数据，用户是可以根据个人喜好选择数据库的，多数的部署使用MySQL</li><li>镜像文件的存储仓库<br>支持多种类型的仓库，他们有普通的文件系统、对象存储、RADOS块设备等。其中一些仓库仅支持只读</li><li>元数据定义服务<br>通用的API，是用于为厂商，管理员，服务，以及用户自定义元数据。这种元数据可用于不同的资源，例如镜像，工件，卷，配额以及集合。一个定义包括了新属性的建，描述，约束以及可以与之关联的资源的类型<h3 id="部署-控制节点"><a href="#部署-控制节点" class="headerlink" title="部署 (控制节点)"></a>部署 (控制节点)</h3></li><li>创库授权<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE glance; <span class="comment"># 创建数据库</span></span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON glance.* TO <span class="string">&#x27;glance&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;GLANCE_DBPASS&#x27;</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure></li><li>创建glance用户并关联角色 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得 admin 凭证来获取只有管理员能执行的命令的访问权限</span></span><br><span class="line"><span class="built_in">source</span> admin-openrc</span><br><span class="line"><span class="comment"># 建glance用户并设置密码为GLANCE_PASS，此处与上面创建用户的不同之处是未使用交互式的方式，直接将密码放入了命令中</span></span><br><span class="line">openstack user create --domain default --password GLANCE_PASS glance</span><br><span class="line"><span class="comment"># 添加 admin 角色到 glance 用户和 service 项目上,在service的项目上给glance用户关联admin角色</span></span><br><span class="line">openstack role add --project service --user glance admin</span><br></pre></td></tr></table></figure></li><li>创建glance服务的API端点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name glance --description <span class="string">&quot;OpenStack Image&quot;</span> image</span><br><span class="line">openstack endpoint create --region RegionOne image public</span><br><span class="line">http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image internal</span><br><span class="line">http://controller:9292</span><br><span class="line">openstack endpoint create --region RegionOne image admin</span><br><span class="line">http://controller:9292</span><br></pre></td></tr></table></figure></li><li>安装并配置glance<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-glance -y</span><br><span class="line"><span class="comment"># 消除注释后编辑修改</span></span><br><span class="line">vim /etc/glance/glance-api.conf</span><br><span class="line">*******************************</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = GLANCE_PASS</span><br><span class="line">[paste_deploy]</span><br><span class="line">flavor = keystone</span><br><span class="line">[glance_store]</span><br><span class="line">stores = file,http</span><br><span class="line">default_store = file</span><br><span class="line">filesystem_store_datadir = /var/lib/glance/images/</span><br><span class="line"><span class="comment"># 同步数据库</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;glance-manage db_sync&quot;</span> glance</span><br><span class="line"><span class="comment"># 启动glance服务并设置开机自启</span></span><br><span class="line">systemctl start openstack-glance-api &amp;&amp; systemctl <span class="built_in">enable</span> openstack-glance-api</span><br></pre></td></tr></table></figure></li><li>TEST<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.cirros-cloud.net/0.5.1/cirros-0.5.1-x86_64-disk.img</span><br><span class="line"><span class="comment"># 将当前目录下的cirros-0.5.1-x86_64-disk.img镜像命名为“cirros”，镜像格式是qcow2，容器格式是bare，设为公有镜像</span></span><br><span class="line">openstack image create <span class="string">&quot;cirros&quot;</span> --file cirros-0.5.1-x86_64-disk.img --disk-</span><br><span class="line">format qcow2 --container-format bare --public</span><br><span class="line">openstack image list <span class="comment"># 查看是否有镜像</span></span><br></pre></td></tr></table></figure><h2 id="五-Nova计算资源服务"><a href="#五-Nova计算资源服务" class="headerlink" title="五.Nova计算资源服务"></a>五.Nova计算资源服务</h2>负责虚拟机生命周期管理，其他计算资源生命周期管理<br>Glance为vm提供image<br>Cinder和Swift分别为VM提供块存储和对象存储<br>Neutron为VM提供网络连接<h3 id="Nova组件"><a href="#Nova组件" class="headerlink" title="Nova组件"></a>Nova组件</h3><h4 id="nova-api"><a href="#nova-api" class="headerlink" title="nova-api"></a>nova-api</h4>对外提供rest接口，接收和处理请求<br>对传入参数进行合法性校验和约束限制<br>对请求的资源进行配额的校验和预留<br>资源的创建，更新，删除查询等<h4 id="nova-conductor"><a href="#nova-conductor" class="headerlink" title="nova-conductor"></a>nova-conductor</h4>数据库操作，解耦其他组件对数据库的访问<br>nova复杂流程控制，如创建，冷迁移，热迁移，虚拟机规格调整，虚拟机重建<br>其他组件的依赖，如nova-compute需要nova-conducter启动成功后才能启动<br>其他组件的心跳定时写入<h4 id="nova-scheduler"><a href="#nova-scheduler" class="headerlink" title="nova-scheduler"></a>nova-scheduler</h4>筛选和确定将虚拟机实例分配到哪一台物理机<br>分配过程主要分为两部，过滤和权重<br>通过过滤器选择满足条件的计算结点<br>通过权重选择最优的结点<h4 id="nova-compute"><a href="#nova-compute" class="headerlink" title="nova-compute"></a>nova-compute</h4>虚拟机各生命周期操作的真正执行者<br>底层对接不同虚拟化的平台（KVM&#x2F;VMware&#x2F;XEN等）<br>内置周期性任务，完成资源刷新，虚拟机状态同步等功能<br>资源管理模块配置插件机制，完成资源的统计<h4 id="database"><a href="#database" class="headerlink" title="database"></a>database</h4>nova会有一些数据需要存放到数据库中，一般通常使用的是MySQL数据库安装在控制结点上<br>nova使用命名为nova的数据库<h4 id="Message-Queue"><a href="#Message-Queue" class="headerlink" title="Message Queue"></a>Message Queue</h4>nova包含众多的子服务，这些子服务之间需要相互协调相互通信<br>为解耦各个子服务之间，nova通过Message Queue作为子服务的消息中转站，他们都通过消息队列进行联系<br>通常使用rabbitmq消息队列<h4 id="组件协同工作"><a href="#组件协同工作" class="headerlink" title="组件协同工作"></a>组件协同工作</h4><img src="/image/openstack/6.jpg" alt="子服务协同工作"></li></ul><ol><li>客户向API发送请求（创建VM）</li><li>API对请求做一些必要处理后，想消息队列发送消息</li><li>scheduler从消息队列中获取到消息，然后执行调度算法，从若干个计算节点中选出节点A</li><li>计算节点A的compute从消息队列中获取到scheduler发送给他的消息，然后在本节点上的hypervisor上启动虚拟机</li><li>在虚拟机的创建过程中，compute如果需要查询或者更新数据库信息，会通过消息队列向conductor发送消息，conductor负责数据库访问<h3 id="部署Placement服务（控制节点）"><a href="#部署Placement服务（控制节点）" class="headerlink" title="部署Placement服务（控制节点）"></a>部署Placement服务（控制节点）</h3>Placement服务的作用是跟踪资源（如计算节点，存储资源池，网络资源池等）的使用情况，提供自定义资源的能力，为分配资源提供服务。<strong>Placement在openstack的Stein版本之前是属于Nova组件的一部分</strong></li></ol><ul><li>创库授权<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE placement;</span><br><span class="line"><span class="comment"># 授予Plancement数据库权限</span></span><br><span class="line">GRANT ALL PRIVILEGES ON placement.* TO <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON placement.* TO <span class="string">&#x27;placement&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;PLACEMENT_DBPASS&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure></li><li>配置用户和Endpoint<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /admin-openrc.sh</span><br><span class="line"><span class="comment"># 创建一个plancement用户并设置密码为PLACEMENT_PASS</span></span><br><span class="line">openstack user create --domain default --password PLACEMENT_PASS placement</span><br><span class="line"><span class="comment"># admin角色将Placement用户添加到服务项目中</span></span><br><span class="line">openstack role add --project service --user placement admin</span><br></pre></td></tr></table></figure></li><li>创建Placement服务并注册API<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name placement --description <span class="string">&quot;Placement API&quot;</span> placement</span><br><span class="line">openstack endpoint create --region RegionOne placement public</span><br><span class="line">http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement internal</span><br><span class="line">http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement admin</span><br><span class="line">http://controller:8778</span><br></pre></td></tr></table></figure></li><li>安装并配置Plancement<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-placement-api -y</span><br><span class="line"><span class="comment"># 修改文件内容 /etc/placement/placement.conf</span></span><br><span class="line">[placement_database]</span><br><span class="line">connection = mysql+pymysql://placement:PLACEMENT_DBPASS@controller/placement</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br><span class="line"><span class="comment"># 同步数据库</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;placement-manage db sync&quot;</span> placement</span><br><span class="line"><span class="comment"># 检查Placement服务状态</span></span><br><span class="line">systemctl restart httpd &amp;&amp; placement-status upgrade check</span><br></pre></td></tr></table></figure><h3 id="Nova安装-控制节点和计算节点"><a href="#Nova安装-控制节点和计算节点" class="headerlink" title="Nova安装 控制节点和计算节点"></a>Nova安装 控制节点和计算节点</h3><h4 id="控制节点"><a href="#控制节点" class="headerlink" title="控制节点"></a>控制节点</h4></li><li>创库授权<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE nova_api;</span><br><span class="line">CREATE DATABASE nova;</span><br><span class="line">CREATE DATABASE nova_cell0;</span><br><span class="line"><span class="comment"># 授权nova_api数据库</span></span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_api.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="comment"># 授权nova数据库</span></span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line"><span class="comment"># 授权nova_cell0数据库</span></span><br><span class="line">GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON nova_cell0.* TO <span class="string">&#x27;nova&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NOVA_DBPASS&#x27;</span>;</span><br><span class="line">flush privileges;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure></li><li>配置用户和Endpoint<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /admin-openrc.sh</span><br><span class="line"><span class="comment"># 创建nova用户并设置密码为NOVA_PASS</span></span><br><span class="line">openstack user create --domain default --password NOVA_PASS nova</span><br><span class="line"><span class="comment"># 使用admin角色将nova用户添加到服务项目中</span></span><br><span class="line">openstack role add --project service --user nova admin</span><br></pre></td></tr></table></figure></li><li>创建Nova服务并注册API<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name nova --description <span class="string">&quot;OpenStack Compute&quot;</span> compute</span><br><span class="line">openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1</span><br><span class="line">openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1</span><br></pre></td></tr></table></figure></li><li>安装并配置Nova<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-nova-api openstack-nova-conductor openstack-nova-novncproxy openstack-nova-scheduler -y</span><br><span class="line"><span class="comment"># 编辑 vim /etc/nova/nova.conf 文件</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller:5672/</span><br><span class="line">my_ip = 192.168.175.201</span><br><span class="line">[api_database]</span><br><span class="line">connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000/</span><br><span class="line">auth_url = http://controller:5000/</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[vnc]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">server_listen = <span class="variable">$my_ip</span></span><br><span class="line">server_proxyclient_address = <span class="variable">$my_ip</span></span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line">[placement]</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br></pre></td></tr></table></figure></li><li>同步数据库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同步nova_api数据库</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage api_db sync&quot;</span> nova</span><br><span class="line"><span class="comment"># 同步nova_cell0数据库</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 map_cell0&quot;</span> nova</span><br><span class="line"><span class="comment"># 创建cell1</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot;</span> nova</span><br><span class="line"><span class="comment"># 同步nova数据库</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage db sync&quot;</span> nova</span><br></pre></td></tr></table></figure></li><li>开机自启<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start openstack-nova-api openstack-nova-scheduler openstack-nova-</span><br><span class="line">conductor openstack-nova-novncproxy &amp;&amp; systemctl <span class="built_in">enable</span> openstack-nova-api openstack-nova-scheduler openstack-nova-conductor openstack-nova-novncproxy</span><br></pre></td></tr></table></figure><h4 id="计算节点"><a href="#计算节点" class="headerlink" title="计算节点"></a>计算节点</h4></li><li>安装并配置Nova<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-nova-compute -y</span><br><span class="line"><span class="comment"># 编辑 vim /etc/nova/nova.conf 文件</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">my_ip = 192.166.66.11</span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000/</span><br><span class="line">auth_url = http://controller:5000/</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = Default</span><br><span class="line">user_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[vnc]</span><br><span class="line">enabled = <span class="literal">true</span></span><br><span class="line">server_listen = 0.0.0.0</span><br><span class="line">novncproxy_base_url = http://controller:6080/vnc_auto.html</span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line">[placement]</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">username = placement</span><br><span class="line">password = PLACEMENT_PASS</span><br></pre></td></tr></table></figure></li><li>确认计算节点是否支持硬件加速，如果是0，说明不支持，需要开启CPU虚拟化支持<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">egrep -c <span class="string">&#x27;(vmx|svm)&#x27;</span> /proc/cpuinfo</span><br></pre></td></tr></table></figure></li><li>开机自启<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start libvirtd openstack-nova-compute &amp;&amp; systemctl <span class="built_in">enable</span> libvirtd openstack-nova-compute</span><br></pre></td></tr></table></figure><h4 id="计算节点安装配置完成后再回到控制节点操作"><a href="#计算节点安装配置完成后再回到控制节点操作" class="headerlink" title="计算节点安装配置完成后再回到控制节点操作"></a>计算节点安装配置完成后再回到控制节点操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 加载环境变量脚本 </span></span><br><span class="line"><span class="built_in">source</span> /admin-openrc.sh</span><br><span class="line">openstack compute service list --service nova-compute</span><br><span class="line"><span class="comment"># 同步计算节点</span></span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;nova-manage cell_v2 discover_hosts --verbose&quot;</span> nova</span><br><span class="line"><span class="comment"># 设置发现间隔时间，编辑 vim /etc/nova/nova.conf 文件</span></span><br><span class="line">[scheduler]</span><br><span class="line">discover_hosts_in_cells_interval = 300</span><br><span class="line"><span class="comment"># 命令修改方式</span></span><br><span class="line">crudini --<span class="built_in">set</span> /etc/nova/nova.conf scheduler discover_hosts_in_cells_interval 300</span><br></pre></td></tr></table></figure><h2 id="六-Neutron-虚拟网络服务"><a href="#六-Neutron-虚拟网络服务" class="headerlink" title="六.Neutron 虚拟网络服务"></a>六.Neutron 虚拟网络服务</h2>Neutron是OpenStack云计算平台的核心组件之一，负责虚拟网络设备的创建和管理。这些虚拟的网络设备包括网桥、网络、端口。<h3 id="控制节点-1"><a href="#控制节点-1" class="headerlink" title="控制节点"></a>控制节点</h3></li><li>创库授权<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">CREATE DATABASE neutron;</span><br><span class="line"><span class="comment"># 授予数据库权限，然后退出</span></span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO <span class="string">&#x27;neutron&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED BY</span><br><span class="line"><span class="string">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br><span class="line">GRANT ALL PRIVILEGES ON neutron.* TO <span class="string">&#x27;neutron&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;NEUTRON_DBPASS&#x27;</span>;</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure></li><li>配置用户和Endpoint<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /admin-openrc.sh</span><br><span class="line">openstack user create --domain default --password NEUTRON_PASS neutron</span><br><span class="line"><span class="comment"># 在service的项目上给neutron用户关联admin角色</span></span><br><span class="line">openstack role add --project service --user neutron admin</span><br></pre></td></tr></table></figure></li><li>创建Neutron服务并注册API<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name neutron --description <span class="string">&quot;OpenStack Networking&quot;</span> network</span><br><span class="line"><span class="comment"># 创建Neutron服务API端口</span></span><br><span class="line">openstack endpoint create --region RegionOne network public http://controller:9696</span><br><span class="line">openstack endpoint create --region RegionOne network internal http://controller:9696</span><br><span class="line">openstack endpoint create --region RegionOne network admin http://controller:9696</span><br></pre></td></tr></table></figure></li><li>安装并配置Neutron<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables -y</span><br></pre></td></tr></table></figure><strong>公有网络和私有网络配置根据自身网络情况任意选择一种</strong></li><li>控制节点公有网络<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 vim /etc/neutron/neutron.conf</span></span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron</span><br><span class="line">[DEFAULT]</span><br><span class="line">core_plugin = ml2</span><br><span class="line">service_plugins =</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">notify_nova_on_port_status_changes = <span class="literal">true</span></span><br><span class="line">notify_nova_on_port_data_changes = <span class="literal">true</span></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">[nova]</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/plugins/ml2/ml2_conf.ini</span></span><br><span class="line">[ml2]</span><br><span class="line">type_drivers = flat,vlan</span><br><span class="line">tenant_network_types =</span><br><span class="line">mechanism_drivers = linuxbridge</span><br><span class="line">extension_drivers = port_security</span><br><span class="line">[ml2_type_flat]</span><br><span class="line">flat_networks = provider</span><br><span class="line">[securitygroup]</span><br><span class="line">enable_ipset = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span></span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = provider:ens33</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = <span class="literal">false</span></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = <span class="literal">true</span></span><br><span class="line">firewall_driver =</span><br><span class="line">neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line">***************************************</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables</span><br><span class="line">sysctl net.bridge.bridge-nf-call-ip6tables</span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/dhcp_agent.ini</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br><span class="line">dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">enable_isolated_metadata = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/metadata_agent.ini 文件</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">nova_metadata_host = controller</span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br><span class="line"><span class="comment"># 编辑 vim /etc/nova/nova.conf</span></span><br><span class="line">[neutron]</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">service_metadata_proxy = <span class="literal">true</span></span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br></pre></td></tr></table></figure></li><li>控制节点私有网络<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 vim /etc/neutron/neutron.conf</span></span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller/neutron</span><br><span class="line">[DEFAULT]</span><br><span class="line">core_plugin = ml2</span><br><span class="line">service_plugins = router</span><br><span class="line">allow_overlapping_ips = <span class="literal">true</span></span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">notify_nova_on_port_status_changes = <span class="literal">true</span></span><br><span class="line">notify_nova_on_port_data_changes = <span class="literal">true</span></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">[nova]</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = NOVA_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/plugins/ml2/ml2_conf.ini</span></span><br><span class="line">[ml2]</span><br><span class="line">type_drivers = flat,vlan,vxlan</span><br><span class="line">tenant_network_types = vxlan</span><br><span class="line">mechanism_drivers = linuxbridge,l2population</span><br><span class="line">extension_drivers = port_security</span><br><span class="line">[ml2_type_flat]</span><br><span class="line">flat_networks = provider</span><br><span class="line">[ml2_type_vxlan]</span><br><span class="line">vni_ranges = 1:1000</span><br><span class="line">[securitygroup]</span><br><span class="line">enable_ipset = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span></span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = provider:ens33</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = <span class="literal">true</span></span><br><span class="line">local_ip = 192.168.175.201</span><br><span class="line">l2_population = <span class="literal">true</span></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = <span class="literal">true</span></span><br><span class="line">firewall_driver =</span><br><span class="line">neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line">******************************************</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables</span><br><span class="line">sysctl net.bridge.bridge-nf-call-ip6tables</span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/l3_agent.ini</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/dhcp_agent.ini</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br><span class="line">dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">enable_isolated_metadata = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/metadata_agent.ini</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">nova_metadata_host = controller</span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br><span class="line">memcache_servers = controller:11211</span><br><span class="line"><span class="comment"># 编辑 vim /etc/nova/nova.conf</span></span><br><span class="line">[neutron]</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">service_metadata_proxy = <span class="literal">true</span></span><br><span class="line">metadata_proxy_shared_secret = METADATA_SECRET</span><br></pre></td></tr></table></figure></li><li>控制节点安装确认<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 vim /etc/neutron/neutron.conf</span></span><br><span class="line">[privsep]</span><br><span class="line">user = neutron</span><br><span class="line">helper_command = sudo privsep-helper</span><br><span class="line"><span class="comment"># 修改 vim /etc/sudoers.d/neutron</span></span><br><span class="line">neutron ALL = (root) NOPASSWD: ALL</span><br><span class="line">**********************************</span><br><span class="line"><span class="built_in">ln</span> -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br><span class="line">su -s /bin/sh -c <span class="string">&quot;neutron-db-manage --config-file /etc/neutron/neutron.conf -</span></span><br><span class="line"><span class="string">-config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot;</span> neutron</span><br><span class="line">systemctl restart openstack-nova-api</span><br><span class="line">systemctl restart neutron-server neutron-linuxbridge-agent neutron-dhcp-agent</span><br><span class="line">neutron-metadata-agent &amp;&amp;</span><br><span class="line">systemctl <span class="built_in">enable</span> neutron-server neutron-linuxbridge-agent neutron-dhcp-agent</span><br><span class="line">neutron-metadata-agent</span><br><span class="line"><span class="comment"># 对于私有网络，还应该启动L3服务并设为开机自启</span></span><br><span class="line">systemctl restart neutron-l3-agent &amp;&amp; systemctl <span class="built_in">enable</span> neutron-l3-agent</span><br></pre></td></tr></table></figure></li><li>计算节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-neutron-linuxbridge ebtables ipset -y</span><br><span class="line"><span class="comment"># 编辑 vim /etc/neutron/neutron.conf</span></span><br><span class="line">[DEFAULT]</span><br><span class="line">transport_url = rabbit://openstack:RABBIT_PASS@controller</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">[keystone_authtoken]</span><br><span class="line">www_authenticate_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br></pre></td></tr></table></figure></li><li>计算节点公有网络<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span></span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = provider:ens33</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = <span class="literal">false</span></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = <span class="literal">true</span></span><br><span class="line">firewall_driver =</span><br><span class="line">neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line">******************************************</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables</span><br><span class="line">sysctl net.bridge.bridge-nf-call-ip6tables</span><br></pre></td></tr></table></figure></li><li>计算节点私有网络<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini</span></span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = provider:ens33</span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = <span class="literal">true</span></span><br><span class="line">local_ip = 192.168.175.202</span><br><span class="line">l2_population = <span class="literal">true</span></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = <span class="literal">true</span></span><br><span class="line">firewall_driver =</span><br><span class="line">neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line">******************************************</span><br><span class="line">modprobe br_netfilter</span><br><span class="line">sysctl net.bridge.bridge-nf-call-iptables</span><br><span class="line">sysctl net.bridge.bridge-nf-call-ip6tables</span><br></pre></td></tr></table></figure></li><li>为Nova配置网络服务<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 vim /etc/nova/nova.conf</span></span><br><span class="line">[neutron]</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = NEUTRON_PASS</span><br></pre></td></tr></table></figure></li><li>计算节点安装确认<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 vim /etc/neutron/neutron.conf</span></span><br><span class="line">[privsep]</span><br><span class="line">user = neutron</span><br><span class="line">helper_command = sudo privsep-helper</span><br><span class="line"><span class="comment"># 修改 vim /etc/sudoers.d/neutron</span></span><br><span class="line">neutron ALL = (root) NOPASSWD: ALL</span><br><span class="line">setenforce 0</span><br><span class="line">systemctl restart openstack-nova-compute</span><br><span class="line">systemctl start neutron-linuxbridge-agent &amp;&amp; systemctl <span class="built_in">enable</span> neutron-linuxbridge-agent</span><br></pre></td></tr></table></figure><h2 id="七-Horizon"><a href="#七-Horizon" class="headerlink" title="七.Horizon"></a>七.Horizon</h2>Horizon使用的是Django应用程序为用户和管理员提供一个管理OpenStack服务的接口。</li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install openstack-dashboard -y</span><br></pre></td></tr></table></figure></li><li>配置Horizon文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编辑 vim /etc/openstack-dashboard/local_settings</span></span><br><span class="line"><span class="comment"># 配置仪表盘在controller节点上使用openstack服务</span></span><br><span class="line">OPENSTACK_HOST = <span class="string">&quot;controller&quot;</span></span><br><span class="line"><span class="comment"># 配置运行访问仪表盘的主机，星号表示运行所有主机访问</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"><span class="comment"># 配置memcached会话存储服务</span></span><br><span class="line">SESSION_ENGINE = <span class="string">&#x27;django.contrib.sessions.backends.cache&#x27;</span></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;LOCATION&#x27;</span>: <span class="string">&#x27;controller:11211&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 启用身份API版本3</span></span><br><span class="line">OPENSTACK_KEYSTONE_URL = <span class="string">&quot;http://%s:5000/v3&quot;</span> % OPENSTACK_HOST</span><br><span class="line">TIME_ZONE = <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"><span class="comment"># 上面几项修改即可，以下为新增信息</span></span><br><span class="line"><span class="comment"># 启用对域的支持</span></span><br><span class="line">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True</span><br><span class="line"><span class="comment"># 配置API版本</span></span><br><span class="line">OPENSTACK_API_VERSIONS = &#123;</span><br><span class="line">    <span class="string">&quot;identity&quot;</span>: 3,</span><br><span class="line">    <span class="string">&quot;image&quot;</span>: 2,</span><br><span class="line">    <span class="string">&quot;volume&quot;</span>: 3,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 配置默认域</span></span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = <span class="string">&quot;Default&quot;</span></span><br><span class="line"><span class="comment"># 配置默认角色</span></span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_ROLE = <span class="string">&quot;user&quot;</span></span><br><span class="line"><span class="comment"># 启用对第3层网络服务的支持，若是公有网络则需要禁用对第3层网络服务的支持，将True改为FalseOPENSTACK_NEUTRON_NETWORK = &#123;</span></span><br><span class="line">    <span class="string">&#x27;enable_router&#x27;</span>: True,</span><br><span class="line">    <span class="string">&#x27;enable_quotas&#x27;</span>: True,</span><br><span class="line">    <span class="string">&#x27;enable_distributed_router&#x27;</span>: True,</span><br><span class="line">    <span class="string">&#x27;enable_ha_router&#x27;</span>: True,</span><br><span class="line">    <span class="string">&#x27;enable_lb&#x27;</span>: True,</span><br><span class="line">    <span class="string">&#x27;enable_firewall&#x27;</span>: True,</span><br><span class="line">    <span class="string">&#x27;enable_vpn&#x27;</span>: True,</span><br><span class="line">    <span class="string">&#x27;enable_fip_topology_check&#x27;</span>: True,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编辑 vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;openstack-dashboard.conf 文件，添加以下内容<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WSGIApplicationGroup %&#123;GLOBAL&#125;</span><br></pre></td></tr></table></figure></li><li>重建apache的dashboard配置文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/openstack-dashboard</span><br><span class="line">python3 manage.py make_web_conf --apache &gt; /etc/httpd/conf.d/openstack-</span><br><span class="line">dashboard.conf</span><br></pre></td></tr></table></figure></li><li>建立策略文件（policy.json）的软链接<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /etc/openstack-dashboard /usr/share/openstack-</span><br><span class="line">dashboard/openstack_dashboard/conf</span><br><span class="line">systemctl restart httpd &amp;&amp; systemctl <span class="built_in">enable</span> httpd</span><br><span class="line">systemctl restart memcached</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;OpenStack&quot;&gt;&lt;a href=&quot;#OpenStack&quot; class=&quot;headerlink&quot; title=&quot;OpenStack&quot;&gt;&lt;/a&gt;OpenStack&lt;/h1&gt;&lt;p&gt;文档 &lt;a href=&quot;http://docs.openstack.or/&quot;&gt;htt</summary>
      
    
    
    
    <category term="Linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/Linux/"/>
    
    
    <category term="Linux" scheme="http://xczf.shop/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>分布式存储</title>
    <link href="http://xczf.shop/2022/11/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/"/>
    <id>http://xczf.shop/2022/11/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%AD%98%E5%82%A8/</id>
    <published>2022-11-01T11:00:41.000Z</published>
    <updated>2023-12-07T13:14:30.629Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h2><p>分布式存储系统，是将数据分散存储在多台独立的设备上。传统的网络存储系统采用集中的存储服务器存放的所有数据，存储服务器成为系统性能的瓶颈，也是可靠性和安全性的焦点，不能满足大规模存储应用的需要。分布式网络存储系统采用可扩展的系统结构，利用多台存储服务器分担存储负荷，利用定位服务器定位存储信息，它不但提高了系统的可靠性、可用性和存取效率，还易于扩展。</p><h3 id="分布式存储系统的特性"><a href="#分布式存储系统的特性" class="headerlink" title="分布式存储系统的特性"></a>分布式存储系统的特性</h3><ul><li>可扩展<br>分布式系统可以扩展到几百台到几千台的集群规模，而且，随着集群规模的增长，系统整体性能表现为线性增长。</li><li>水平扩展有以下几个特性：<br>节点扩展后，旧数据会自动迁移到新节点，实现负载均衡，避免单点过热的情况出现<br>水平扩展只需要将新节点和原有集群连接到同一网络，整个过程不会对业务造成影响<br>当节点被添加到集群，集群系统的整体容量和性能也随之线性扩展，此后新节点的资源就会被管理平台接管，被用于分配或者回收</li><li>低成本<br>分布式存储系统的自动容错、自动负载均衡机制使其可以构建在普通PC机之上。另外，线性扩展能力也使得增加、减少机器非常方便，可以使用较低的成本实现自动运维</li><li>高性能<br>无论是整个集群还是单机服务，都要求分布式系统具备高性能。</li><li>易用<br>分布式存储系统需要提供易用的对外接口，另外也要求具备完善的监控、运维工具，并能够方便地与其它系统集成。如 Hadoop云计算系统导入数据。<h3 id="存储服务分类"><a href="#存储服务分类" class="headerlink" title="存储服务分类"></a>存储服务分类</h3><img src="/image/openstack/2.jpg" alt="2"></li></ul><hr><p>三种存储方式：DAS、SAN、NAS<br><a href="https://blog.csdn.net/flat0809/article/details/98505134/">https://blog.csdn.net/flat0809/article/details/98505134/</a><br>三种存储类型：块存储、文件存储、对象存储</p><h4 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h4><ul><li>DAS（Direct Attach STorage）：是直接连接于主机服务器的一种储存方式，每一台主机服务器有独立的储存设备，每台主机服务器的储存设备无法互通，需要跨主机存取资料时，必须经过相对复杂的设定，若主机服务器分属不同的操作系统，要存取彼此的资料，更是复杂，有些系统甚至不能存取。通常用在单一网络环境下且数据交换量不大，性能要求不高的环境下，可以说是一种应用较为早的技术实现。</li><li>SAN（Storage Area Network）：是一种用高速（光纤）网络联接专业主机服务器的一种储存方式，此系统会位于主机群的后端，它使用高速I&#x2F;O 联结方式， 如 SCSI, ESCON 及 Fibre-Channels。一般而言，SAN应用在对网络速度要求高、对数据的可靠性和安全性要求高、对数据共享的性能要求高的应用环境中，特点是代价高，性能好。例如电信、银行的大数据量关键应用。它采用SCSI 块I&#x2F;O的命令集，通过在磁盘或FC（Fiber Channel）级的数据访问提供高性能的随机I&#x2F;O和数据吞吐率，它具有高带宽、低延迟的优势，在高性能计算中占有一席之地，但是由于SAN系统的价格较高，且可扩展性较差，已不能满足成千上万个CPU规模的系统。<br><strong>典型设备：磁盘阵列、硬盘</strong><br>优点</li></ul><ol><li>这种方式的好处当然是因为通过了Raid与LVM等手段，对数据提供了保护；</li><li>可以将多块廉价的硬盘组合起来，成为一个大容量的逻辑盘对外提供服务，提高了容量；</li><li>写入数据时，由于是多块磁盘组合出来的逻辑盘，所以几块硬盘可以并行写入的，提升了读写效率；</li><li>很多时候块存储采用SAN架构组网，传输速度以及封装协议的原因，使得传输速度和读写效率得到提升<br>缺点</li><li>采用SAN架构组网时，需要额外为主机购买光纤通道卡，还要购买光纤交换机，造价成本高；</li><li>主机之间数据无法共享，在服务器不做集群的情况下，块存储裸盘映射给主机，在格式化使用后，对于主机来说相当于本地盘，那么主机A的本地盘根本不能给主机B去使用，无法共享数据</li><li>不利于不同操作系统主机间的数据共享：因为操作系统使用不同的文件系统，格式化后，不同的文件系统间的数据是共享不了的。 例如一台win7，文件系统是FAT32&#x2F;NTFS，而linux是EXT4，EXT4是无法识别NTFS的文件系统的<h4 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h4>文件存储服务，即提供以文件为基础、与文件系统相关的服务，如目录的浏览。在客户端看到的就是层次结构的目录，目录里面有相应的数据，包括下级目录或文件等<br><strong>典型设备：FTP、NFS服务器</strong><br>优点</li><li>造价低：随便一台机器就可以，另外普通的以太网就可以，根本不需要专用的SAN网络，所以造价低</li><li>方便文件共享<br>缺点</li><li>读写速率低，传输速率慢：以太网，上传下载速度较慢，另外所有读写都要1台服务器里面的硬盘来承受，相比起磁盘阵列动不动就十几上百块硬盘同时读写，速率慢了许多。<h4 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h4>相比块存储和文件存储，对象存储更简洁。对象存储采用扁平化的形式管理数据，没有目录的层次结构，并且对象的操作主要以put、get、delete为主。所以在对象存储中，不支持类似read&#x2F;write的随机读写操作，一个文件put到对象存储之后，在读取时只能get整个文件，如果要重新修改，必须重新put一个新的对象到对象存储里。<br><strong>典型设备：内置大容量硬盘的分布式服务器</strong><br>优点</li><li>具备块存储的读写高速。</li><li>具备文件存储的共享等特性。<h2 id="ceph"><a href="#ceph" class="headerlink" title="ceph"></a>ceph</h2>Ceph是一种为优秀的性能、可靠性和可扩展性而设计的<strong>统一的、分布式</strong>的存储系统</li></ol><ul><li>ceph优势<br>高扩展性，使用普通x86服务器，支持10-1000台服务器，支持TB到EB级的扩展<br>高可靠性，没有单点故障，多数据副本，自动管理，自动修复<br>高性能，数据分布均衡<br>可用于对象存储，块设备存储和文件系统存储<h3 id="ceph环境"><a href="#ceph环境" class="headerlink" title="ceph环境"></a>ceph环境</h3>官方文档：<a href="https://docs.ceph.com/en/latest/install/">https://docs.ceph.com/en/latest/install/</a></li><li>准备环境<br>5台node，系统:centos7，至少1核1G内存每台，每台node角色的机器至少挂载1块不少于5G的空闲盘为osd存储，所有节点修改主机名并相互解析，关闭所有机器的防火墙和selinux<br>，所有节点创建普通用户并设置密码<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin 192.168.x.10 admin--安装ceph-deploy</span><br><span class="line">node1 192.168.x.20 mon/mgr/osd</span><br><span class="line">node2 192.168.x.30 osd</span><br><span class="line">node3 192.168.x.40 osd</span><br><span class="line">ceph-client 192.168.x.50 client</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl <span class="built_in">disable</span> firewalld</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i <span class="string">&#x27;s/enforcing/disabled/&#x27;</span> /etc/selinux/config</span><br><span class="line">useradd cephu</span><br><span class="line"><span class="built_in">echo</span> 1 |passwd --stdin cephu</span><br><span class="line"><span class="built_in">cat</span> &gt; /etc/hosts &lt;&lt;<span class="string">eof</span></span><br><span class="line"><span class="string">127.0.0.1 localhost localhost.localdomain localhost4</span></span><br><span class="line"><span class="string">localhost4.localdomain4</span></span><br><span class="line"><span class="string">::1 localhost localhost.localdomain localhost6</span></span><br><span class="line"><span class="string">localhost6.localdomain6</span></span><br><span class="line"><span class="string">192.168.189.10 admin</span></span><br><span class="line"><span class="string">192.168.189.20 node1</span></span><br><span class="line"><span class="string">192.168.189.30 node2</span></span><br><span class="line"><span class="string">192.168.189.40 node3</span></span><br><span class="line"><span class="string">192.168.189.50 ceph-client</span></span><br><span class="line"><span class="string">eof</span></span><br><span class="line"><span class="comment"># 各 Ceph 节点上新创建的用户都有 sudo 权限</span></span><br><span class="line">visudo</span><br><span class="line">*******************************</span><br><span class="line">root ALL=(ALL) ALL</span><br><span class="line">cephu ALL=(root) NOPASSWD:ALL</span><br><span class="line">*******************************</span><br><span class="line"><span class="comment"># 实现ssh无密码登录（admin节点操作）</span></span><br><span class="line">su - cephu</span><br><span class="line">ssh-keygen</span><br><span class="line">ssh-copy-id cephu@ceph-client</span><br><span class="line">ssh-copy-id cephu@node1</span><br><span class="line">ssh-copy-id cephu@node2</span><br><span class="line">ssh-copy-id cephu@node3</span><br></pre></td></tr></table></figure></li><li>在admin节点用root用户添加~&#x2F;.ssh&#x2F;config配置文件，这样 ceph-deploy 就能用户名登录 Ceph 节点了<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/.ssh</span><br><span class="line">vim ~/.ssh/config</span><br><span class="line">********************************************</span><br><span class="line">Host node1</span><br><span class="line">Hostname node1</span><br><span class="line">User cephu</span><br><span class="line">Host node2</span><br><span class="line">Hostname node2</span><br><span class="line">User cephu</span><br><span class="line">Host node3</span><br><span class="line">Hostname node3</span><br><span class="line">User cephu</span><br></pre></td></tr></table></figure></li><li>安装ceph-deploy（admin节点，root用户）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/yum.repos.d/ceph.repo</span><br><span class="line">*********************************</span><br><span class="line">[ceph-noarch]</span><br><span class="line">name=Ceph noarch packages</span><br><span class="line">baseurl=https://download.ceph.com/rpm-luminous/el7/noarch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=https://download.ceph.com/keys/release.asc</span><br><span class="line">yum makecache &amp;&amp; yum update</span><br><span class="line">vim /etc/yum.conf <span class="comment"># keepcache=1缓存是否保存，1保存，0不保存。</span></span><br><span class="line">yum install -y ceph-deploy</span><br></pre></td></tr></table></figure></li><li>安装ntp（所有节点）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 其中一台</span></span><br><span class="line">yum install -y ntp</span><br><span class="line">vim /etc/ntp.conf</span><br><span class="line"><span class="comment"># 有4行server的位置，把那4行server行注释掉，填写以下两行</span></span><br><span class="line">server 127.127.1.0</span><br><span class="line">fudge 127.127.1.0 stratum 10</span><br><span class="line">systemctl start ntpd &amp;&amp; systemctl <span class="built_in">enable</span> ntpd</span><br><span class="line"><span class="comment"># 其他</span></span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate admin</span><br></pre></td></tr></table></figure><h3 id="ceph集群"><a href="#ceph集群" class="headerlink" title="ceph集群"></a>ceph集群</h3><strong>在admin节点,cephu用户下执行</strong></li><li>创建cephu操作的目录，创建集群,<strong>所有ceph-deploy命令操作必须在该目录下执行</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">su - cephu</span><br><span class="line"><span class="built_in">mkdir</span> my-cluster</span><br><span class="line">wget https://files.pythonhosted.org/packages/5f/ad/1fde06877a8d7d5c9b60eff7de2d452f639916ae1d48f0b8f97bf97e570a/distribute-0.7.3.zip</span><br><span class="line">unzip distribute-0.7.3.zip</span><br><span class="line"><span class="built_in">cd</span> distribute-0.7.3</span><br><span class="line">sudo python setup.py install</span><br><span class="line"><span class="comment"># 创建集群</span></span><br><span class="line"><span class="built_in">cd</span> my-cluster/</span><br><span class="line">ceph-deploy new node1</span><br></pre></td></tr></table></figure></li><li>在node1,node2,node3三个节点上安装ceph和ceph-radosgw主包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">vim /etc/yum.repos.d/ceph.repo</span><br><span class="line">*****************************</span><br><span class="line">[Ceph]</span><br><span class="line">name=Ceph packages <span class="keyword">for</span> <span class="variable">$basearch</span></span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/<span class="variable">$basearch</span></span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/ceph/keys/release.asc</span><br><span class="line">priority=1</span><br><span class="line">[Ceph-noarch]</span><br><span class="line">name=Ceph noarch packages</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/noarch</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/ceph/keys/release.asc</span><br><span class="line">priority=1</span><br><span class="line">[ceph-source]</span><br><span class="line">name=Ceph <span class="built_in">source</span> packages</span><br><span class="line">baseurl=http://mirrors.aliyun.com/ceph/rpm-luminous/el7/SRPMS</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"><span class="built_in">type</span>=rpm-md</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/ceph/keys/release.asc</span><br><span class="line">priority=1</span><br><span class="line">*********************************************</span><br><span class="line">sudo yum install ceph ceph-radosgw -y</span><br><span class="line">ceph --version <span class="comment"># 在node1 node2 node3中确认安装版本为12.2.13</span></span><br></pre></td></tr></table></figure></li><li>初始化mon：admin节点–cephu用户执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname admin</span><br><span class="line">su - cephu</span><br><span class="line"><span class="built_in">cd</span> my-cluster/</span><br><span class="line">ceph-deploy mon create-initial</span><br><span class="line"><span class="comment"># 赋予各个节点使用命令免用户名权限</span></span><br><span class="line">ceph-deploy admin node1 node2 node3</span><br><span class="line"><span class="comment"># 安装ceph-mgr：只有luminous才有，为使用dashboard做准备</span></span><br><span class="line">ceph-deploy mgr create node1</span><br></pre></td></tr></table></figure></li><li>添加osd<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ceph-deploy osd create --data /dev/sdb node1</span><br><span class="line">ceph-deploy osd create --data /dev/sdb node2</span><br><span class="line">ceph-deploy osd create --data /dev/sdb node3</span><br><span class="line">ssh node1 sudo ceph -s <span class="comment"># 查看集群状态</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;分布式存储&quot;&gt;&lt;a href=&quot;#分布式存储&quot; class=&quot;headerlink&quot; title=&quot;分布式存储&quot;&gt;&lt;/a&gt;分布式存储&lt;/h2&gt;&lt;p&gt;分布式存储系统，是将数据分散存储在多台独立的设备上。传统的网络存储系统采用集中的存储服务器存放的所有数据，存储服务器</summary>
      
    
    
    
    <category term="Linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/Linux/"/>
    
    
    <category term="ceph" scheme="http://xczf.shop/tags/ceph/"/>
    
  </entry>
  
  <entry>
    <title>nginx搭建v2ray服务</title>
    <link href="http://xczf.shop/2022/10/01/V2ray/"/>
    <id>http://xczf.shop/2022/10/01/V2ray/</id>
    <published>2022-10-01T11:00:41.000Z</published>
    <updated>2023-11-06T05:05:04.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vmess-tls-websocket"><a href="#vmess-tls-websocket" class="headerlink" title="vmess+tls+websocket"></a>vmess+tls+websocket</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>VPS(Debain GUN&#x2F;Linux 10.5)</li><li>域名：namesilo(<a href="https://www.namesilo.com/">https://www.namesilo.com/</a>)<ul><li>Privacy Setting 代表域名隐私保护设置，建议设置成 WHOIS Privacy</li><li>Namesilo优惠码：1usdoff、all1off、okoff、go2think</li><li><strong>DNS域名解析为VPS公网地址，类型为A，名称自定义</strong></li></ul></li><li>Xshell远程连接工具</li><li>V2ray+V2rayN<h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><h3 id="vi无法选择、复制解决"><a href="#vi无法选择、复制解决" class="headerlink" title="vi无法选择、复制解决"></a>vi无法选择、复制解决</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/share/vim/vim81/defaults.vim</span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">***</span><br><span class="line"><span class="keyword">if</span> has(<span class="string">&#x27;mouse&#x27;</span>)</span><br><span class="line">  <span class="built_in">set</span> mouse-=a</span><br><span class="line">endif</span><br><span class="line">***</span><br><span class="line">````</span><br><span class="line"><span class="comment">### V2ray</span></span><br><span class="line">```bash</span><br><span class="line"><span class="comment"># 删除国产VPS监控</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/spiritLHLS/one-click-installation-script/main/install_scripts/dlm.sh -o dlm.sh &amp;&amp; <span class="built_in">chmod</span> +x dlm.sh &amp;&amp; bash dlm.sh</span><br><span class="line">=============================================</span><br><span class="line">wget https://cdn.jsdelivr.net/gh/wangkai6688/fuckaliyun/fuckaliyun.sh -O ./fuckaliyun.sh</span><br><span class="line"><span class="built_in">chmod</span> +x fuckaliyun.sh</span><br><span class="line">./fuckaliyun.sh</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">apt update <span class="comment"># 更新</span></span><br><span class="line">apt install curl -y <span class="comment"># 安装curl</span></span><br><span class="line">bash &lt;(curl -L https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh) <span class="comment"># 安装v2ray</span></span><br><span class="line">systemctl <span class="built_in">enable</span> v2ray &amp;&amp; systemctl start v2ray <span class="comment"># 启动和自启</span></span><br><span class="line">vi /usr/local/etc/v2ray/config.json <span class="comment"># 编辑配置文件</span></span><br><span class="line">***</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;log&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;access&quot;</span>: <span class="string">&quot;/var/log/v2ray/access.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;error&quot;</span>: <span class="string">&quot;/var/log/v2ray/error.log&quot;</span>,</span><br><span class="line">        <span class="string">&quot;loglevel&quot;</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;inbounds&quot;</span>: [&#123;</span><br><span class="line">            <span class="string">&quot;port&quot;</span>: 11055,</span><br><span class="line">            <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">            <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;clients&quot;</span>: [&#123;</span><br><span class="line">                        <span class="string">&quot;id&quot;</span>: <span class="string">&quot;27848739-7e62-4138-9fd3-098a63964b6b&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;level&quot;</span>: 1,</span><br><span class="line">                        <span class="string">&quot;alterId&quot;</span>: 0</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;streamSettings&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;network&quot;</span>: <span class="string">&quot;ws&quot;</span>,</span><br><span class="line">                <span class="string">&quot;wsSettings&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;/v2ray&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;outbounds&quot;</span>: [&#123;</span><br><span class="line">            <span class="string">&quot;protocol&quot;</span>: <span class="string">&quot;freedom&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">***</span><br><span class="line">systemctl restart v2ray <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">apt install nginx -y &amp;&amp; nginx -v <span class="comment"># 安装nginx</span></span><br><span class="line">vi /etc/nginx/nginx.conf <span class="comment"># user www-data改为user root</span></span><br><span class="line">vi /etc/nginx/sites-enabled/default <span class="comment"># 配置文件</span></span><br><span class="line">***</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.xxxx.top; <span class="comment"># 域名解析网址</span></span><br><span class="line">    index index.html;</span><br><span class="line">    root /root/www/;</span><br><span class="line">&#125;</span><br><span class="line">***</span><br><span class="line"><span class="built_in">mkdir</span> -p /root/www</span><br><span class="line">vi /root/www/index.html <span class="comment"># 创建目录及文件</span></span><br><span class="line">***</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;<span class="built_in">head</span>&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;雪豹闭嘴&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">***</span><br><span class="line">systemctl restart nginx &amp;&amp; systemctl <span class="built_in">enable</span> nginx <span class="comment"># 启动Nginx并设置为开机自启</span></span><br><span class="line">systemctl status nginx <span class="comment"># 查看nginx启动状态</span></span><br></pre></td></tr></table></figure><h3 id="安装certbot并申请ssl证书"><a href="#安装certbot并申请ssl证书" class="headerlink" title="安装certbot并申请ssl证书"></a>安装certbot并申请ssl证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">apt install certbot python3-certbot-nginx -y</span><br><span class="line">certbot --nginx <span class="comment"># 邮件随便输入--&gt;Agree--&gt;no--&gt;选择第一个域名--&gt;2</span></span><br><span class="line"><span class="comment"># /etc/nginx/sites-enabled/default已经进行了修改</span></span><br></pre></td></tr></table></figure><h3 id="v2ray转发"><a href="#v2ray转发" class="headerlink" title="v2ray转发"></a>v2ray转发</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/nginx/sites-enabled/default</span><br><span class="line"><span class="comment"># 添加这部分内容,11055对应/usr/local/etc/v2ray/config.json里面inbounds端口</span></span><br><span class="line">***</span><br><span class="line">location /v2ray &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_pass http://127.0.0.1:11055;</span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;upgrade&quot;</span>;</span><br><span class="line">        proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line">&#125;</span><br><span class="line">***</span><br><span class="line">systemctl restart v2ray</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="Google-BBR加速"><a href="#Google-BBR加速" class="headerlink" title="Google BBR加速"></a>Google BBR加速</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.default_qdisc=fq&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.tcp_congestion_control=bbr&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control <span class="comment"># 查看内核是否已开启BBR net.ipv4.tcp_available_congestion_control = bbr cubic reno</span></span><br><span class="line">lsmod | grep bbr <span class="comment"># 是否启动 tcp_bbr 20480  17</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="V2rayN配置"><a href="#V2rayN配置" class="headerlink" title="V2rayN配置"></a>V2rayN配置</h3></li></ul><hr><p><img src="/image/V2RAY/1.jpg" alt="V2ray"></p><hr><h1 id="trojan"><a href="#trojan" class="headerlink" title="trojan"></a>trojan</h1><h2 id="环境-1"><a href="#环境-1" class="headerlink" title="环境"></a>环境</h2><ul><li>VPS(Debain GUN&#x2F;Linux 10.5)</li><li>域名</li><li>Xshell远程连接工具</li><li>trojan 版本:1.16.0<h2 id="搭建-1"><a href="#搭建-1" class="headerlink" title="搭建"></a>搭建</h2><h3 id="nginx-1"><a href="#nginx-1" class="headerlink" title="nginx"></a>nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">vi /etc/nginx/nginx.conf <span class="comment"># user www-data改为user root</span></span><br><span class="line">apt install -y nginx</span><br><span class="line"><span class="built_in">mkdir</span> -p /root/www</span><br><span class="line">vi /root/www/index.html</span><br><span class="line">***</span><br><span class="line">&lt;html&gt; </span><br><span class="line">  &lt;title&gt;顶针&lt;/title&gt;</span><br><span class="line">  &lt;<span class="built_in">head</span>&gt;&lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;a&gt;xxx&lt;/a&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">***</span><br><span class="line">vim /etc/nginx/sites-enabled/default</span><br><span class="line">***</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name xxxxx; <span class="comment"># 域名</span></span><br><span class="line">    index index.html;</span><br><span class="line">    root /root/www/;</span><br><span class="line">&#125;</span><br><span class="line">***</span><br><span class="line">systemctl restart nginx &amp;&amp; systemctl <span class="built_in">enable</span> nginx &amp;&amp; systemctl status nginx</span><br></pre></td></tr></table></figure><h3 id="安装certbot，申请ssl证书"><a href="#安装certbot，申请ssl证书" class="headerlink" title="安装certbot，申请ssl证书"></a>安装certbot，申请ssl证书</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt install -y snapd</span><br><span class="line">snap install core &amp;&amp; snap refresh core <span class="comment"># 确保snapd为最新版本</span></span><br><span class="line">snap install --classic certbot</span><br><span class="line"><span class="built_in">ln</span> -s /snap/bin/certbot /usr/bin/certbot <span class="comment"># 创建软链</span></span><br><span class="line">certbot --nginx <span class="comment"># 邮箱--&gt;Y--&gt;N--&gt;选择域名</span></span><br></pre></td></tr></table></figure><h3 id="安装trojan"><a href="#安装trojan" class="headerlink" title="安装trojan"></a>安装trojan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/trojan-gfw/trojan/releases/download/v1.16.0/trojan-1.16.0-linux-amd64.tar.xz</span><br><span class="line">tar xf trojan-1.* </span><br><span class="line">vi /root/trojan/server.conf <span class="comment"># 域名更换</span></span><br><span class="line">***</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;run_type&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">    <span class="string">&quot;local_addr&quot;</span>: <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;local_port&quot;</span>: 443,</span><br><span class="line">    <span class="string">&quot;remote_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;remote_port&quot;</span>: 80,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;iiskdsksdksdpassword&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;log_level&quot;</span>: 1,</span><br><span class="line">    <span class="string">&quot;ssl&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;cert&quot;</span>: <span class="string">&quot;/etc/letsencrypt/live/xxxxxx/fullchain.pem&quot;</span>,</span><br><span class="line">        <span class="string">&quot;key&quot;</span>: <span class="string">&quot;/etc/letsencrypt/live/xxxxxx/privkey.pem&quot;</span>,</span><br><span class="line">        <span class="string">&quot;key_password&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cipher_tls13&quot;</span>:<span class="string">&quot;TLS_AES_128_GCM_SHA256:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_256_GCM_SHA384&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prefer_server_cipher&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;alpn&quot;</span>: [</span><br><span class="line">            <span class="string">&quot;http/1.1&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;reuse_session&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;session_ticket&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;session_timeout&quot;</span>: 600,</span><br><span class="line">        <span class="string">&quot;plain_http_response&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;curves&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dhparam&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;tcp&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;no_delay&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;keep_alive&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;fast_open&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;fast_open_qlen&quot;</span>: 20</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;mysql&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;enabled&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;server_addr&quot;</span>: <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;server_port&quot;</span>: 3306,</span><br><span class="line">        <span class="string">&quot;database&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;username&quot;</span>: <span class="string">&quot;trojan&quot;</span>,</span><br><span class="line">        <span class="string">&quot;password&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">***</span><br></pre></td></tr></table></figure><h3 id="trojan启动脚本"><a href="#trojan启动脚本" class="headerlink" title="trojan启动脚本"></a>trojan启动脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/systemd/system/trojan.service</span><br><span class="line">***</span><br><span class="line">[Unit]  </span><br><span class="line">Description=trojan  </span><br><span class="line">After=network.target  </span><br><span class="line"></span><br><span class="line">[Service]  </span><br><span class="line">Type=simple  </span><br><span class="line">PIDFile=/root/trojan/trojan/trojan.pid</span><br><span class="line">ExecStart=/root/trojan/trojan -c <span class="string">&quot;/root/trojan/server.conf&quot;</span>  </span><br><span class="line">ExecReload=  </span><br><span class="line">ExecStop=/usr/src/trojan/trojan  </span><br><span class="line">PrivateTmp=<span class="literal">true</span>  </span><br><span class="line"></span><br><span class="line">[Install]  </span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">***</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl stop nginx</span><br><span class="line">systemctl restart trojan</span><br></pre></td></tr></table></figure><h3 id="V2rayN配置-1"><a href="#V2rayN配置-1" class="headerlink" title="V2rayN配置"></a>V2rayN配置</h3></li></ul><hr><p><img src="/image/V2RAY/2.jpg" alt="V2ray"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;vmess-tls-websocket&quot;&gt;&lt;a href=&quot;#vmess-tls-websocket&quot; class=&quot;headerlink&quot; title=&quot;vmess+tls+websocket&quot;&gt;&lt;/a&gt;vmess+tls+websocket&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/linux/"/>
    
    
    <category term="linux" scheme="http://xczf.shop/tags/linux/"/>
    
    <category term="nginx" scheme="http://xczf.shop/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>MySql</title>
    <link href="http://xczf.shop/2022/08/01/MySql/"/>
    <id>http://xczf.shop/2022/08/01/MySql/</id>
    <published>2022-08-01T11:00:41.000Z</published>
    <updated>2023-12-04T15:44:44.590Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><ul><li>关系型数据库是指采用了关系模型来组织数据的数据库，即二维表格的形式</li><li>优点：结构简单、易于维护，都是使用表结构，格式一致；数据库设计和规范化过程也简单易行和易于理解。允许用户几乎毫无差别地从一个产品到另一个产品存取信息。与关系数据库接口的应用软件具有相似的程序访问机制，提供大量标准的数据存取方法。</li><li>缺点：数据类型表达能力差：关系数据模型不直接支持复杂的数据类型。 由于第一范式的要求所有的数据必须转换为简单的类型。 复杂读写功能差，环境应变能力差，读写性能：面对海量数据的高并发读写需求，效率就会变得很差。<h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3></li><li>MySQL版本<ul><li>官网：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></li><li>版本是偶数版是稳定版，奇数版本是开发版</li><li>5.17版本以上，支持MGR（MySQL自带的高可用）</li></ul></li><li>下载源码，配置编译环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">useradd mysql -s /sbin/nologin -M <span class="comment"># 创建mysql用户</span></span><br><span class="line">yum install -y wget</span><br><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.40.tar.gz</span><br><span class="line">tar xzvf mysql-5.6.40.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -rf mysql-5.6.40.tar.gz</span><br><span class="line">yum install -y ncurses-devel libaio-devel cmake gcc gcc-c++ glibc <span class="comment"># 下载编译环境工具</span></span><br><span class="line"><span class="built_in">cd</span> mysql-5.6.40</span><br></pre></td></tr></table></figure></li><li>编译并安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /application <span class="comment"># 编译存放目录</span></span><br><span class="line">cmake . -DCMAKE_INSTALL_PREFIX=/application/mysql-5.6.40 \</span><br><span class="line">-DMYSQL_DATADIR=/application/mysql-5.6.40/data \</span><br><span class="line">-DMYSQL_UNIX_ADDR=/application/mysql-5.6.40/tmp/mysql.sock \</span><br><span class="line">-DDEFAULT_CHARSET=utf8 \</span><br><span class="line">-DDEFAULT_COLLATION=utf8_general_ci \</span><br><span class="line">-DWITH_EXTRA_CHARSETS=all \</span><br><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_FEDERATED_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_BLACKHOLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITHOUT_EXAMPLE_STORAGE_ENGINE=1 \</span><br><span class="line">-DWITH_ZLIB=bundled \</span><br><span class="line">-DWITH_SSL=bundled \</span><br><span class="line">-DENABLED_LOCAL_INFILE=1 \</span><br><span class="line">-DWITH_EMBEDDED_SERVER=1 \</span><br><span class="line">-DENABLE_DOWNLOADS=1 \</span><br><span class="line">-DWITH_DEBUG=0</span><br><span class="line">=============================================================</span><br><span class="line"><span class="built_in">echo</span> $? <span class="comment"># 0为编译成功</span></span><br><span class="line">make -j 4 &amp;&amp; make install </span><br></pre></td></tr></table></figure></li><li>创建配置文件和启动脚本<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /application/mysql-5.6.40/ /application/mysql <span class="comment"># 创建软链方便后续版本升级不需要大批量修改配置文件</span></span><br><span class="line"><span class="built_in">cp</span> /application/mysql/support-files/my-default.cnf /etc/my.cnf <span class="comment"># 替换系统的配置文件 y</span></span><br><span class="line"><span class="built_in">cp</span> /application/mysql/support-files/mysql.server /etc/init.d/mysqld <span class="comment"># 启动脚本</span></span><br></pre></td></tr></table></figure></li><li>初始化数据库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /application/mysql/scripts/</span><br><span class="line">yum -y install autoconf <span class="comment"># 不按照编译ERROR</span></span><br><span class="line">./mysql_install_db --user=mysql --basedir=/application/mysql --datadir=/application/mysql/data/</span><br></pre></td></tr></table></figure></li><li>启动数据库和配置环境变量<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /application/mysql/tmp <span class="comment"># 编译时创建的目录</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /application/mysql* <span class="comment"># 提权</span></span><br><span class="line">/etc/init.d/mysqld start <span class="comment"># 启动 stop为关闭</span></span><br><span class="line">vim /etc/profile.d/mysql.sh</span><br><span class="line">***</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/application/mysql/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">***</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">mysql <span class="comment"># 直接登录</span></span><br></pre></td></tr></table></figure></li><li>systemd管理mysql<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/mysqld.service</span><br><span class="line">***</span><br><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">Documentation=man:mysqld(8)</span><br><span class="line">Documentation=https://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">LimitNOFILE = 5000</span><br><span class="line">***</span><br></pre></td></tr></table></figure></li><li>设置mysql开机启动，mysql密码，登录测试<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysqld stop &amp;&amp; ss -tnl</span><br><span class="line">systemctl start mysqld &amp;&amp; systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">mysqladmin -uroot password <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">mysql -uroot -p123456 <span class="comment"># login</span></span><br></pre></td></tr></table></figure><h3 id="二进制安装"><a href="#二进制安装" class="headerlink" title="二进制安装"></a>二进制安装</h3></li><li>下载二进制包并编译安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget</span><br><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.40-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">tar xzvf mysql-5.6.40-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"><span class="built_in">rm</span> -rf mysql-5.6.40-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> /application &amp;&amp; useradd mysql -s /sbin/nologin -M</span><br><span class="line"><span class="built_in">mv</span> mysql-5.6.40-linux-glibc2.12-x86_64 /application/mysql-5.6.40 <span class="comment"># 改名</span></span><br><span class="line"><span class="built_in">ln</span> -s /application/mysql-5.6.40 /application/mysql</span><br><span class="line"><span class="built_in">cp</span> /application/mysql/support-files/my-default.cnf /etc/my.cnf <span class="comment"># y</span></span><br><span class="line"><span class="built_in">cp</span> /application/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"><span class="built_in">cd</span> /application/mysql/scripts</span><br><span class="line">yum -y install autoconf</span><br><span class="line">./mysql_install_db --user=mysql --basedir=/application/mysql --data=/application/mysql/data</span><br><span class="line">vim /etc/profile.d/mysql.sh</span><br><span class="line">***</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/application/mysql/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line">***</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"><span class="comment"># 修改配置文件:官方编译的二进制包默认是在 /usr/local目录下</span></span><br><span class="line">sed -i <span class="string">&#x27;s#/usr/local#/application#g&#x27;</span> /etc/init.d/mysqld /application/mysql/bin/mysqld_safe</span><br></pre></td></tr></table></figure></li><li>创建systemd管理文件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/mysqld.service</span><br><span class="line">***</span><br><span class="line">[Unit]</span><br><span class="line">Description=MySQL Server</span><br><span class="line">Documentation=man:mysqld(8)</span><br><span class="line">Documentation=https://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">After=network.target</span><br><span class="line">After=syslog.target</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User=mysql</span><br><span class="line">Group=mysql</span><br><span class="line">ExecStart=/application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">LimitNOFILE = 5000</span><br><span class="line">***</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">basedir = /application/mysql/</span><br><span class="line">datadir = /application/mysql/data</span><br><span class="line">***</span><br><span class="line">systemctl daemon-reload &amp;&amp; systemctl start mysqld</span><br><span class="line">systemctl <span class="built_in">enable</span> mysqld</span><br><span class="line">mysqladmin -uroot password <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">mysql -uroot -p123456</span><br></pre></td></tr></table></figure><h2 id="MySQL体系结构"><a href="#MySQL体系结构" class="headerlink" title="MySQL体系结构"></a>MySQL体系结构</h2><h3 id="客户端与服务器模型"><a href="#客户端与服务器模型" class="headerlink" title="客户端与服务器模型"></a>客户端与服务器模型</h3></li></ul><hr><p><img src="/image/Mysql/1.jpg" alt="客户端与服务器模型"></p><hr><ul><li>mysql自带的客户端程序（目录：&#x2F;application&#x2F;mysql&#x2F;bin）</li><li>mysqld一个二进制程序，后台的守护进程，单进程，多线程<h4 id="mysql-uroot-p123456-h127-0-0-1"><a href="#mysql-uroot-p123456-h127-0-0-1" class="headerlink" title="mysql -uroot -p123456 -h127.0.0.1"></a>mysql -uroot -p123456 -h127.0.0.1</h4></li></ul><hr><p><img src="/image/Mysql/2.jpg" alt="TCP/IP"></p><hr><h4 id="mysql-uroot-p123456-S-x2F-tmp-x2F-mysql-sock（默认）"><a href="#mysql-uroot-p123456-S-x2F-tmp-x2F-mysql-sock（默认）" class="headerlink" title="mysql -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock（默认）"></a>mysql -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock（默认）</h4><hr><p><img src="/image/Mysql/3.jpg" alt="socket"></p><hr><h2 id="MySQL服务器构成"><a href="#MySQL服务器构成" class="headerlink" title="MySQL服务器构成"></a>MySQL服务器构成</h2><p>实例&#x3D;mysqld后台守护进程+Master Thread +干活的Thread+预分配的内存</p><hr><p><img src="/image/Mysql/4.jpg" alt="实例"></p><hr><ul><li>连接层</li></ul><ol><li>验证用户的合法性(ip,端口,用户名)</li><li>提供两种连接方式(socket,TCP&#x2F;IP)</li><li>验证操作权限</li><li>提供一个与SQL层交互的专用线程</li></ol><ul><li>SQL层</li></ul><ol><li>接受连接层传来的SQL语句</li><li>检查语法</li><li>检查语义(DDL,DML,DQL,DCL)</li><li>解析器，解析SQL语句，生成多种执行计划</li><li>优化器，根据多种执行计划，选择最优方式</li><li>执行器，执行优化器传来的最优方式SQL</li><li>提供与存储引擎交互的线程</li><li>接收返回数据，优化成表的形式返回SQL</li><li>数据存入缓存</li><li>记录日志，binlog</li></ol><ul><li>存储引擎</li></ul><ol><li>接收上层的执行结构</li><li>取出磁盘文件和相应数据</li><li>返回给SQL层，结构化之后生成表格，由专用线程返回给客户端<h3 id="mysql逻辑结构"><a href="#mysql逻辑结构" class="headerlink" title="mysql逻辑结构"></a>mysql逻辑结构</h3>库<br>表：元数据+真实数据行<br>元数据：列+其它属性（行数+占用空间大小+权限）<br>列：列名字+数据类型+其他约束（非空、唯一、主键、非负数、自增长、默认值）<h3 id="mysql的物理结构"><a href="#mysql的物理结构" class="headerlink" title="mysql的物理结构"></a>mysql的物理结构</h3>MySQL的最底层的物理结构是数据文件。<br>存储引擎分为很多种类（Linux中的FS）innodb,myisam<br>不同存储引擎的区别：存储方式、安全性、性能</li></ol><p><strong>存储引擎是myisam, 在data目录下会看到3类文件：.frm、.myi、.myd<br>（1）.frm–表定义，是描述表结构的文件。<br>（2）.MYD–”D”数据信息文件，是表的数据文件。<br>（3）.MYI–”I”索引信息文件，是表数据文件中任何索引的数据树</strong></p><p><strong>存储引擎是InnoDB, 在data目录下会看到2类文件：.frm、.ibd<br>（1）.frm–表结构的文件。<br>（2）.ibd–表数据和索引的文件。该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。</strong></p><h2 id="Mysql用户权限"><a href="#Mysql用户权限" class="headerlink" title="Mysql用户权限"></a>Mysql用户权限</h2><h3 id="忘记密码"><a href="#忘记密码" class="headerlink" title="忘记密码"></a>忘记密码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -uroot password <span class="string">&#x27;123456&#x27;</span> <span class="comment"># 创建用户及密码</span></span><br><span class="line">/etc/init.d/mysqld stop <span class="comment"># stop</span></span><br><span class="line">mysqld_safe --skip-grant-tables --skip-networking</span><br><span class="line">=============================================================</span><br><span class="line">mysql&gt; update mysql.user <span class="built_in">set</span> password=PASSWORD(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and host=<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">mysql&gt; flush privileges; <span class="comment"># 刷新权限</span></span><br></pre></td></tr></table></figure><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户 允许IP下的所有用户登录</span><br><span class="line">mysql&gt; create user 用户名@&#x27;192.168.189.%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"># 查看用户</span><br><span class="line">mysql&gt; select user,host from mysql.user;</span><br><span class="line"># 删除用户</span><br><span class="line">drop user 用户名@&#x27;192.168.189.%&#x27;;</span><br><span class="line"># 修改密码</span><br><span class="line">mysql&gt; set password=PASSWORD(&#x27;123456&#x27;);</span><br><span class="line">mysql&gt; update mysql.user set password=PASSWORD(&#x27;user01&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br><span class="line"># 给用户所有权限</span><br><span class="line">mysql&gt; grant all privileges on *.* to 用户名@&#x27;192.168.189.%&#x27; identified by &#x27;123456&#x27;;</span><br><span class="line"># 可以给其它用户权限</span><br><span class="line">mysql&gt; grant all privileges on *.* to 用户名@&#x27;192.168.189.%&#x27; identified by &#x27;123456&#x27; with grant;</span><br></pre></td></tr></table></figure><h3 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT,SELECT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS,FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY,TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE,VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER,CREATE TABLESPACE</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to user01@<span class="string">&#x27;&#x27;</span>192.168.189.%<span class="string">&#x27;&#x27;</span> identified by <span class="string">&#x27;&#x27;</span>123<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment"># 权限 作用对象 归属 密码</span></span><br><span class="line"><span class="comment"># 作用对象</span></span><br><span class="line"><span class="comment"># . [当前MySQL实例中所有库下的所有表]</span></span><br><span class="line"><span class="comment"># wordpress.* [当前MySQL实例中wordpress库中所有表（单库级别）]</span></span><br><span class="line"><span class="comment"># wordpress.user [当前MySQL实例中wordpress库中的user表（单表级别）]</span></span><br></pre></td></tr></table></figure><p>一般给开发创建用户权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant select,update,delete,insert on *.* to developer@<span class="string">&#x27;192.168.189.%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="多实例"><a href="#多实例" class="headerlink" title="多实例"></a>多实例</h2><p>多套后台进程+线程+内存结构+多个配置文件+多套数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /data/330&#123;7..9&#125;</span><br><span class="line"><span class="comment">#创建配置文件</span></span><br><span class="line"><span class="built_in">touch</span> /data/330&#123;7..9&#125;/my.cnf</span><br><span class="line"><span class="built_in">touch</span> /data/330&#123;7..9&#125;/mysql.log</span><br><span class="line"><span class="comment">#编辑3307配置文件</span></span><br><span class="line">vim /data/3307/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3307/data</span><br><span class="line">socket=/data/3307/mysql.sock</span><br><span class="line">log_error=/data/3307/mysql.log</span><br><span class="line">log-bin=/data/3307/mysql-bin</span><br><span class="line">server_id=7</span><br><span class="line">port=3307</span><br><span class="line">[client]</span><br><span class="line">socket=/data/3307/mysql.sock</span><br><span class="line"><span class="comment">#编辑3308配置文件</span></span><br><span class="line">vim /data/3308/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3308/data</span><br><span class="line">socket=/data/3308/mysql.sock</span><br><span class="line">log_error=/data/3308/mysql.log</span><br><span class="line">log-bin=/data/3308/mysql-bin</span><br><span class="line">server_id=8</span><br><span class="line">port=3308</span><br><span class="line">[client]</span><br><span class="line">socket=/data/3308/mysql.sock</span><br><span class="line"><span class="comment">#编辑3309配置文件</span></span><br><span class="line">vim /data/3309/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">basedir=/application/mysql</span><br><span class="line">datadir=/data/3309/data</span><br><span class="line">socket=/data/3309/mysql.sock</span><br><span class="line">log_error=/data/3309/mysql.log</span><br><span class="line">log-bin=/data/3309/mysql-bin</span><br><span class="line">server_id=9</span><br><span class="line">port=3309</span><br><span class="line">[client]</span><br><span class="line">socket=/data/3309/mysql.sock</span><br><span class="line"><span class="comment">#初始化3307数据</span></span><br><span class="line">/application/mysql/scripts/mysql_install_db \</span><br><span class="line">--user=mysql \</span><br><span class="line">--defaults-file=/data/3307/my.cnf \</span><br><span class="line">--basedir=/application/mysql --datadir=/data/3307/data</span><br><span class="line"><span class="comment">#初始化3308数据</span></span><br><span class="line">/application/mysql/scripts/mysql_install_db \</span><br><span class="line">--user=mysql \</span><br><span class="line">--defaults-file=/data/3308/my.cnf \</span><br><span class="line">--basedir=/application/mysql --datadir=/data/3308/data</span><br><span class="line"><span class="comment">#初始化3309数据</span></span><br><span class="line">/application/mysql/scripts/mysql_install_db \</span><br><span class="line">--user=mysql \</span><br><span class="line">--defaults-file=/data/3309/my.cnf \</span><br><span class="line">--basedir=/application/mysql --datadir=/data/3309/data</span><br><span class="line"><span class="comment">#修改目录权限</span></span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /data/330*</span><br><span class="line"><span class="comment">#启动多实例</span></span><br><span class="line">mysqld_safe --defaults-file=/data/3307/my.cnf &amp;</span><br><span class="line">mysqld_safe --defaults-file=/data/3308/my.cnf &amp;</span><br><span class="line">mysqld_safe --defaults-file=/data/3309/my.cnf &amp;</span><br><span class="line"><span class="comment">#查看server_id</span></span><br><span class="line">mysql -S /data/3307/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">mysql -S /data/3308/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">mysql -S /data/3309/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line"><span class="comment"># 进入单独的mysql实例</span></span><br><span class="line">mysql -S /data/3307/mysql.sock -uroot</span><br><span class="line"><span class="comment"># 关闭实例</span></span><br><span class="line">mysqladmin -S /data/3307/mysql.sock -uroot shutdown</span><br><span class="line">mysqladmin -S /data/3308/mysql.sock -uroot shutdown</span><br><span class="line">mysqladmin -S /data/3309/mysql.sock -uroot shutdown</span><br></pre></td></tr></table></figure><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><h3 id="DDL数据定义语句"><a href="#DDL数据定义语句" class="headerlink" title="DDL数据定义语句"></a>DDL数据定义语句</h3><h4 id="创建和查看数据库"><a href="#创建和查看数据库" class="headerlink" title="创建和查看数据库"></a>创建和查看数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create database db1; # 创建数据库</span><br><span class="line">create database DB1; # 数据库名区分大小写(注意windows里面不区分)</span><br><span class="line"># 配置文件(vim /etc/my.cnf)中增加:lower_case_table_names = 1可以忽略大小写</span><br><span class="line">show variables like &#x27;lower_case_table_names&#x27;;</span><br><span class="line">show databases; # 查看数据库(DQL)</span><br><span class="line">show create database db1; # 查看创建数据库语句</span><br><span class="line">help create database; # 查看创建数据库语句帮助</span><br><span class="line">create database db2 charset utf8; # 创建数据库的时候添加属性</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database db2; # 删除数据库db2</span><br></pre></td></tr></table></figure><h4 id="修改定义库"><a href="#修改定义库" class="headerlink" title="修改定义库"></a>修改定义库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter database db1 charset utf8;</span><br><span class="line">show create database db1;</span><br></pre></td></tr></table></figure><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><ul><li>数据类型<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int            # 整数 -231~230</span><br><span class="line">varchar(20)    # 字符类型(可变长)</span><br><span class="line">tinyint        # 整数 -128~127</span><br><span class="line">enum(&#x27;m&#x27;,&#x27;f&#x27;)  # 枚举类型</span><br><span class="line">datetime       # 时间类型 年月日时分秒</span><br></pre></td></tr></table></figure></li><li>数据属性<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">primary key    # 主键(唯一且非空)</span><br><span class="line">auto_increment # 自增，此列必须是primary key或者unique key</span><br><span class="line">unique key     # 单独的唯一的</span><br><span class="line">default        # 默认值</span><br><span class="line">unsigned       # 非负数</span><br><span class="line">comment        # 注释</span><br></pre></td></tr></table></figure></li><li>创建表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">help create table; # 查看创表语句的帮助</span><br><span class="line">create table student(</span><br><span class="line">sid int not null primary key auto_increment comment &#x27;学号&#x27;,</span><br><span class="line">sname varchar(20) not null comment &#x27;学生姓名&#x27;,</span><br><span class="line">sage tinyint unsigned not null comment &#x27;年龄&#x27;,</span><br><span class="line">sgender enum(&#x27;m&#x27;,&#x27;f&#x27;) not null default &#x27;m&#x27; comment &#x27;学生性别&#x27;,</span><br><span class="line">cometime datetime not null comment &#x27;入学时间&#x27;</span><br><span class="line">)charset utf8 engine innodb;</span><br><span class="line">show create table student\G # 查看建表语句</span><br><span class="line">show tables;  # 查看表</span><br><span class="line">desc student; # 查看表中列的定义信息</span><br></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table student;</span><br></pre></td></tr></table></figure><h4 id="修改表的定义"><a href="#修改表的定义" class="headerlink" title="修改表的定义"></a>修改表的定义</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">alter table student rename teacher; # 修改表名</span><br><span class="line">alter table teacher add age int;    # 添加列和列数据类型的定义</span><br><span class="line">alter table teacher add test varchar(20),add qq int; # 添加多个列</span><br><span class="line">alter table teacher add classid varchar(20) first; # 指定位置进行添加列(表首)</span><br><span class="line">alter table teacher add phone int after age; # 指定位置进行添加列（指定列）</span><br><span class="line">alter table teacher drop qq; # 删除指定的列及定义</span><br><span class="line">alter table teacher modify sid varchar(20); # 修改列及定义（列属性）</span><br><span class="line">alter table teacher change phone telphone char(20); # 修改列及定义（列名及属性）</span><br></pre></td></tr></table></figure><h3 id="DCL数据控制语言"><a href="#DCL数据控制语言" class="headerlink" title="DCL数据控制语言"></a>DCL数据控制语言</h3><h4 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to root@&#x27;192.168.189.%&#x27; identified by &#x27;123456&#x27;; # 用户所有权限(非超级管理员)</span><br><span class="line">grant all on *.* to root@&#x27;192.168.189.%&#x27; identified by &#x27;123456&#x27; with grant option; # 授权一个超级管理员，可以为其它用户授权</span><br><span class="line"># max_queries_per_hour：一个用户每小时可发出的查询数量</span><br><span class="line"># max_updates_per_hour：一个用户每小时可发出的更新数量</span><br><span class="line"># max_connections_per_hour：一个用户每小时可连接到服务器的次数</span><br><span class="line"># max_user_connections：允许同时连接数量</span><br><span class="line">grant all on *.* to root@&#x27;192.168.189.%&#x27; identified by &#x27;123456&#x27; with max_queries_per_hour 2;</span><br></pre></td></tr></table></figure><h4 id="收回权限"><a href="#收回权限" class="headerlink" title="收回权限"></a>收回权限</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">revoke select on *.* from root@&#x27;192.168.189.%&#x27;; # 收回select权限</span><br><span class="line">show grants for root@&#x27;192.168.189.%&#x27;; # 查看权限</span><br></pre></td></tr></table></figure><h3 id="DML数据操作语言"><a href="#DML数据操作语言" class="headerlink" title="DML数据操作语言"></a>DML数据操作语言</h3><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 基础用法，插入数据</span><br><span class="line">insert into teacher values(&#x27;linux1&#x27;,1,NOW(),&#x27;zhangsan&#x27;,20,&#x27;m&#x27;,NOW(),110,111111);</span><br><span class="line"># 规范用法，插入数据</span><br><span class="line">insert into teacher (classid,birth.sname,sage,sgender,comtime,telnum,qq)</span><br><span class="line">values(&#x27;linux1&#x27;,1,NOW(),&#x27;zhangsan&#x27;,20,&#x27;m&#x27;,NOW(),110,111111);</span><br><span class="line"># 插入多条数据</span><br><span class="line">insert into teacher (classid,birth.sname,sage,sgender,comtime,telnum,qq)</span><br><span class="line">values(&#x27;linux1&#x27;,1,NOW(),&#x27;zhangsan&#x27;,20,&#x27;m&#x27;,NOW(),110,111111),</span><br><span class="line">(&#x27;linux2&#x27;,2,NOW(),&#x27;lisi&#x27;,21,&#x27;f&#x27;,NOW(),111,222222);</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update teacher set sgender=&#x27;f&#x27; where sid=1;</span><br><span class="line"># 修改密码，需要刷新权限flush privileges</span><br><span class="line">update mysql.user set password=PASSWORD(&#x27;123456&#x27;) where user=&#x27;root&#x27; and host=&#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">delete from teacher where sid=3;</span><br><span class="line"># DDL清空表中的内容</span><br><span class="line">truncate table teacher;</span><br></pre></td></tr></table></figure></li><li>伪删除<br>一些重要数据不能直接删除，只能伪删除，以后还可以使用<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 额外添加一个状态列</span><br><span class="line">alter table teacher add status enum(&#x27;1&#x27;,&#x27;0&#x27;) default 1;</span><br><span class="line"># 使用update</span><br><span class="line">update teacher set status=&#x27;0&#x27; where sid=1;</span><br><span class="line">select * from teacher where status=1; # 应用查询存在的数据</span><br></pre></td></tr></table></figure><h3 id="DQL数据查询语言"><a href="#DQL数据查询语言" class="headerlink" title="DQL数据查询语言"></a>DQL数据查询语言</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT 字段1,字段2,... FROM tablename</span><br><span class="line">WHRER 条件 # 用约束条件，去表中取出一条条记录</span><br><span class="line">GROUP BY 字段 # 将结果按组排序</span><br><span class="line">HAVING # 将分组的结果进行过滤</span><br><span class="line">ORDER BY 字段 # 将结果按条件排序</span><br><span class="line">LIMIT # 限制结果的显示条数</span><br></pre></td></tr></table></figure></li><li>优先级<br>FROM &gt; WHERE &gt; GROUP BY &gt; SELECT(去重) &gt; DISTINCT &gt; HAVING &gt; ORDER BY &gt;LIMIT<h4 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h4></li><li>建表<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table employee(</span><br><span class="line">id int not null unique auto_increment,</span><br><span class="line">emp_name varchar(20) not null,</span><br><span class="line">sex enum(&#x27;male&#x27;,&#x27;female&#x27;) not null default &#x27;male&#x27;,</span><br><span class="line">age int(3) unsigned not null default 28,</span><br><span class="line">hire_date date not null,</span><br><span class="line">post varchar(50),</span><br><span class="line">post_comment varchar(100),</span><br><span class="line">salary double(15,2),</span><br><span class="line">office int,</span><br><span class="line">depart_id int</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>插入数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">insert into</span><br><span class="line">employee(emp_name,sex,age,hire_date,post,salary,office,depart_id) values</span><br><span class="line">(&#x27;王子异&#x27;,&#x27;male&#x27;,23,&#x27;20170301&#x27;,&#x27;boss&#x27;,7300.33,401,1),</span><br><span class="line">(&#x27;林彦俊&#x27;,&#x27;male&#x27;,18,&#x27;20150302&#x27;,&#x27;teacher&#x27;,1000000.31,401,1),</span><br><span class="line">(&#x27;朱正廷&#x27;,&#x27;male&#x27;,19,&#x27;20130305&#x27;,&#x27;developer&#x27;,8300,401,1),</span><br><span class="line">(&#x27;王琳凯&#x27;,&#x27;male&#x27;,24,&#x27;20140701&#x27;,&#x27;teacher&#x27;,3500,401,1),</span><br><span class="line">(&#x27;陈立农&#x27;,&#x27;male&#x27;,22,&#x27;20121101&#x27;,&#x27;rapper&#x27;,2100,401,1),</span><br><span class="line">(&#x27;黄明昊&#x27;,&#x27;female&#x27;,26,&#x27;20110211&#x27;,&#x27;teacher&#x27;,9000,401,1),</span><br><span class="line">(&#x27;范丞丞&#x27;,&#x27;male&#x27;,28,&#x27;19010301&#x27;,&#x27;teacher&#x27;,30000,401,1),</span><br><span class="line">(&#x27;蔡徐坤&#x27;,&#x27;male&#x27;,48,&#x27;20101111&#x27;,&#x27;developer&#x27;,10000,401,1),</span><br><span class="line">(&#x27;丁真珍珠&#x27;,&#x27;female&#x27;,48,&#x27;20150311&#x27;,&#x27;sale&#x27;,3000.13,402,2),</span><br><span class="line">(&#x27;尤长靖&#x27;,&#x27;female&#x27;,38,&#x27;20101101&#x27;,&#x27;sale&#x27;,2000.35,402,2),</span><br><span class="line">(&#x27;王俊凯&#x27;,&#x27;female&#x27;,28,&#x27;20110312&#x27;,&#x27;sale&#x27;,1000.37,402,2),</span><br><span class="line">(&#x27;王源&#x27;,&#x27;female&#x27;,18,&#x27;20160513&#x27;,&#x27;sale&#x27;,3000.29,402,2),</span><br><span class="line">(&#x27;易烊千玺&#x27;,&#x27;female&#x27;,28,&#x27;20170127&#x27;,&#x27;sale&#x27;,4000.33,402,2),</span><br><span class="line">(&#x27;李希侃&#x27;,&#x27;male&#x27;,27,&#x27;20160311&#x27;,&#x27;rapper&#x27;,10000.13,403,3),</span><br><span class="line">(&#x27;左林杰&#x27;,&#x27;male&#x27;,16,&#x27;19970312&#x27;,&#x27;operation&#x27;,20000,403,3),</span><br><span class="line">(&#x27;胡文煊&#x27;,&#x27;female&#x27;,17,&#x27;20130311&#x27;,&#x27;operation&#x27;,19000,403,3),</span><br><span class="line">(&#x27;郭震&#x27;,&#x27;male&#x27;,18,&#x27;20150411&#x27;,&#x27;operation&#x27;,18000,403,3),</span><br><span class="line">(&#x27;郑人予&#x27;,&#x27;female&#x27;,19,&#x27;20140512&#x27;,&#x27;operation&#x27;,17000,403,3);</span><br></pre></td></tr></table></figure></li><li>如果存在库可导入<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 &lt; test.sql</span><br></pre></td></tr></table></figure></li><li>单条件查询<br>从employee中查询post字段为sale的数据，显示emp_name字段数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_name from employee where post=&#x27;sale&#x27;;</span><br></pre></td></tr></table></figure></li><li>多条件查询<br>从employee中查询post字段为teacher和salary字段大于10000的数据，显示emp_name字段数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_name from employee where post=&#x27;teacher&#x27; and salary&gt;10000;</span><br></pre></td></tr></table></figure>BETWEEN AND<br>从employee中查询salary字段为10000到20000的数据，显示emp_name和salary字段数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_name,salary from employee where salary between 10000 and 20000;</span><br></pre></td></tr></table></figure>IS NULL(判断某个字段是否为NULL不能用等号，需要用IS，空格是空字符串)<br>从employee中查询post_comment为空的数据，显示emp_name和post_name字段数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_name,post_comment from employee where post_comment is null;</span><br></pre></td></tr></table></figure>从employee表中查询post_comment为不为空的数据，显示emp_name和post_name字段数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_name,post_comment from employee where post_comment is not null;</span><br></pre></td></tr></table></figure>IN集合<br>从employee表中查询salary为3000，3500，4000，9000的数据，显示emp_name和salary字段数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select emp_name,salary from employee where salary=3000 or salary=3500 or salary=4000 or salary=9000 ;</span><br><span class="line">select emp_name,salary from employee where salary in (3000,3500,4000,9000);</span><br></pre></td></tr></table></figure>从employee表中查询salary不为3000，3500，4000，9000的数据，显示emp_name和<br>salary字段数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select emp_name,salary from employee where salary not in (3000,3500,4000,9000);</span><br></pre></td></tr></table></figure>LIKE<br>从employee表中查询emp_name里开头是eg的数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employee where emp_name like &#x27;eg%&#x27;;</span><br></pre></td></tr></table></figure>group by<br>从employee表中按post分组，用post字段显示数据（们按照post字段分组，那么select查询的字段只能是post）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select post from employee group by post;</span><br></pre></td></tr></table></figure>从employee表中按post分组，用post和group_concat(emp_name)字段显示数据（想要<br>获取组内的其他相关信息，需要借助函数GROUP_CONCAT<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select post,group_concat(emp_name) from employee group by post;</span><br></pre></td></tr></table></figure></li><li>聚合函数<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 统计employee表中所有行数数据</span><br><span class="line">select count(*) from employee;</span><br><span class="line"># 统计employee表中所有depart_id=1字段行数数据</span><br><span class="line">select count(*) from employee where depart_id=1;</span><br><span class="line"># 统计employee表中salary字段最大的数据</span><br><span class="line">select max(salary) from employee;</span><br><span class="line"># 统计employee表中salary字段最小的数据</span><br><span class="line">select min(salary) from employee</span><br><span class="line"># 统计employee表中salary字段平均的数据</span><br><span class="line">select avg(salary) from employee;</span><br><span class="line"># 统计employee表中salary字段总和的数据</span><br><span class="line">select sum(salary) from employee;</span><br></pre></td></tr></table></figure><h4 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h4></li><li>建表和数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># department表</span><br><span class="line">create table department(</span><br><span class="line">id int,</span><br><span class="line">name varchar(20)</span><br><span class="line">);</span><br><span class="line"># employee2表</span><br><span class="line">create table employee2(</span><br><span class="line">id int primary key auto_increment,</span><br><span class="line">name varchar(20),</span><br><span class="line">sex enum(&#x27;male&#x27;,&#x27;female&#x27;) not null default &#x27;male&#x27;,</span><br><span class="line">age int,</span><br><span class="line">dep_id int</span><br><span class="line">);</span><br><span class="line"># department数据</span><br><span class="line">insert into department values</span><br><span class="line">(200,&#x27;技术&#x27;),</span><br><span class="line">(201,&#x27;人力资源&#x27;),</span><br><span class="line">(202,&#x27;销售&#x27;),</span><br><span class="line">(203,&#x27;运营&#x27;);</span><br><span class="line"># employee2数据</span><br><span class="line">insert into employee2(name,sex,age,dep_id) values</span><br><span class="line">(&#x27;egon&#x27;,&#x27;male&#x27;,18,200),</span><br><span class="line">(&#x27;alex&#x27;,&#x27;female&#x27;,48,201),</span><br><span class="line">(&#x27;wupeiqi&#x27;,&#x27;male&#x27;,38,201),</span><br><span class="line">(&#x27;yuanhao&#x27;,&#x27;female&#x27;,28,202),</span><br><span class="line">(&#x27;liwenzhou&#x27;,&#x27;male&#x27;,18,200),</span><br><span class="line">(&#x27;jingliyang&#x27;,&#x27;female&#x27;,18,204);</span><br></pre></td></tr></table></figure></li><li>交叉连接<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from employee2,department;</span><br></pre></td></tr></table></figure></li><li>内连接（只保留两张表都存在的数据）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 筛选除俩个表中dep_id和id相等的数据</span><br><span class="line">select employee2.id,employee2.name,employee2.age,employee2.sex,department.name</span><br><span class="line">from employee2 inner join department on employee2.dep_id=department.id;</span><br><span class="line">select employee2.id,employee2.name,employee2.age,employee2.sex,department.name</span><br><span class="line">from employee2,department where employee2.dep_id=department.id;</span><br></pre></td></tr></table></figure></li><li>左连接,右连接,全部连接<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 交叉连接后优先显示左表全部记录</span><br><span class="line">select employee2.id,employee2.name,department.name as depart_name from</span><br><span class="line">employee2 left join department on employee2.dep_id=department.id;</span><br><span class="line"># 交叉连接后优先显示右表全部记录</span><br><span class="line">select employee2.id,employee2.name,department.name as depart_name from</span><br><span class="line">employee2 right join department on employee2.dep_id=department.id;</span><br><span class="line"># 显示左右两个表全部记录</span><br><span class="line">select * from employee2 left join department on employee2.dep_id =</span><br><span class="line">department.id union select * from employee2 right join department on employee2.dep_id = department.id;</span><br></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4>子查询是将一个查询语句嵌套在另一个查询语句中<br>内层查询语句的查询结果，可以为外层查询语句提供查询条件<br>子查询中可以包含：IN、NOT IN、ANY、ALL、EXISTS 和 NOT EXISTS等关键字<br>还可以包含比较运算符：&#x3D; 、 !&#x3D;、&gt; 、&lt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在employee2表中平均年龄在25岁以上的dep_id与department中的id相等部门名</span><br><span class="line">select id,name from department where id in (select dep_id from employee2 group by dep_id having avg(age) &gt; 25);</span><br><span class="line"># 在employee2表中平均年龄小于employee2中的age的数据</span><br><span class="line">select name,age from employee2 where age &gt; (select avg(age) from employee);</span><br><span class="line"># 查询department表中存在dept_id=200的数据，为真显示employee数据，为假为empty</span><br><span class="line">select * from employee where exists (select id from department where id=200);</span><br></pre></td></tr></table></figure><h2 id="索引管理"><a href="#索引管理" class="headerlink" title="索引管理"></a>索引管理</h2>primary key，unique，联合唯一都是索引，索引就是加速查找和约束的功能<h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3></li><li>哈希索引<br>使用某种哈希函数实现key-&gt;value 映射的索引结构<br>适用于等值检索，通过一次哈希计算即可定位数据的位置<br>检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引<br>不能利用部分索引键查询<br>哈希索引不支持范围查找和排序的功能</li><li>B+TREE索引<br>关系型数据库最常用的索引结构，方便了数据的查询操作<br>最常用的InnoDB引擎<br>B+Tree索引能够加快数据的查询速度;B+Tree更适合进行范围查找；</li><li>FULLTEXT索引<br>用来查找文本中的关键字，而不是直接与索引中的值相比较<h3 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 创建表时(index没有key)</span><br><span class="line">create table 表名 (</span><br><span class="line">字段名1 数据类型 约束条件,</span><br><span class="line">字段名2 数据类型 约束条件,</span><br><span class="line">index 索引名(字段名);</span><br><span class="line">#已存在的表</span><br><span class="line">create index 索引名 on 表名(字段名);</span><br><span class="line">#alter已存在的表</span><br><span class="line">alter table 表名 add index 索引名(字段名);</span><br><span class="line">#删除索引</span><br><span class="line">drop index 索引名 on 表名字;</span><br><span class="line"># 查看索引</span><br><span class="line">show create table 表名字;</span><br></pre></td></tr></table></figure><h3 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h3>存储，提取数据，负责根据SQL层执行的结果，从磁盘上拿数据，将16进制的磁盘数据，交由SQL结构化化成表<h4 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h4></li><li><strong>InnoDB</strong><br>⽀持事务，主要⾯向在线事务（OLTP）处理的应⽤；<br>⾏锁设计、⽀持外键、⽀持类似于Oracle的⾮锁定读；<br>从5.5.8版本开始，InnoDB存储引擎是默认的存储引擎；<br>将数据放在⼀个逻辑的表空间中，这个表空间就像⿊盒⼀样由InnoDB存储引擎⾃身进⾏管理；</li><li><strong>MyISAM</strong><br>不⽀持事务、表锁设计、⽀持全⽂索引，主要⾯向OLAP数据库应⽤；<br>它的缓冲池只缓存索引⽂件，不缓存数据⽂件；<br>MyISAM存储引擎表由MYD和MYI组成，MYD⽤来存放数据⽂件，MYI⽤来存放索引⽂件。</li><li>MEMORY<br>在内存中存储所有数据，应用于对非关键数据由快速查找的场景。<br>Memory类型的表访问数据非常快，因为它的数据 是存放在内存中的，并且默认使用HASH索引，但是一旦服务关闭，表中的数据就会丢失<br>应用场景：快速定位记录</li><li>Maria存储引擎<br>新开发的引擎，设计主要⽬标是⽤来取代原来的MyISAM存储引擎，从⽽成为MySQL的默认存储引 擎；<br>⽀持缓存数据和索引⽂件，应⽤了⾏锁设计，提供了MVCC功能，⽀持事务和⾮事务安全的选项，以及 更好的BLOB字符类型的处理性能。<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看当前MySQL支持的存储引擎类型</span><br><span class="line">show engines</span><br><span class="line">#查看innodb的表有哪些</span><br><span class="line">select table_schema,table_name,engine from information_schema.tables where engine=&#x27;innodb&#x27;;</span><br><span class="line">#查看myisam的表有哪些</span><br><span class="line">select table_schema,table_name,engine from information_schema.tables where engine=&#x27;myisam&#x27;;</span><br></pre></td></tr></table></figure><h5 id="innodb和myisam之间区别"><a href="#innodb和myisam之间区别" class="headerlink" title="innodb和myisam之间区别"></a>innodb和myisam之间区别</h5>InnoDB 是 MySQL 上第一个提供外键约束的数据存储引擎，除了提供事务处理外，InnoDB还支持行锁，提供和 Oracle 一样的一致性的不加锁读取，能增加并发读的用户数量并提高性能，不会增加锁的数量。InnoDB 的设计目标是处理大容量数据时最大化性能，它的 CPU 利用率是其他所有基于磁盘的关系数据库引擎中最有效率的。<br>MyISAM数据表，皆由存储在硬盘上的3个文件所组成，每个文件都以数据表名称为文件主名，并搭配不同扩展名区分文件类型：<br>.frm－－存储数据表定义，此文件非MyISAM引擎的一部分。<br>.MYD－－存放真正的数据。<br>.MYI－－存储索引信息。</li><li>InnoDB支持事务，MyISAM不支持，对于InnoDB每一条SQL语言都默认封装成事务，自动提交，这样会影响速度，所以最好把多条SQL语言放在begin和commit之间，组成一个事务；</li><li>InnoDB支持外键，而MyISAM不支持。对一个包含外键的InnoDB表转MYISAM会失败；</li><li>InnoDB是聚集索引，使用B+Tree作为索引结构，数据文件是和（主键）索引绑在一起的（表数据文件本身就是按B+Tree组织的一个索引结构），必须要有主键，通过主键索引效率很高。但是辅助索引需要两次查询，先查询到主键，然后再通过主键查询到数据。因此，主键不应该过大，因为主键太大，其他索引也都会很大。</li><li>InnoDB不保存表的具体行数，执行select count( * ) from table时需要全表扫描。而MyISAM用一个变量保存了整个表的行数，执行上述语句时只需要读出该变量即可，速度很快（注意不能加有任何WHERE条件）；</li><li>Innodb不支持全文索引，而MyISAM支持全文索引，在涉及全文索引领域的查询效率上MyISAM速度更快高；PS：5.7以后的InnoDB支持全文索引了</li><li>MyISAM表格可以被压缩后进行查询操作</li><li>InnoDB支持表、行(默认)级锁，而MyISAM支持表级锁<br>InnoDB的行锁是实现在索引上的，而不是锁在物理行记录上。潜台词是，如果访问没有命中索引，也无法使用行锁，将要退化为表锁。</li><li>InnoDB表必须有唯一索引（如主键）（用户没有指定的话会自己找&#x2F;生产一个隐藏列Row_id来充当默认主键），而Myisam可以没有</li><li>Innodb存储文件有frm、ibd，而Myisam是frm、MYD、MYI<br>Innodb：frm是表定义文件，ibd是数据文件<br>Myisam：frm是表定义文件，myd是数据文件，myi是索引文件<h4 id="相关操作"><a href="#相关操作" class="headerlink" title="相关操作"></a>相关操作</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 查看MySQL支持的存储引擎</span><br><span class="line">show engines\G;</span><br><span class="line"># 查看默认存储引擎</span><br><span class="line">SELECT @@default_storage_engine;(InnoDB)</span><br><span class="line">#在建表时指定存储引擎</span><br><span class="line">create table tablename(id bigint(12),name varchar(200))ENGINE=MyISAM;</span><br><span class="line"># 使用alter table语句，修改一个已经存在的表的存储引擎</span><br><span class="line">alter table tablename engine = innodb;</span><br><span class="line">#在配置文件中指定</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><h4 id="模拟存储引擎切换"><a href="#模拟存储引擎切换" class="headerlink" title="模拟存储引擎切换"></a>模拟存储引擎切换</h4>将现有的MYISAM引擎替换为Innodb，将版本替换为5.6.38</li><li>备份<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysqldump -uroot -p123 -A --triggers -R --master-data=2 &gt;/tmp/full.sql 二进制文件使用</span></span><br><span class="line">mysqldump -uroot -p123 -A --triggers -R &gt;/tmp/full.sql</span><br></pre></td></tr></table></figure></li><li>处理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s#ENGINE=MYISAM#ENGINE=INNODB#g&#x27;</span> /tmp/full.sql</span><br></pre></td></tr></table></figure></li><li>将修改后的备份恢复到新库<h4 id="模拟数据库服务损坏"><a href="#模拟数据库服务损坏" class="headerlink" title="模拟数据库服务损坏"></a>模拟数据库服务损坏</h4></li><li>拷贝库目录到新库中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -r /application/mysql/data/world/ /data/3307/data/</span><br></pre></td></tr></table></figure></li><li>启动新数据库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld_safe --defaults-file=/data/3307/my.cnf &amp;</span><br></pre></td></tr></table></figure></li><li>删除独立表空间文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">select * from city;</span><br><span class="line">show create table world.city;</span><br><span class="line">alter table city_new discard tablespace;</span><br></pre></td></tr></table></figure></li><li>拷贝旧独立表空间文件<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /data/3307/data/world/city.ibd /data/3307/data/world/city_new.ibd</span><br></pre></td></tr></table></figure></li><li>授权<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql *</span><br></pre></td></tr></table></figure></li><li>导入表空间<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table city_new import tablespace;</span><br></pre></td></tr></table></figure><h2 id="MySQL事务"><a href="#MySQL事务" class="headerlink" title="MySQL事务"></a>MySQL事务</h2></li><li>定义：主要针对DML语句（update，delete，insert）的执行步骤，这些步骤视为一个执行单元。</li><li>控制语句<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION（或 BEGIN）：显式开始一个新事务</span><br><span class="line">SAVEPOINT：分配事务过程中的一个位置，以供将来引用或回滚</span><br><span class="line">COMMIT：永久记录当前事务所做的更改</span><br><span class="line">ROLLBACK：取消当前事务所做的更改</span><br><span class="line">ROLLBACK TO SAVEPOINT：取消在 savepoint 之后执行的更改</span><br><span class="line">RELEASE SAVEPOINT：删除 savepoint 标识符</span><br><span class="line">SET AUTOCOMMIT：为当前连接禁用或启用默认 autocommit 模式</span><br></pre></td></tr></table></figure></li><li>提交的关闭<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 临时关闭</span><br><span class="line">mysql&gt; set autocommit=0;</span><br><span class="line"># 永久关闭</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">autocommit=0</span><br></pre></td></tr></table></figure></li><li>事务隐式提交情况<ul><li>行期间，手工执行begin的时候会自动提交上个事务</li><li>行期间，加入DDL、DCL操作会自动提交上个事务</li><li>行期间，执行锁定语句（lock tables、unlock tables）</li><li>load data infile&#x2F;source</li><li>select for update</li><li>autocommit&#x3D;1<br>现在开启事务时，不需要手工begin，只要输入的是DML语句，就会自动开启事务。<h3 id="事务ACID特性"><a href="#事务ACID特性" class="headerlink" title="事务ACID特性"></a>事务ACID特性</h3></li></ul></li><li>Atomic（原子性）<br>所有语句作为一个单元全部成功执行或全部取消。</li><li>Consistent（一致性）<br>如果数据库在事务开始时处于一致状态，则在执行该事务期间将保留一致状态。<br>在事务内看到的数据状态都是一样的。</li><li>Isolated（隔离性）<br>事务之间不相互影响。</li><li>Durable（持久性）<br>事务成功完成后，所做的所有更改都会准确地记录在数据库中。所做的更改不会丢失。<h3 id="事务日志redo–重做日志"><a href="#事务日志redo–重做日志" class="headerlink" title="事务日志redo–重做日志"></a>事务日志redo–重做日志</h3>在mysql中，如果修改了数据，那么事务提交前，首先会被记录成redo日志写入磁盘，<strong>等到事务提交时，再把新数据写入磁盘</strong>。<br>事务ACID过程中，实现的是“D”持久化的作用。<br>redo文件位置：&#x2F;application&#x2F;mysql&#x2F;data&#x2F;ib_logfile0<h4 id="redo工作过程"><a href="#redo工作过程" class="headerlink" title="redo工作过程"></a>redo工作过程</h4></li></ul><hr><p><img src="/image/Mysql/5.jpg" alt=" redo工作过程"><br><img src="/image/Mysql/6.jpg" alt=" redo工作过程"></p><hr><h3 id="事务日志undo–回滚日志"><a href="#事务日志undo–回滚日志" class="headerlink" title="事务日志undo–回滚日志"></a>事务日志undo–回滚日志</h3><p>事务ACID过程中，实现的是“A”原子性的作用。当然C和I的特性也和undo有关<br>undo文件位置：&#x2F;application&#x2F;mysql&#x2F;data&#x2F;ibdata1</p><h4 id="undo工作过程"><a href="#undo工作过程" class="headerlink" title="undo工作过程"></a>undo工作过程</h4><hr><p><img src="/image/Mysql/7.jpg" alt=" undo工作过程"></p><hr><h3 id="事务锁"><a href="#事务锁" class="headerlink" title="事务锁"></a>事务锁</h3><p>事务ACID特性过程中，“锁”和“隔离级别”一起来实现“I”隔离性的作用。</p><ul><li>排他锁：保证在多事务操作时，数据的一致性。</li><li>共享锁：保证在多事务工作期间，数据查询时不会被阻塞。</li><li>多版本并发控制（MVCC）<ul><li>只阻塞修改类操作，不阻塞查询类操作</li><li>乐观锁的机制（谁先提交谁为准）</li></ul></li><li>锁的粒度<ul><li>MyIsam：低并发锁（表级锁）</li><li>Innodb：高并发锁（行级锁）<h4 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h4></li></ul></li><li>READ UNCOMMITTED（读未提交）<br>允许事务查看其他事务所进行的未提交更改</li><li>READ COMMITTED<br>允许事务查看其他事务所进行的已提交更改</li><li><strong>REPEATABLE READ</strong><br>确保每个事务的 SELECT 输出一致<br>InnoDB 的默认级别</li><li>SERIALIZABLE<br>将一个事务的结果与其他事务完全隔离，可串行化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#查看隔离级别</span><br><span class="line">mysql&gt; show variables like &#x27;%iso%&#x27;;</span><br><span class="line">***</span><br><span class="line">#修改隔离级别为RU</span><br><span class="line">transaction_isolation=read-uncommit</span><br><span class="line">#修改隔离级别为RC</span><br><span class="line">transaction_isolation=read-committed</span><br><span class="line">***</span><br></pre></td></tr></table></figure><h2 id="MySQL日志"><a href="#MySQL日志" class="headerlink" title="MySQL日志"></a>MySQL日志</h2><h3 id="错误日志"><a href="#错误日志" class="headerlink" title="错误日志"></a>错误日志</h3>记录mysql数据库的一般状态信息及报错信息，是我们对于数据库常规报错处理的常用日志</li><li>位置：$MYSQL_HOME&#x2F;data&#x2F;</li><li>默认开启<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果错误日志文件不在，需要手动创建，不然mysql启动会报错</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">[mysqld]</span><br><span class="line">log_error=/application/mysql/data/error_log.err</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">show variables like <span class="string">&#x27;log_error&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="一般查询日志"><a href="#一般查询日志" class="headerlink" title="一般查询日志"></a>一般查询日志</h3>记录mysql所有执行成功的SQL语句信息，可以做审计用，但是很少开启。</li><li>位置：$MYSQL_HOME&#x2F;data&#x2F;<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">[mysqld]</span><br><span class="line">general_log=on</span><br><span class="line">general_log_file=/application/mysql/data/general_log.log</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">show variables like <span class="string">&#x27;%gen%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="二进制日志"><a href="#二进制日志" class="headerlink" title="二进制日志"></a><strong>二进制日志</strong></h3>记录已提交的DML事务语句，并拆分为多个事件（event）来进行记录<br>记录所有DDL、DCL等语句</li><li>二进制日志模式<br>statement：语句模式<br>优点：简单明了，容易被看懂，就是sql语句，记录时不需要太多的磁盘空间<br>缺点：记录不够严谨<br><strong>row：行模式，即数据行的变化过程</strong><br>优点：记录更加严谨<br>缺点：有可能会需要更多的磁盘空间，不太容易被读懂<br>mixed：以上两者的混合模式。</li><li>开启<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">********************</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line"><span class="comment"># :在mysql5.7中开启binlog必须要加上server-id</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">binlog_format=row</span><br><span class="line">server_id=1</span><br></pre></td></tr></table></figure></li><li>查看<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll /application/mysql/data/</span><br><span class="line">mysql&gt; show binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.00000x&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>事件<br>在binlog中最小的记录单元为event<br>一个事务会被拆分成多个事件（event）<br>每个event都有一个开始位置（start position）和结束位置（stop position）。<br>所谓的位置就是event对整个二进制的文件的相对位置。<br>对于一个二进制日志中，前120个position是文件格式信息预留空间。<br>MySQL第一个记录的事件，都是从120开始的。<h4 id="row模式下二进制日志分析及数据恢复"><a href="#row模式下二进制日志分析及数据恢复" class="headerlink" title="row模式下二进制日志分析及数据恢复"></a>row模式下二进制日志分析及数据恢复</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 查看binlog信息</span><br><span class="line">show master status; # Position:120</span><br><span class="line">create database binlog;</span><br><span class="line">use binlog;</span><br><span class="line">create table binlog_table(id int);</span><br><span class="line">insert into binlog_table values(1);</span><br><span class="line">insert into binlog_table values(2);</span><br><span class="line">show master status; # Position:322</span><br><span class="line">insert into binlog_table values(3);</span><br><span class="line">show master status; # Position:524</span><br><span class="line"># 删除数据1</span><br><span class="line">delete from binlog_table where id=1;</span><br><span class="line">show master status; # Position:726</span><br><span class="line"># 更改数据2为22</span><br><span class="line">update binlog_table set id=22 where id=2;</span><br><span class="line"># 删表</span><br><span class="line">drop table binlog_table;</span><br><span class="line"># 删库</span><br><span class="line">drop database binlog;</span><br></pre></td></tr></table></figure></li><li>恢复数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 查看binlog事件</span><br><span class="line">show binlog events in &#x27;mysql-bin.000001&#x27;;</span><br><span class="line"># 使用mysqlbinlog来查看</span><br><span class="line">mysqlbinlog /application/mysql/data/mysql-bin.000013|grep -v SET</span><br><span class="line"># 查看二进制日志后，发现删除开始位置是1063</span><br><span class="line">mysqlbinlog --start-position=120 --stop-position=1063 /application/mysql/data/mysql-bin.000001 &gt; /tmp/binlog.sql</span><br><span class="line"># 临时关闭binlog</span><br><span class="line">set sql_log_bin=0;</span><br><span class="line"># 执行sql文件</span><br><span class="line">source /tmp/binlog.sql</span><br><span class="line"># 查看删除的表</span><br><span class="line">select * from binlog_table;</span><br></pre></td></tr></table></figure><h4 id="删除二进制日志"><a href="#删除二进制日志" class="headerlink" title="删除二进制日志"></a>删除二进制日志</h4>基于上一次全备前的可以选择删除<br>在存储能力范围内，能多保留则多保留</li><li>根据存在时间删除日志<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#临时生效</span></span><br><span class="line">SET GLOBAL expire_logs_days = 7;</span><br><span class="line"><span class="comment">#永久生效</span></span><br><span class="line">[root@db01 data]<span class="comment"># vim /etc/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">expire_logs_days = 7</span><br><span class="line"><span class="comment"># 使用purge命令删除</span></span><br><span class="line">PURGE BINARY LOGS BEFORE now() - INTERVAL 3 day;</span><br><span class="line"><span class="comment"># 根据文件名删除</span></span><br><span class="line">PURGE BINARY LOGS TO <span class="string">&#x27;mysql-bin.000010&#x27;</span>;</span><br><span class="line"><span class="comment"># 用reset maste,将binlog文件从1从头开始</span></span><br><span class="line">mysql&gt; reset master;</span><br></pre></td></tr></table></figure><h3 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h3>将mysql服务器中影响数据库性能的相关SQL语句记录到日志文件</li><li>默认位置：MYSQL_HOME&#x2F;data&#x2F;MYSQLHOME&#x2F;data&#x2F;$hostname-slow.log</li><li>开启（默认不开启）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">*****************************</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#指定是否开启慢查询日志</span></span><br><span class="line">slow_query_log = 1</span><br><span class="line"><span class="comment">#指定慢日志文件存放位置（默认在data）</span></span><br><span class="line">slow_query_log_file=/application/mysql/data/slow.log</span><br><span class="line"><span class="comment">#设定慢查询的阀值(默认10s)</span></span><br><span class="line">long_query_time=0.05</span><br><span class="line"><span class="comment">#不使用索引的慢查询日志是否记录到索引</span></span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line"><span class="comment">#查询检查返回少于该参数指定行的SQL不被记录到慢查询日志(没啥用)</span></span><br><span class="line">min_examined_row_limit=100</span><br></pre></td></tr></table></figure></li><li>mysqldumpslow命令分析慢查询日志<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -s:按照何种方式排序，c、t、l、r分别是按照记录次数、时间、查询时间、返回的记录数来排序，ac、at、al、ar，表示相应的倒叙</span></span><br><span class="line"><span class="comment"># -t:为返回前面多少条的数据</span></span><br><span class="line"><span class="comment"># -g:正则匹配模式，大小写不敏感</span></span><br><span class="line"><span class="variable">$PATH</span>/mysqldumpslow -s c -t x /application/mysql/data/slow.log</span><br><span class="line"><span class="comment">#得到按照时间排序的前10条里面含有左连接的查询语句</span></span><br><span class="line"><span class="variable">$PATH</span>/mysqldumpslow -s t -t 10 -g <span class="string">&quot;left join&quot;</span> /application/mysql/data/slow.log</span><br></pre></td></tr></table></figure></li><li>第三方（扩展）：<br>慢日志分析工具： <a href="https://www.percona.com/downloads/percona-toolkit/LATEST/">https://www.percona.com/downloads/percona-toolkit/LATEST/</a><br>可视化代码： <a href="https://github.com/box/Anemometer">https://github.com/box/Anemometer</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.percona.com/downloads/percona.toolkit/3.3.1/binary/redhat/7/x86_64/percona-toolkit-3.3.1-1.el7.x86_64.rpm</span><br><span class="line">yum localinstall -y percona-toolkit-3.3.1-1.el7.x86_64.rpm</span><br><span class="line">pt-query-digest /application/mysql/data/slow.log</span><br></pre></td></tr></table></figure></li></ul><hr><p><img src="/image/Mysql/8.jpg" alt="Anemometer"></p><hr><h2 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h2><h3 id="备份的类型"><a href="#备份的类型" class="headerlink" title="备份的类型"></a>备份的类型</h3><ul><li>冷备份<br>这些备份在用户不能访问数据时进行，因此无法读取或修改数据。这些脱机备份会阻止执行任<br>何使用数据的活动。这些类型的备份不会干扰正常运行的系统的性能。但是，对于某些应用程<br>序，会无法接受必须在一段较长的时间里锁定或完全阻止用户访问数据。</li><li>温备份<br>这些备份在读取数据时进行，但在多数情况下，在进行备份时不能修改数据本身。这种中途备<br>份类型的优点是不必完全锁定最终用户。但是，其不足之处在于无法在进行备份时修改数据<br>集，这可能使这种类型的备份不适用于某些应用程序。在备份过程中无法修改数据可能产生性<br>能问题。</li><li>热备份<br>这些动态备份在读取或修改数据的过程中进行，很少中断或者不中断传输或处理数据的功能。<br>使用热备份时，系统仍可供读取和修改数据的操作访问。<h3 id="备份的方式"><a href="#备份的方式" class="headerlink" title="备份的方式"></a>备份的方式</h3></li><li>逻辑备份<ul><li>binlog</li><li>into outfile<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">****</span><br><span class="line">[mysqld]</span><br><span class="line">secure_file_priv=/tmp</span><br><span class="line">mysql&gt; select * from database.table into outfile <span class="string">&#x27;/tmp/test.csv&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>mysqldump</li><li>replication</li></ul></li><li>物理备份<ul><li>Xtrabackup<h3 id="备份工具"><a href="#备份工具" class="headerlink" title="备份工具"></a>备份工具</h3></li></ul></li><li>mysqldump（逻辑）<br>mysql原生自带很好用的逻辑备份工具</li><li>mysqlbinlog（逻辑）<br>实现binlog备份的原生态命令</li><li>xtrabackup（物理）<br>precona公司开发的性能很高的物理备份工具<h4 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h4>mysqldump在备份和恢复时都需要MySQL实例启动为前提<br>一般数据量级100G以内，大约15-30分钟可以恢复（PB、EB就需要考虑别的方式）<br>mysqldump是<strong>以覆盖的形式恢复数据的</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -A, --all-databases：全库备份</span></span><br><span class="line">mysqldump -uroot -p123456 -A &gt; /backup/full.sql</span><br><span class="line"><span class="comment"># -B：指定库备份</span></span><br><span class="line">mysqldump -uroot -p123 -B db1 &gt; /backup/db1.sql</span><br><span class="line"><span class="comment"># -F：flush logs在备份时自动刷新binlog（不怎么常用）</span></span><br><span class="line">mysqldump -uroot -p123 -A -R –triggers -F &gt; /backup/full_2.sql</span><br><span class="line"><span class="comment"># -d：仅表结构</span></span><br><span class="line"><span class="comment"># -t：仅数据</span></span><br><span class="line"><span class="comment"># -R, --routines：备份存储过程和函数数据,--triggers：备份触发器数据</span></span><br><span class="line">mysqldump -uroot -p123 -A -R --triggers &gt; /backup/full_2.sql</span><br><span class="line"><span class="comment"># -x：锁表备份（myisam温备份）,--single-transaction：快照备份</span></span><br><span class="line">mysqldump -uroot -p123 -A -R --triggers --master-data=2 --single-transaction&gt;/backup/full.sql</span><br><span class="line">mysqldump -uroot -p123 -A -R --triggers --single-transaction&gt;/backup/full.sql</span><br><span class="line"><span class="comment"># gzip:压缩备份</span></span><br><span class="line">mysqldump -uroot -p123 -A -R --triggers --master-data=2 –single-transaction|gzip&gt;/backup/full.sql.gz</span><br><span class="line">gzip -d /backup/full.sql.gz</span><br><span class="line">zcat /backup/full.sql.gz &gt; linshi.sql</span><br><span class="line"><span class="comment"># 常用的热备份备份语句</span></span><br><span class="line">mysqldump -uroot -p3306 -A -R --triggers --master-data=2 --single-transaction | gzip &gt; /tmp/full_$(<span class="built_in">date</span> +%F).sql.gz</span><br><span class="line"><span class="comment"># mysqldump恢复</span></span><br><span class="line"><span class="comment">## 库内恢复操作</span></span><br><span class="line"><span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line"><span class="built_in">source</span> /backup/full.sql</span><br><span class="line"><span class="comment">## 库外恢复操作</span></span><br><span class="line">mysql -uroot -p123456 &lt; /backup/full.sql</span><br></pre></td></tr></table></figure><h4 id="模拟：故障恢复"><a href="#模拟：故障恢复" class="headerlink" title="模拟：故障恢复"></a>模拟：故障恢复</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">正在运行的网站系统，MySQL数据库，数据量25G，日业务增量10-15M。</span><br><span class="line">备份策略：每天23：00，计划任务调用mysqldump执行全备脚本</span><br><span class="line">故障时间点：上午10点开发人员误删除一个核心业务表，需要恢复</span><br><span class="line">方案：</span><br><span class="line">停业务避免数据的二次伤害</span><br><span class="line">找一个临时的库，恢复前一天的全备</span><br><span class="line">截取前一天23：00到第二天10点误删除之间的binlog，恢复到临时库</span><br><span class="line">测试可用性和完整性</span><br><span class="line">开启业务前的两种方式</span><br><span class="line">直接使用临时库顶替原生产库，前端应用割接到新库</span><br><span class="line">将误删除的表单独导出，然后导入到原生产环境</span><br></pre></td></tr></table></figure></li><li>故障模拟<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">flush logs; #刷新binlog使内容更清晰</span><br><span class="line">show master status; #查看当前使用的binlog</span><br><span class="line">create database backup; #创建backup库</span><br><span class="line">use backup #进入backup库</span><br><span class="line">create table full select * from world.city; #创建full表</span><br><span class="line">create table full_1 select * from world.city; #创建full_1表</span><br><span class="line">show tables; #查看表</span><br></pre></td></tr></table></figure></li><li>全备份<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -A -R --triggers --master-data=2 --single-transaction|gzip &gt; /tmp/full_$(<span class="built_in">date</span> +%F).sql.gz</span><br></pre></td></tr></table></figure></li><li>模拟数据变化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use backup #进入backup库</span><br><span class="line">create table new select * from mysql.user; #创建new表</span><br><span class="line">create table new_1 select * from world.country; #创建new_1表</span><br><span class="line">show tables; #查看表</span><br><span class="line">select * from full; #查看full表中所有数据</span><br><span class="line">update full set countrycode=&#x27;CHN&#x27; where 1=1; #把full表中所有的countrycode都改成CHN</span><br><span class="line">commit; #提交</span><br><span class="line">delete from full where id&gt;200; #删除id大于200的数据</span><br><span class="line">commit; #提交</span><br></pre></td></tr></table></figure></li><li>故障<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drop table new;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure></li><li>恢复<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 准备临时数据库</span></span><br><span class="line">mysqld_safe --defaults-file=/data/3307/my.cnf &amp;</span><br><span class="line"><span class="comment"># 拷贝数据到新库上</span></span><br><span class="line">scp /tmp/full_2022-07-29.sql.gz root@192.168.189.130:/tmp</span><br><span class="line"><span class="comment"># 解压全备数据文件</span></span><br><span class="line"><span class="built_in">cd</span> /tmp/</span><br><span class="line">gzip -d full_2022-07-29.sql.gz</span><br><span class="line"><span class="comment"># 截取二进制</span></span><br><span class="line"><span class="built_in">head</span> -50 full_2022-07-29.sql |grep -i <span class="string">&#x27;change master to&#x27;</span></span><br><span class="line">show binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.000002&#x27;</span>;</span><br><span class="line">mysqlbinlog -uroot -p123456 --start-position=265897 --stop-position=482654 /application/mysql/data/mysql-bin.000002 &gt; /tmp/inc.sql</span><br><span class="line"><span class="comment"># 发送增量数据到新库</span></span><br><span class="line">scp /tmp/inc.sql root@192.168.189.130:/tmp</span><br></pre></td></tr></table></figure></li><li>新库内恢复数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql -S /data/3307/mysql.sock</span><br><span class="line">mysql&gt; set sql_log_bin=0; #不记录二进制日志</span><br><span class="line">mysql&gt; source /tmp/full_2022-07-29.sql #恢复全备数据</span><br><span class="line">mysql&gt; use backup #进入backup库</span><br><span class="line">mysql&gt; show tables; #查看表</span><br><span class="line">mysql&gt; source /tmp/inc.sql #恢复增量数据</span><br><span class="line">mysql&gt; show tables; #查看表</span><br></pre></td></tr></table></figure></li><li>将故障表导出并恢复到生产<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p123456 -S /data/3307/mysql.sock backup new</span><br><span class="line">&gt; /tmp/new.sql</span><br><span class="line">scp /tmp/new.sql root@192.168.175.10:/tmp/ <span class="comment">#发送到生产库</span></span><br><span class="line">mysql&gt; use backup <span class="comment">#进入backup库</span></span><br><span class="line">mysql&gt; <span class="built_in">source</span> /tmp/new.sql <span class="comment">#在生产库恢复数据</span></span><br><span class="line">mysql&gt; show tables; <span class="comment">#查看表</span></span><br></pre></td></tr></table></figure><h3 id="物理备份（Xtrabackup）"><a href="#物理备份（Xtrabackup）" class="headerlink" title="物理备份（Xtrabackup）"></a>物理备份（Xtrabackup）</h3>对于非innodb表（比如myisam）是直接锁表cp数据文件<br>对于innodb的表（支持事务），不锁表，cp数据页最终以数据文件方式保存下来，并且把redo和undo一并备走，属于热备方式。<br>备份时读取配置文件&#x2F;etc&#x2F;my.cnf，注意socket&#x3D;&#x2F;application&#x2F;mysql&#x2F;tmp&#x2F;mysql.sock文件的位置</li><li>Xtrabackup安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL</span><br><span class="line">wget https://downloads.percona.com/downloads/Percona-XtraBackup-2.4/Percona-XtraBackup-2.4.28/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.28-1.el7.x86_64.rpm</span><br><span class="line">yum localinstall -y percona-xtrabackup-24-2.4.28-1.el7.x86_64.rpm</span><br><span class="line"><span class="built_in">rm</span> -rf percona-xtrabackup-24-2.4.28-1.el7.x86_64.rpm </span><br></pre></td></tr></table></figure><h4 id="全量备份"><a href="#全量备份" class="headerlink" title="全量备份"></a>全量备份</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 避免时间戳，自定义路径名</span></span><br><span class="line">innobackupex --user=root --password=123456 --no-timestamp /backup/full</span><br></pre></td></tr></table></figure></li><li>准备备份<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /backup/full</span><br><span class="line"><span class="comment"># 将redo进行重做，已提交的写到数据文件，未提交的使用undo回滚，模拟CSR的过程</span></span><br><span class="line">innobackupex --user=root --password=123456 --apply-log /backup/full</span><br></pre></td></tr></table></figure></li><li>恢复备份<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysqld stop <span class="comment"># 停库</span></span><br><span class="line"><span class="built_in">cd</span> /application/mysql</span><br><span class="line"><span class="built_in">rm</span> -fr data/</span><br><span class="line">innobackupex --copy-back /backup/full</span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /application/mysql/data/</span><br><span class="line">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure><h4 id="增量备份"><a href="#增量备份" class="headerlink" title="增量备份"></a>增量备份</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --user=root --password=123456 --no-timestamp /backup/full</span><br></pre></td></tr></table></figure></li><li>模拟数据变化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database inc1;</span><br><span class="line">use inc1</span><br><span class="line">create table inc1_tab(id int);</span><br><span class="line">insert into inc1_tab values(1),(2),(3);</span><br><span class="line">commit;</span><br><span class="line">select * from inc1_tab;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --incremental：开启增量备份功能</span></span><br><span class="line"><span class="comment"># --incremental-basedir：上一次备份的路径</span></span><br><span class="line">innobackupex --user=root --password=123456 --no-timestamp --incremental --incremental-basedir=/backup/full/ /backup/inc1</span><br></pre></td></tr></table></figure></li><li>模拟数据变化<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create database inc2;</span><br><span class="line">use inc2</span><br><span class="line">create table inc2_tab(id int);</span><br><span class="line">insert into inc2_tab values(1),(2),(3);</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innobackupex --user=root --password=123456 --no-timestamp --incremental --incremental-basedir=/backup/inc1/ /backup/inc2</span><br></pre></td></tr></table></figure></li><li>增量恢复<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/mysqld stop</span><br><span class="line"><span class="built_in">rm</span> -fr /application/mysql/data/ <span class="comment">#破坏数据</span></span><br><span class="line"><span class="comment"># 全备中apply-log时，只应用redo，不应用undo</span></span><br><span class="line">innobackupex --apply-log --redo-only /backup/full/</span><br><span class="line"><span class="comment"># 合并inc1合并到full中，并且apply-log，只应用redo，不应用undo</span></span><br><span class="line">innobackupex --apply-log --redo-only --incremental-dir=/backup/inc1/ /backup/full/</span><br><span class="line"><span class="comment"># 合并inc2合并到full中，redo和undo都应用</span></span><br><span class="line">innobackupex --apply-log --incremental-dir=/backup/inc2/ /backup/full/</span><br><span class="line"><span class="comment"># 整体full执行apply-log，redo和undo都应用</span></span><br><span class="line">innobackupex --apply-log /backup/full/</span><br><span class="line">innobackupex --copy-back /backup/full/</span><br><span class="line"><span class="built_in">chown</span> -R mysql.mysql /application/mysql/data/</span><br><span class="line">/etc/init.d/mysqld start</span><br></pre></td></tr></table></figure><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2></li></ul><hr><p><img src="/image/Mysql/9.jpg" alt="主从复制"></p><hr><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过change master to语句告诉从库主库的ip,port,user.password,file。<br>从库通过start slave命令开启复制必要的IO线程和SQL线程,从库通过IO线程拿着change master to用户密码相关信息，连接主库，验证合法性,从库连接成功后，会根据binlog的pos问主库，有没有比这个更新的主库接收到从库请求后，比较一下binlog信息，如果有就将最新数据通过dump线程给从库IO线程,从库通过IO线程接收到主库发来的binlog事件，存储到TCP&#x2F;IP缓存中，并返回ACK更新master.info。将TCP&#x2F;IP缓存中的内容存到relay-log中SQL线程读取relay-log.info，读取到上次已经执行过的relay-log位置点，继续执行后续的relay-log日志，执行完成后，更新relay-log.info。</p><h3 id="复制过程"><a href="#复制过程" class="headerlink" title="复制过程"></a>复制过程</h3><ol><li>主服务器上任何的更新操作会被写入到二进制日志文件中</li><li>从服务器上的IO线程：</li><li>检测主服务器的二进制日志文件的变化</li><li>同步主服务器的二进制日志文件到本地的中继日志中</li><li>从服务器上的sql线程负责读取和执行中继日志中的sql语句<h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3></li></ol><ul><li>准备<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld &amp;&amp; systemctl disabled firewalld</span><br><span class="line"><span class="comment"># master配置</span></span><br><span class="line">yum install mariadb-server -y</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">server_id = 1</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">***</span><br><span class="line">systemctl restart mariadb.service</span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="comment"># salve配置</span></span><br><span class="line">yum install mariadb-server -y</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">server_id = 266</span><br><span class="line">***</span><br><span class="line">systemctl restart mariadb.service</span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure></li><li>master库操作<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br><span class="line">grant replication slave on *.* to salve@&#x27;192.168.189.%&#x27; identified by</span><br><span class="line">&#x27;123456&#x27;;</span><br><span class="line">flush tables with read lock; # 只读</span><br><span class="line">flush privileges;</span><br><span class="line">show master status;# 记住position</span><br></pre></td></tr></table></figure></li><li>salve库操作<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">change master to</span><br><span class="line">master_host=&#x27;192.168.189.131&#x27;,master_port=3306,master_user=&#x27;salve&#x27;,master_pa</span><br><span class="line">ssword=&#x27;123456&#x27;,master_log_file=&#x27;mysql-bin.000002&#x27;,master_log_pos=1701;</span><br><span class="line">start slave;</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><h3 id="延时从库"><a href="#延时从库" class="headerlink" title="延时从库"></a>延时从库</h3>普通的主从复制可能存在不足<br>企业中一般会延时3-6小时<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">stop slave; #停止主从</span><br><span class="line">CHANGE MASTER TO MASTER_DELAY = 60; #设置延时为60秒</span><br><span class="line">start slave; #开启主从</span><br><span class="line">stop slave; #停止主从</span><br><span class="line">CHANGE MASTER TO MASTER_DELAY = 0; #设置延时为0</span><br><span class="line">start slave; #开启主从</span><br><span class="line"># 恢复数据,停止主从</span><br><span class="line"># 导出从库数据</span><br><span class="line"># 主库导入数据</span><br></pre></td></tr></table></figure><h3 id="半同步复制"><a href="#半同步复制" class="headerlink" title="半同步复制"></a>半同步复制</h3>从MYSQL5.5开始，支持半同步复制。之前版本的MySQL Replication都是异步（asynchronous）的，主库在执行完一些事务后，是不会管备库的进度的。如果备库不幸落后，而更不幸的是主库此时又出现Crash（例如宕机），这时备库中的数据就是不完整的。简而言之，在主库发生故障的时候，我们无法使用备库来继续提供数据一致的服务了。<br>半同步复制一定程度上保证提交的事务已经传给了至少一个备库。</li><li>rpl_semi_sync_master_timeout&#x3D;milliseconds<br>设置此参数值（ms）,为了防止半同步复制在没有收到确认的情况下发生堵塞，如果<br>Master在超时之前没有收到任何确认，将恢复到正常的异步复制，并继续执行没有半同<br>步的复制操作。</li><li>rpl_semi_sync_master_wait_no_slave&#x3D;{ON|OFF}<br>如果一个事务被提交,但Master没有任何Slave的连接，这时不可能将事务发送到其它地<br>方保护起来。默认情况下，Master会在时间限制范围内继续等待Slave的连接，并确认该<br>事务已经被正确的写到磁盘上。<br>可以使用此参数选项关闭这种行为，在这种情况下，如果没有Slave连接，Master就会恢<br>复到异步复制。</li><li>安装（主库）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> mysql -uroot -p123456</span><br><span class="line">show global variables like &#x27;have_dynamic_loading&#x27;; #查看是否有动态支持</span><br><span class="line">INSTALL PLUGIN rpl_semi_sync_master SONAME&#x27;semisync_master.so&#x27;; #安装自带插件</span><br><span class="line">SET GLOBAL rpl_semi_sync_master_enabled = 1; #启动插件</span><br><span class="line">SET GLOBAL rpl_semi_sync_master_timeout = 1000; #设置超时</span><br><span class="line">#修改配置文件</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">[mysqld]</span><br><span class="line">rpl_semi_sync_master_enabled=1</span><br><span class="line">rpl_semi_sync_master_timeout=1000</span><br><span class="line">***</span><br><span class="line">#检查安装</span><br><span class="line">show variables like&#x27;rpl%&#x27;;</span><br><span class="line">show global status like &#x27;rpl_semi%&#x27;;</span><br></pre></td></tr></table></figure></li><li>安装（从库）<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 #登录数据库</span><br><span class="line">INSTALL PLUGIN rpl_semi_sync_slave SONAME&#x27;semisync_slave.so&#x27;; #安装slave半同步插件</span><br><span class="line">SET GLOBAL rpl_semi_sync_slave_enabled = 1; #启动插件</span><br><span class="line">stop slave io_thread;</span><br><span class="line">start slave io_thread; #重启io线程使其生效</span><br><span class="line">#编辑配置文件（不需要重启数据库）</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***************</span><br><span class="line">[mysqld]</span><br><span class="line">rpl_semi_sync_slave_enabled =1</span><br></pre></td></tr></table></figure><h2 id="MHA高可用架构"><a href="#MHA高可用架构" class="headerlink" title="MHA高可用架构"></a>MHA高可用架构</h2>简介：<a href="https://www.cnblogs.com/--smile/p/11475380.html">https://www.cnblogs.com/--smile/p/11475380.html</a><br><strong>MHA由两部分组成：MHA Manager（管理节点）和MHA Node（数据节点）。</strong>MHA Manager可以独立部署在一台独立的机器上管理多个Master-Slave集群，也可以部署在一台Slave上。<strong>当Master出现故障时，它可以自动将最新数据的Slave提升为新的Master,然后将所有其他的Slave重新指向新的Master。</strong>整个故障转移过程对应用程序是完全透明的。</li></ul><hr><p><img src="/image/Mysql/10.jpg" alt="MHA架构"></p><hr><ul><li>MHA优点<ul><li>Masterfailover and slave promotion can be done very quickly<br>自动故障转移快</li><li>Mastercrash does not result in data inconsistency<br>主库崩溃不存在数据一致性问题</li><li>Noneed to modify current MySQL settings (MHA works with regular MySQL)<br>不需要对当前mysql环境做重大修改</li><li>Noneed to increase lots of servers<br>不需要添加额外的服务器(仅一台manager就可管理上百个replication)</li><li>Noperformance penalty<br>性能优秀，可工作在半同步复制和异步复制，当监控mysql状态时，仅需要每隔N秒向</li><li>master发送ping包(默认3秒)，所以对性能无影响。你可以理解为MHA的性能和简单的<br>主从复制框架性能一样。</li><li>Works with any storage engine<br>只要replication支持的存储引擎，MHA都支持，不会局限于innodb<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3></li></ul></li></ul><ol><li>把宕机的master二进制日志保存下来。</li><li>找到binlog位置点最新的slave。</li><li>在binlog位置点最新的slave上用relay log（差异日志）修复其它slave。</li><li>将宕机的master上保存下来的二进制日志恢复到含有最新位置点的slave上。</li><li>将含有最新位置点binlog所在的slave提升为master。</li><li>将其它slave重新指向新提升的master，并开启主从复制。<h3 id="MHA工具"><a href="#MHA工具" class="headerlink" title="MHA工具"></a>MHA工具</h3>MHA软件由两部分组成，Manager工具包和Node工具包</li></ol><ul><li>Manager工具包<br>masterha_check_ssh 检查MHA的ssh-key<br>masterha_check_repl 检查主从复制情况<br>masterha_manger 启动MHA<br>masterha_check_status 检测MHA的运行状态<br>masterha_master_monitor 检测master是否宕机<br>masterha_master_switch 手动故障转移<br>masterha_conf_host 手动添加server信息<br>masterha_secondary_check 建立TCP连接从远程服务器<br>masterha_stop 停止MHA</li><li>Node工具包<br>save_binary_logs 保存宕机的master的binlog<br>apply_diff_relay_logs 识别relay log的差异<br>filter_mysqlbinlog 防止回滚事件<br>purge_relay_logs 清除中继日志<h3 id="GTID的主从复制"><a href="#GTID的主从复制" class="headerlink" title="GTID的主从复制"></a>GTID的主从复制</h3>GTID概念：<a href="https://blog.csdn.net/m0_58805648/article/details/125615409">https://blog.csdn.net/m0_58805648/article/details/125615409</a></li><li>主库 db1<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改db1配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=1      <span class="comment">#主库server-id为1，从库不等于1</span></span><br><span class="line">log_bin=mysql-bin <span class="comment">#开启binlog日志</span></span><br><span class="line">skip-name-resolv  <span class="comment">#跳过域名解析</span></span><br><span class="line">***</span><br><span class="line">systemctl restart mysqld.service </span><br></pre></td></tr></table></figure></li><li>从库 db2，db3<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改db2配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=5      <span class="comment">#主库server-id为1，从库必须大于1</span></span><br><span class="line">log_bin=mysql-bin <span class="comment">#开启binlog日志</span></span><br><span class="line">***</span><br><span class="line">systemctl restart mysqld.service </span><br><span class="line"><span class="comment"># 修改db3配置文件</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">***</span><br><span class="line">[mysqld]</span><br><span class="line">server_id=10</span><br><span class="line">log_bin=mysql-bin</span><br><span class="line">systemctl restart mysqld.service </span><br></pre></td></tr></table></figure></li><li>创建主从复制用户（所有DB）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br><span class="line">grant replication slave on *.* to slave@<span class="string">&#x27;192.168.189.%&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>开启GTID（所有db）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">show global variables like <span class="string">&#x27;%gtid%&#x27;</span>; <span class="comment"># 没开启之前先看一下GTID的状态</span></span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| binlog_gtid_simple_recovery     | OFF   |</span><br><span class="line">| enforce_gtid_consistency        | OFF   |</span><br><span class="line">| gtid_executed                   |       |</span><br><span class="line">| gtid_mode                       | OFF   |</span><br><span class="line">| gtid_owned                      |       |</span><br><span class="line">| gtid_purged                     |       |</span><br><span class="line">| simplified_binlog_gtid_recovery | OFF   |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">*************************************</span><br><span class="line">[mysqld]</span><br><span class="line">gtid_mode=ON</span><br><span class="line">log_slave_updates       <span class="comment">#开启slave binlog同步</span></span><br><span class="line">enforce_gtid_consistenc <span class="comment">#不允许任何违反GTID一致性</span></span><br><span class="line">*************************************</span><br><span class="line"><span class="comment"># 修改UUID,不然会error db2 db3</span></span><br><span class="line">uuidgen <span class="comment"># 赋值内容进行更改</span></span><br><span class="line">vim /application/mysql/data/auto.cnf</span><br><span class="line">/etc/init.d/mysqld restart</span><br><span class="line"><span class="comment">#检查GTID状态</span></span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| Variable_name                   | Value |</span><br><span class="line">+---------------------------------+-------+</span><br><span class="line">| binlog_gtid_simple_recovery     | OFF   |</span><br><span class="line">| enforce_gtid_consistency        | ON    |</span><br><span class="line">| gtid_executed                   |       |</span><br><span class="line">| gtid_mode                       | ON    |</span><br><span class="line">| gtid_owned                      |       |</span><br><span class="line">| gtid_purged                     |       |</span><br><span class="line">| simplified_binlog_gtid_recovery | OFF   |</span><br><span class="line">+---------------------------------+-------+</span><br></pre></td></tr></table></figure></li><li>配置主从 db2 db3<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456</span><br><span class="line">change master to</span><br><span class="line">master_host=&#x27;192.168.189.130&#x27;,</span><br><span class="line">master_user=&#x27;slave&#x27;,</span><br><span class="line">master_password=&#x27;123456&#x27;,</span><br><span class="line">master_auto_position=1;</span><br><span class="line"></span><br><span class="line">start slave;</span><br><span class="line">show slave status\G</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> global relay_log_purge = 0; <span class="comment"># 禁用自动删除relay log 功能</span></span><br><span class="line"><span class="built_in">set</span> global read_only=1; <span class="comment">#设置只读</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">************************************************</span><br><span class="line">[mysqld]</span><br><span class="line">relay_log_purge = 0 <span class="comment">#禁用自动删除relay log 永久生效</span></span><br></pre></td></tr></table></figure><h3 id="部署MHA"><a href="#部署MHA" class="headerlink" title="部署MHA"></a>部署MHA</h3></li><li>环境准备（所有db）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> &amp;&amp; wget https://download.s21i.faiusr.com/23126342/0/0/ABUIABBPGAAg3OHUiAYolpPt7AQ.zip?f=mysql-master-ha.zip&amp;v=1628778716</span><br><span class="line"><span class="built_in">mv</span> ABUIABBPGAAg3OHUiAYolpPt7AQ.zip\?f\=mysql-master-ha.zip mysql-master-ha.zip</span><br><span class="line">yum install perl-DBD-MySQL unzip -y</span><br><span class="line">unzip mysql-master-ha.zip</span><br><span class="line"><span class="built_in">cd</span> mysql-master-ha</span><br><span class="line">rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm</span><br><span class="line">mysql -uroot -p123456</span><br><span class="line"><span class="comment"># 添加mha管理账号</span></span><br><span class="line">grant all privileges on *.* to mha@<span class="string">&#x27;192.168.189.%&#x27;</span> identified by <span class="string">&#x27;mha&#x27;</span>;</span><br><span class="line"><span class="comment"># 查看是否添加成功</span></span><br><span class="line">select user,host from mysql.user;</span><br></pre></td></tr></table></figure></li><li>命令软连接（所有db）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果不创建命令软连接，检测mha复制情况的时候会报错</span></span><br><span class="line"><span class="built_in">ln</span> -s /application/mysql/bin/mysqlbinlog /usr/bin/mysqlbinlog</span><br><span class="line"><span class="built_in">ln</span> -s /application/mysql/bin/mysql /usr/bin/mysql</span><br></pre></td></tr></table></figure></li><li>部署管理节点 db2或db3<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum install -y perl-Config-Tiny epel-release perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes</span><br><span class="line"><span class="built_in">cd</span> ~/mysql-master-ha &amp;&amp; rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure></li><li>编辑配置文件(manage节点)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/mha          <span class="comment"># 创建配置文件目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /var/log/mha/app1 <span class="comment"># 创建日志目录</span></span><br><span class="line">vim /etc/mha/app1.cnf      <span class="comment"># 编辑mha配置文件</span></span><br><span class="line">******************************************</span><br><span class="line">[server default]</span><br><span class="line">manager_log=/var/log/mha/app1/manager.log</span><br><span class="line">manager_workdir=/var/log/mha/app1</span><br><span class="line">master_binlog_dir=/application/mysql/data</span><br><span class="line">user=mha</span><br><span class="line">password=mha</span><br><span class="line">ping_interval=2</span><br><span class="line">repl_password=123456</span><br><span class="line">repl_user=slave</span><br><span class="line">ssh_user=root</span><br><span class="line">[server1]</span><br><span class="line">hostname=192.168.189.130</span><br><span class="line">port=3306</span><br><span class="line">[server2]</span><br><span class="line">hostname=192.168.189.133</span><br><span class="line">port=3306</span><br><span class="line">candidate_master=1</span><br><span class="line">check_repl_delay=0</span><br><span class="line">[server3]</span><br><span class="line">hostname=192.168.189.135</span><br><span class="line">port=3306</span><br></pre></td></tr></table></figure><strong>配置文件详解</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[server default]</span><br><span class="line">manager_workdir=/var/log/masterha/app1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置manager的工作目录</span></span><br><span class="line">manager_log=/var/log/masterha/app1/manager.log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置manager的日志</span></span><br><span class="line">master_binlog_dir=/data/mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置master 保存binlog的位置，以便MHA可以找到master的日志，我这里的也就是mysql的数据目录</span></span><br><span class="line">master_ip_failover_script= /usr/local/bin/master_ip_failover</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置自动failover时候的切换脚本</span></span><br><span class="line">master_ip_online_change_script= /usr/local/bin/master_ip_online_change</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置手动切换时候的切换脚本</span></span><br><span class="line">password=123456</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置mysql中root用户的密码，这个密码是前文中创建监控用户的那个密码</span></span><br><span class="line">user=root</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置监控用户root</span></span><br><span class="line">ping_interval=1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置监控主库，发送ping包的时间间隔，尝试三次没有回应的时候自动进行failover</span></span><br><span class="line">remote_workdir=/tmp</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置远端mysql在发生切换时binlog的保存位置</span></span><br><span class="line">repl_password=123456</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置复制用户的密码</span></span><br><span class="line">repl_user=slave</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置复制环境中的复制用户名</span></span><br><span class="line">report_script=/usr/local/send_report</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置发生切换后发送的报警的脚本</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">一旦MHA到server02的监控之间出现问题，MHA Manager将会尝试从server03登录到server02</span></span><br><span class="line">secondary_check_script= /usr/local/bin/masterha_secondary_check -s server03 -s server02 --user=root --master_host=server02 --master_ip=192.168.0.50 --master_port=3306</span><br><span class="line">shutdown_script=&quot;&quot;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置故障发生后关闭故障主机脚本（该脚本的主要作用是关闭主机防止发生脑裂,这里没有使用）</span></span><br><span class="line">ssh_user=root</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置ssh的登录用户名</span></span><br><span class="line">[server1]</span><br><span class="line">hostname=192.168.175.10</span><br><span class="line">port=3306</span><br><span class="line">[server2]</span><br><span class="line">hostname=192.168.175.20</span><br><span class="line">port=3306</span><br><span class="line">candidate_master=1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库，即使这个主库不是集群中事件最新的slave。</span></span><br><span class="line">check_repl_delay=0</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认情况下如果一个slave落后master100M的relay logs的话，MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay=0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</span></span><br></pre></td></tr></table></figure></li><li>配置ssh信任（所有节点）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t dsa -P <span class="string">&#x27;&#x27;</span> -f ~/.ssh/id_dsa &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_dsa.pub root@192.168.189.130</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_dsa.pub root@192.168.189.133</span><br><span class="line">ssh-copy-id -i /root/.ssh/id_dsa.pub root@192.168.189.135</span><br></pre></td></tr></table></figure></li><li>启动测试（manage节点）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_ssh --conf=/etc/mha/app1.cnf  <span class="comment">#测试ssh</span></span><br><span class="line">masterha_check_repl --conf=/etc/mha/app1.cnf <span class="comment">#测试复制</span></span><br></pre></td></tr></table></figure></li><li>启动MHA（manage节点）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br><span class="line">masterha_check_status --conf=/etc/mha/app1.cnf <span class="comment">#检测状态</span></span><br></pre></td></tr></table></figure><h3 id="配置vIP漂移"><a href="#配置vIP漂移" class="headerlink" title="配置vIP漂移"></a>配置vIP漂移</h3></li><li>VIP漂移的两种方式<br>通过keepalived的方式，管理虚拟IP的漂移<br>通过MHA自带脚本方式，管理虚拟IP的漂移<h4 id="MHA自带脚本"><a href="#MHA自带脚本" class="headerlink" title="MHA自带脚本"></a>MHA自带脚本</h4></li><li>修改配置文件（manage节点）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mha/app1.cnf</span><br><span class="line">*************************</span><br><span class="line">[server default]</span><br><span class="line">master_ip_failover_script=/etc/mha/master_ip_failover</span><br></pre></td></tr></table></figure></li><li>编辑脚本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mha/master_ip_failover</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/usr/bin/env perl</span></span><br><span class="line">use strict;</span><br><span class="line">use warnings FATAL =&gt; &#x27;all&#x27;;</span><br><span class="line">use Getopt::Long;</span><br><span class="line">my (</span><br><span class="line">    $command, $ssh_user, $orig_master_host, $orig_master_ip,</span><br><span class="line">    $orig_master_port, $new_master_host, $new_master_ip, $new_master_port</span><br><span class="line">);</span><br><span class="line">my $vip = &#x27;192.168.189.88/24&#x27;;</span><br><span class="line">my $key = &#x27;0&#x27;;</span><br><span class="line">my $ssh_start_vip = &quot;/sbin/ifconfig ens33:$key $vip&quot;;</span><br><span class="line">my $ssh_stop_vip = &quot;/sbin/ifconfig ens33:$key down&quot;;</span><br><span class="line">GetOptions(</span><br><span class="line">    &#x27;command=s&#x27; =&gt; \$command,</span><br><span class="line">    &#x27;ssh_user=s&#x27; =&gt; \$ssh_user,</span><br><span class="line">    &#x27;orig_master_host=s&#x27; =&gt; \$orig_master_host,</span><br><span class="line">    &#x27;orig_master_ip=s&#x27; =&gt; \$orig_master_ip,</span><br><span class="line">    &#x27;orig_master_port=i&#x27; =&gt; \$orig_master_port,</span><br><span class="line">    &#x27;new_master_host=s&#x27; =&gt; \$new_master_host,</span><br><span class="line">    &#x27;new_master_ip=s&#x27; =&gt; \$new_master_ip,</span><br><span class="line">    &#x27;new_master_port=i&#x27; =&gt; \$new_master_port,</span><br><span class="line">);</span><br><span class="line">exit &amp;main();</span><br><span class="line">sub main &#123;</span><br><span class="line">    print &quot;\n\nIN SCRIPT TEST====$ssh_stop_vip==$ssh_start_vip===\n\n&quot;;</span><br><span class="line">    if ( $command eq &quot;stop&quot; || $command eq &quot;stopssh&quot; ) &#123;</span><br><span class="line">        my $exit_code = 1;</span><br><span class="line">        eval &#123;</span><br><span class="line">            print &quot;Disabling the VIP on old master: $orig_master_host \n&quot;;</span><br><span class="line">            &amp;stop_vip();</span><br><span class="line">            $exit_code = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        if ($@) &#123;</span><br><span class="line">            warn &quot;Got Error: $@\n&quot;;</span><br><span class="line">            exit $exit_code;</span><br><span class="line">        &#125;</span><br><span class="line">        exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( $command eq &quot;start&quot; ) &#123;</span><br><span class="line">        my $exit_code = 10;</span><br><span class="line">        eval &#123;</span><br><span class="line">            print &quot;Enabling the VIP - $vip on the new master - $new_master_host \n&quot;;</span><br><span class="line">            &amp;start_vip();</span><br><span class="line">            $exit_code = 0;</span><br><span class="line">        &#125;;</span><br><span class="line">        if ($@) &#123;</span><br><span class="line">            warn $@;</span><br><span class="line">            exit $exit_code;</span><br><span class="line">        &#125;</span><br><span class="line">        exit $exit_code;</span><br><span class="line">    &#125;</span><br><span class="line">    elsif ( $command eq &quot;status&quot; ) &#123;</span><br><span class="line">        print &quot;Checking the Status of the script.. OK \n&quot;;</span><br><span class="line">        exit 0;</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        &amp;usage();</span><br><span class="line">        exit 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">sub start_vip() &#123;</span><br><span class="line">    `ssh $ssh_user\@$new_master_host \&quot; $ssh_start_vip \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line">sub stop_vip() &#123;</span><br><span class="line">    return 0 unless ($ssh_user);</span><br><span class="line">    `ssh $ssh_user\@$orig_master_host \&quot; $ssh_stop_vip \&quot;`;</span><br><span class="line">&#125;</span><br><span class="line">sub usage &#123;</span><br><span class="line">    print</span><br><span class="line">    &quot;Usage: master_ip_failover --command=start|stop|stopssh|status --orig_master_host=host --orig_master_ip=ip --orig_master_port=port --new_master_host=host --new_master_ip=ip --new_master_port=port\n&quot;;</span><br><span class="line">&#125;</span><br><span class="line">***************************************</span><br><span class="line">chmod +x /etc/mha/master_ip_failover</span><br></pre></td></tr></table></figure></li><li>手动绑定vIP（master节点）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y net-tools</span><br><span class="line">ifconfig ens33:0 192.168.189.88/24</span><br></pre></td></tr></table></figure></li><li>重启mha（manage节点）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br><span class="line">masterha_check_status --conf=/etc/mha/app1.cnf</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MySQL&quot;&gt;&lt;a href=&quot;#MySQL&quot; class=&quot;headerlink&quot; title=&quot;MySQL&quot;&gt;&lt;/a&gt;MySQL&lt;/h1&gt;&lt;h2 id=&quot;关系型数据库&quot;&gt;&lt;a href=&quot;#关系型数据库&quot; class=&quot;headerlink&quot; title=&quot;关</summary>
      
    
    
    
    <category term="数据库" scheme="http://xczf.shop/cate%EF%BC%9Agories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://xczf.shop/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python-进阶</title>
    <link href="http://xczf.shop/2022/08/01/Python-%E9%AB%98%E7%BA%A7/"/>
    <id>http://xczf.shop/2022/08/01/Python-%E9%AB%98%E7%BA%A7/</id>
    <published>2022-08-01T11:00:41.000Z</published>
    <updated>2023-12-20T10:03:01.619Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python进阶"><a href="#Python进阶" class="headerlink" title="Python进阶"></a>Python进阶</h1><h2 id="1-迭代器"><a href="#1-迭代器" class="headerlink" title="1.迭代器"></a>1.迭代器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StuSystem</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 创建管理系统对象</span></span><br><span class="line">stu_sys = StuSystem()</span><br><span class="line"><span class="comment"># 添加3个学生信息到系统中</span></span><br><span class="line">stu_sys.add()</span><br><span class="line">stu_sys.add()</span><br><span class="line">stu_sys.add()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> text <span class="keyword">in</span> stu_sys:</span><br><span class="line">    <span class="built_in">print</span>(text)</span><br></pre></td></tr></table></figure><p>此时运行会报错：**’StuSystem’ object is not iterable**<br>在实际开发工作中，经常需要快速的将对象转化问其他的不同的数据类型，这就需要迭代器。</p><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>迭代是访问集合元素的一种方式（对list、tuple、str等类型的数据使用for…in…的循环语法从其中依次拿到数据进行使用，我们把这样的过程称为遍历，也叫迭代）</p><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><p><strong>只要是可以通过for…in…的形式进行遍历的，那么这个数据类型就是可以迭代的</strong><br>可以迭代的数据类型：列表、元组、字典、字符串<br>不可以迭代的数据类型：整型、浮点型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过isinstance来判断出是Iterable类,True表示是</span></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="built_in">isinstance</span>([],Iterable) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">isinstance</span>(<span class="number">100</span>, Iterable) <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器是一个可以记住遍历的位置的对象。迭代器对象从第一个元素开始访问，直到所有的元素被访问完结束。<strong>迭代器只能往前不会后退。</strong><br>我们可以通过<strong>iter()函数获取这些可迭代对象的迭代器</strong>。然后我们可以对获<strong>取到的迭代器不断使用next()函数来获取下一条数据</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nums)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line">nums_iter = <span class="built_in">iter</span>(nums)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nums_iter)) <span class="comment"># &lt;class &#x27;list_iterator&#x27;&gt;</span></span><br></pre></td></tr></table></figure><h4 id="获取迭代器的数据"><a href="#获取迭代器的数据" class="headerlink" title="获取迭代器的数据"></a>获取迭代器的数据</h4><p>通过next()函数多次提取迭代器中的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">nums_iter = <span class="built_in">iter</span>(nums)</span><br><span class="line">num1 = <span class="built_in">next</span>(nums_iter)</span><br><span class="line"><span class="built_in">print</span>(num1) <span class="comment"># 1</span></span><br><span class="line">num2 = <span class="built_in">next</span>(nums_iter)</span><br><span class="line"><span class="built_in">print</span>(num2) <span class="comment"># 2</span></span><br><span class="line">num3 = <span class="built_in">next</span>(nums_iter)</span><br><span class="line"><span class="built_in">print</span>(num3) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h4 id="StopIteration异常"><a href="#StopIteration异常" class="headerlink" title="StopIteration异常"></a>StopIteration异常</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">nums_iter = <span class="built_in">iter</span>(nums)</span><br><span class="line">num1 = <span class="built_in">next</span>(nums_iter)</span><br><span class="line"><span class="built_in">print</span>(num1) <span class="comment"># 1</span></span><br><span class="line">num2 = <span class="built_in">next</span>(nums_iter)</span><br><span class="line"><span class="built_in">print</span>(num2) <span class="comment"># 2</span></span><br><span class="line">num3 = <span class="built_in">next</span>(nums_iter)</span><br><span class="line"><span class="built_in">print</span>(num3) <span class="comment"># 3</span></span><br><span class="line">num4 = <span class="built_in">next</span>(nums_iter) <span class="comment"># 产生异常</span></span><br><span class="line"><span class="built_in">print</span>(num4)</span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">------------------------------------</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num4 = <span class="built_in">next</span>(nums_iter)</span><br><span class="line">    <span class="built_in">print</span>(num4)</span><br><span class="line"><span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure><h5 id="自己写一个while循环"><a href="#自己写一个while循环" class="headerlink" title="自己写一个while循环"></a>自己写一个while循环</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.定义一个列表</span></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment"># 可迭代对象</span></span><br><span class="line">nums_iter = <span class="built_in">iter</span>(nums) <span class="comment"># 迭代器</span></span><br><span class="line"><span class="comment"># 循环方式调用next取出迭代器数据</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">num = <span class="built_in">next</span>(nums_iter) <span class="comment"># 下一个数据</span></span><br><span class="line"><span class="built_in">print</span>(num)</span><br><span class="line"><span class="keyword">except</span> StopIteration <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="自定义”迭代器”"><a href="#自定义”迭代器”" class="headerlink" title="自定义”迭代器”"></a>自定义”迭代器”</h3><h4 id="iter-方法"><a href="#iter-方法" class="headerlink" title="__iter__方法"></a>__iter__方法</h4><p>iter()方法必须是对”可迭代“对象 才能 提取到 ”迭代器“对象<br>只要在类中，定义__iter__方法，那么这个类创建出来的对象一定是可迭代对象</p><h4 id="next-方法"><a href="#next-方法" class="headerlink" title="__next__方法"></a>__next__方法</h4><p>对迭代器使用next()函数的时候，迭代器会向我们返回它所记录位置的下一个位置的数据<br>迭代器本身也是可迭代的，所以我们还要为迭代器实现__iter__方法，而__iter__方法要返回一个迭代器，迭代器自身正是一个迭代器，所以迭代器的__iter__方法返回自身即可<br><strong>一个实现了__iter__方法和__next__方法的对象，就是迭代器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterator</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义的一个可迭代对象&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.items = []</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, val</span>):</span><br><span class="line">        self.items.append(val)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="comment"># 1.标记当前类创建出来的对象一定是可迭代对象</span></span><br><span class="line">    <span class="comment"># 2.当调用iter()函数的时候，这个方法会被自动调用它返回自己指定的迭代器</span></span><br><span class="line">        <span class="keyword">return</span> MyIterator()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;自定义的供上面可迭代对象使用的一个迭代器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.标记当前类创建的对象（有__iter__方法），一定是迭代器</span></span><br><span class="line">        <span class="comment"># 2.当调用next()函数的时候，会被自动调用它返回的一个数据 10</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">mylist = MyList() <span class="comment"># 可迭代对象</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">用iter(mylist)就是获取mylist这个可迭代对象的迭代器，会自动调用mylist这个对象的__iter__方法</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">mylist_iter = <span class="built_in">iter</span>(mylist) <span class="comment"># 迭代器</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;可迭代对象不一定是迭代器，迭代器一定是可迭代对象&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mylist是否是可以迭代对象&quot;</span>, <span class="built_in">isinstance</span>(mylist, Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mylist是否是迭代器&quot;</span>, <span class="built_in">isinstance</span>(mylist, Iterator)) <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mylist_iter是否是可以迭代对象&quot;</span>, <span class="built_in">isinstance</span>(mylist_iter, Iterable)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mylist_iter是否是迭代器&quot;</span>, <span class="built_in">isinstance</span>(mylist_iter, Iterator)) <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>可迭代对象通过__iter__方法向我们返回一个迭代器，我们在迭代一个可迭代对象的时候，实际上就是先获取该对象提供的一个迭代器，然后通过这个迭代器来依次获取对象中的每一个数据.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">class MyList(object):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;自定义的一个可迭代对象&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.items = []</span><br><span class="line">    def add(self, val):</span><br><span class="line">        self.items.append(val)</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        myiterator = MyIterator(self)</span><br><span class="line">        <span class="built_in">return</span> myiterator</span><br><span class="line">class MyIterator(object):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;自定义的供上面可迭代对象使用的一个迭代器&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    def __init__(self, mylist):</span><br><span class="line">        self.mylist = mylist</span><br><span class="line">        <span class="comment"># current用来记录当前访问到的位置</span></span><br><span class="line">        self.current = 0</span><br><span class="line">    def __next__(self):</span><br><span class="line">        <span class="keyword">if</span> self.current &lt; len(self.mylist.items):</span><br><span class="line">            item = self.mylist.items[self.current]</span><br><span class="line">            self.current += 1</span><br><span class="line">            <span class="built_in">return</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            raise StopIteration</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        <span class="built_in">return</span> self</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mylist = MyList()</span><br><span class="line">    mylist.add(1)</span><br><span class="line">    mylist.add(2)</span><br><span class="line">    mylist.add(3)</span><br><span class="line">    mylist.add(4)</span><br><span class="line">    mylist.add(5)</span><br><span class="line">    <span class="comment"># for自带异常判断，通过这个判断可以决定需要是否继续获取迭代器数据，如果return None，但是for循环的代码依然用的异常判断而不是None，所以会产生死循环</span></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> mylist:</span><br><span class="line">        <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="for…in…循环的本质"><a href="#for…in…循环的本质" class="headerlink" title="for…in…循环的本质"></a>for…in…循环的本质</h3><ol><li>先调用iter()函数，它会自动调用可迭代对象中的__iter__方法，此方法返回这个可迭代对象的 迭代器对象</li><li>对获取到的迭代器不断调用next()函数，它会自动调用迭代器中的__next__方法来获取下一个值</li><li>当遇到StopIteration异常后循环结束<h2 id="2-生成器"><a href="#2-生成器" class="headerlink" title="2.生成器"></a>2.生成器</h2>通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的，创建一个容量很大的空间，如果仅仅访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。<br><strong>种一边循环一边计算的机制，称为生成器：generator</strong></li></ol><ul><li><strong>生成器是一类特殊的迭代器</strong><br>实现一个迭代器时，关于当前迭代到的状态需要我们自己记录，进而才能根据当前状态生成下一个数据。<br>为了达到记录当前状态，并配合next()函数进行迭代使用，<br>迭代器是可以实现在循环的过程中生成数据的，但是稍稍有些复杂有一个能具有迭代器的功能，且比它更加简单的方式：生成器<h3 id="创建生成器"><a href="#创建生成器" class="headerlink" title="创建生成器"></a>创建生成器</h3></li><li><ol><li>把一个列表生成式的 [ ] 改成 ( )<br>可以直接打印出列表nums的每一个元素，而对于生成器nums2，<strong>可以按照迭代器的使用方法来使用，即可以通过next()函数、for循环、list()等方法使用</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nums1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nums1)) <span class="comment"># &lt;class &#x27;list&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">nums2 = (x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(nums2)) <span class="comment"># &lt;class &#x27;generator&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>generator功能<br><strong>只要在def函数中有yield关键字的 就称为 生成器</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib_generator</span>():</span><br><span class="line">    num1 = <span class="number">1</span></span><br><span class="line">    num2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        temp_num = num1</span><br><span class="line">        num1, num2 = num2, num1+num2</span><br><span class="line">        <span class="comment"># return temp_num  # 方式1代码</span></span><br><span class="line">        <span class="keyword">yield</span> temp_num</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式1代码（生成1，1，1，1，1）,调用函数会重头开始执行，每次num都会设置成1</span></span><br><span class="line"><span class="comment"># print(fib_generator())</span></span><br><span class="line"><span class="comment"># print(fib_generator())</span></span><br><span class="line"><span class="comment"># print(fib_generator())</span></span><br><span class="line"><span class="comment"># print(fib_generator())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式2代码（可以生成斐波那契数列）</span></span><br><span class="line">fib = fib_generator()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(fib))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(fib))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(fib))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(fib))</span><br></pre></td></tr></table></figure><h3 id="yield关键字"><a href="#yield关键字" class="headerlink" title="yield关键字"></a>yield关键字</h3>yield关键字，那么虽然看上去是调用函数，实际上已经变成了创建一个 生成器对象<br>如果是第一次执行，则从def代码块的开始部分执行，直到遇到yield为止，并且把yield关键字后的数值返回，当做next()的返回值，不是第一次执行，则从上一次暂停的位置执行(即从上一次yield关键字的下一个语句开始执行)，直到遇到下一次yield为止，并且把yield关键字后的数值返回，当做next()的返回值<br><strong>return接收一个函数，且有返回值,yield暂停执行一个函数，且有返回值</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fib_generator</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---1---&quot;</span>)</span><br><span class="line">    num1 = <span class="number">1</span></span><br><span class="line">    num2 = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---2---&quot;</span>)</span><br><span class="line">        temp_num = num1</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---3---&quot;</span>)</span><br><span class="line">        num1, num2 = num2, num1+num2</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---4---&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span> temp_num</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;---5---&quot;</span>)</span><br><span class="line">fib = fib_generator()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行第1次的next函数---开始--&quot;</span>)</span><br><span class="line">num = <span class="built_in">next</span>(fib)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行第1次的next函数---结束--&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行第2次的next函数---开始--&quot;</span>)</span><br><span class="line">num = <span class="built_in">next</span>(fib)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;执行第2次的next函数---结束--&quot;</span>)</span><br><span class="line"><span class="comment"># ---1---</span></span><br><span class="line"><span class="comment"># ---2---</span></span><br><span class="line"><span class="comment"># ---3---</span></span><br><span class="line"><span class="comment"># ---4---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ---5---</span></span><br><span class="line"><span class="comment"># ---2---</span></span><br><span class="line"><span class="comment"># ---3---</span></span><br><span class="line"><span class="comment"># ---4---</span></span><br></pre></td></tr></table></figure><h3 id="return值"><a href="#return值" class="headerlink" title="return值"></a>return值</h3>调用generatr时，发现拿不到generator的return语句的返回值。如果想要拿到返回值，必须捕获StopIteration错误，返回值包含在StopIteration的value中</li></ol></li></ul><hr><p><img src="/image/%E9%AB%98%E7%BA%A7/1.jpg" alt="return"></p><hr><h3 id="send唤醒"><a href="#send唤醒" class="headerlink" title="send唤醒"></a>send唤醒</h3><p>send()函数的一个好处是：可以在唤醒的同时向断点处传入一个附加数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--1--&quot;</span>)</span><br><span class="line">        num = <span class="keyword">yield</span> <span class="number">100</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--2--&quot;</span>, <span class="string">&quot;num=&quot;</span>, num)</span><br><span class="line"></span><br><span class="line">g = generator_test()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一次调用，会将yield 100执行完毕后暂停代码执行，注意此时 并没有给num值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">next</span>(g))</span><br><span class="line"></span><br><span class="line"><span class="comment"># send会让生成器从上次停止的位置 继续开始执行，并且会将11传递到生成器中</span></span><br><span class="line"><span class="comment"># 当做上一次执行yield 100 这个表达式的结果</span></span><br><span class="line"><span class="comment"># 然后在第4行代码，就可以想象成 num = 11了，因为100代表上次yield 100的结果</span></span><br><span class="line"><span class="comment"># 直到遇到下一次的yield 暂停运行，并且把100返回，此时就也打印了100</span></span><br><span class="line"><span class="built_in">print</span>(g.send(<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与上次send(11)类似，只不过此次将22当做给yield 100这个表示的结果 给num</span></span><br><span class="line"><span class="built_in">print</span>(g.send(<span class="number">22</span>))</span><br></pre></td></tr></table></figure><h2 id="3-闭包"><a href="#3-闭包" class="headerlink" title="3.闭包"></a>3.闭包</h2><p>在函数中可以（嵌套）定义另一个函数时，如果<strong>内部的函数引用了外部的函数的变量</strong>，则可能产生闭包。闭包可以用来在一个函数与一组“私有”变量之间创建关联关系。外部函数的变量称为闭包。</p><ul><li>闭包和函数区别<br>调用函数时所有变量+形参只会在函数执行过程中保留，闭包并不会因为外部函数使用完毕而释放，偏于再次调用内部函数的时候可以使用，所以会<strong>额外占用内存</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">make_printer</span>(<span class="params">msg</span>):  <span class="comment"># 可以认为是外部函数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printer</span>():  <span class="comment"># 可以认为是内部函数</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">return</span> printer  <span class="comment"># 返回的内部函数的引用</span></span><br><span class="line"></span><br><span class="line">printer = make_printer(<span class="string">&#x27;Good!&#x27;</span>)</span><br><span class="line">printer()</span><br></pre></td></tr></table></figure><h3 id="案例：计算数值"><a href="#案例：计算数值" class="headerlink" title="案例：计算数值"></a>案例：计算数值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_in</span>(<span class="params">number_in</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;in test_in 函数, number_in is %d&quot;</span> % number_in)</span><br><span class="line">        <span class="keyword">return</span> number+number_in</span><br><span class="line">    <span class="keyword">return</span> test_in</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给test函数赋值，这个20就是给参数number</span></span><br><span class="line">ret = test(<span class="number">20</span>)</span><br><span class="line"><span class="comment"># 这里的100其实给参数number_in</span></span><br><span class="line"><span class="built_in">print</span>(ret(<span class="number">100</span>))</span><br></pre></td></tr></table></figure><h3 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h3>由于闭包会携带包含它的函数的作用域，因此会比其他函数占用更多的内存。因此可以手动解除对匿名函数的引用，以便释放内存。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">counter</span>(<span class="params">start=<span class="number">0</span></span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_one</span>():</span><br><span class="line">        <span class="keyword">nonlocal</span> start <span class="comment"># 可以进行修改变量了</span></span><br><span class="line">        start += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> start</span><br><span class="line">    <span class="keyword">return</span> add_one</span><br></pre></td></tr></table></figure></li><li>多个闭包<br>可以创建多个闭包，多个闭包之间没有任何关系<br><strong>对象其实可通俗的理解为数据(属性)+功能(方法)，而闭包也可以理解为数据+功能，只不过此时数据是外部函数中的那些局部变量或者形参，而功能则是内部函数。对象适合完成较为复杂的功能，而闭包则更轻量</strong><h3 id="函数、匿名函数、闭包、对象-当做实参时区别"><a href="#函数、匿名函数、闭包、对象-当做实参时区别" class="headerlink" title="函数、匿名函数、闭包、对象 当做实参时区别"></a>函数、匿名函数、闭包、对象 当做实参时区别</h3>匿名函数能够完成基本的简单功能，传递是这个函数的引用 只有功能<br>普通函数能够完成较为复杂的功能，传递是这个函数的引用 只有功能<br>闭包能够将较为复杂的功能，传递是这个闭包中的函数以及数据，因此传递是功能+数据<br>对象能够完成最为复杂的功能，传递是很多数据+很多功能，因此传递是功能+数据<h3 id="案例：模拟坐标"><a href="#案例：模拟坐标" class="headerlink" title="案例：模拟坐标"></a>案例：模拟坐标</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>():</span><br><span class="line">    pos = [<span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 坐标系统原点</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">player</span>(<span class="params">direction, step</span>):</span><br><span class="line">        new_x = pos[<span class="number">0</span>] + direction[<span class="number">0</span>] * step</span><br><span class="line">        new_y = pos[<span class="number">1</span>] + direction[<span class="number">1</span>] * step</span><br><span class="line">        pos[<span class="number">0</span>] = new_x</span><br><span class="line">        pos[<span class="number">1</span>] = new_y</span><br><span class="line">        <span class="keyword">return</span> pos</span><br><span class="line">    <span class="keyword">return</span> player</span><br><span class="line"></span><br><span class="line">player = create()  <span class="comment"># 创建棋子player，起点为原点</span></span><br><span class="line"><span class="built_in">print</span>(player([<span class="number">1</span>, <span class="number">0</span>], <span class="number">10</span>))  <span class="comment"># 向x轴正方向移动10步</span></span><br><span class="line"><span class="built_in">print</span>(player([<span class="number">0</span>, <span class="number">1</span>], <span class="number">20</span>))  <span class="comment"># 向y轴正方向移动20步</span></span><br><span class="line"><span class="built_in">print</span>(player([-<span class="number">1</span>, <span class="number">0</span>], <span class="number">10</span>))  <span class="comment"># 向x轴负方向移动10步</span></span><br></pre></td></tr></table></figure><h2 id="4-装饰器"><a href="#4-装饰器" class="headerlink" title="4.装饰器"></a>4.装饰器</h2></li><li>装饰器的执行过程</li></ul><ol><li>定义一个全局变量A，此时A指向一个代码块</li><li>定义一个全局变量hello指向一个代码块</li><li>执行@A语法糖即调用A()，并将hello函数指向代码块，即这个函数引用当成实参</li><li>执行A函数在执行过程中func变量指向了hello指向那个代码块，并将B指向那个代码块，引用作为返回值</li><li>让hello全局变量保存A(hello)的返回值，此时让hello指向了B指向的函数<br><strong>实际上装饰器让原本函数调用先调用添加的功能，然后再调用原函数的功能</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">A</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b</span>():</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;-------1-------&quot;</span>)</span><br><span class="line">         func()</span><br><span class="line">         <span class="built_in">print</span>(<span class="string">&quot;-------2-------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> B</span><br><span class="line"></span><br><span class="line"><span class="meta">@A</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">helle</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;huan yin use hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">hello()</span><br></pre></td></tr></table></figure><h3 id="xxx实现过程"><a href="#xxx实现过程" class="headerlink" title="@xxx实现过程"></a>@xxx实现过程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check_login</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;admin&quot;</span> != <span class="built_in">input</span>(<span class="string">&quot;请输入用户名:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;用户名不正确&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;123456&quot;</span> != <span class="built_in">input</span>(<span class="string">&quot;请输入密码:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;密码不正确&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;7788&quot;</span> != <span class="built_in">input</span>(<span class="string">&quot;请输入手机短信验证码:&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;验证码不正确&quot;</span></span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="comment"># @check_login</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;f1&#x27;</span>)</span><br><span class="line"><span class="comment"># 下一行代码完成了@check_login的作用</span></span><br><span class="line">f = check_login(f1)</span><br><span class="line">f()  <span class="comment"># 调用f1函数</span></span><br></pre></td></tr></table></figure><strong>实现装饰器用到了闭包，只是将闭包中外部函数的返回值 给了 被装饰函数名字，从而修改了函数指向</strong><br><strong>普通闭包：内部函数将使用的外部变量当做数据来用</strong><br><strong>闭包当做装饰器：内部函数将使用的外部变量当做可调用的对象(例如函数)来调用</strong><h3 id="函数参数的装饰"><a href="#函数参数的装饰" class="headerlink" title="函数参数的装饰"></a>函数参数的装饰</h3><h4 id="无参数的函数进行装饰"><a href="#无参数的函数进行装饰" class="headerlink" title="无参数的函数进行装饰"></a>无参数的函数进行装饰</h4><img src="/image/%E9%AB%98%E7%BA%A7/2.jpg" alt="装饰器"><h4 id="有参数的函数进行装饰"><a href="#有参数的函数进行装饰" class="headerlink" title="有参数的函数进行装饰"></a>有参数的函数进行装饰</h4><img src="/image/%E9%AB%98%E7%BA%A7/3.jpg" alt="装饰器"><h4 id="不定长参数的函数进行装饰"><a href="#不定长参数的函数进行装饰" class="headerlink" title="不定长参数的函数进行装饰"></a>不定长参数的函数进行装饰</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">xxx</span>(<span class="params">func</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">yyy</span>(<span class="params">*args, **kwargs</span>): <span class="comment"># 接受不确定个数参数</span></span><br><span class="line">        ret = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    <span class="keyword">return</span> yyy</span><br><span class="line"><span class="meta">@xxx </span><span class="comment"># 相当于a = xxx(a)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-------1&quot;</span>,num)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span></span><br><span class="line"></span><br><span class="line">ret = a(<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h4 id="多个装饰器对同一个函数装饰"><a href="#多个装饰器对同一个函数装饰" class="headerlink" title="多个装饰器对同一个函数装饰"></a>多个装饰器对同一个函数装饰</h4><img src="/image/%E9%AB%98%E7%BA%A7/4.jpg" alt="装饰器"><h4 id="装饰器带参数"><a href="#装饰器带参数" class="headerlink" title="装饰器带参数"></a>装饰器带参数</h4><img src="/image/%E9%AB%98%E7%BA%A7/5.jpg" alt="装饰器"><h4 id="类当做装饰器"><a href="#类当做装饰器" class="headerlink" title="类当做装饰器"></a>类当做装饰器</h4><img src="/image/%E9%AB%98%E7%BA%A7/6.jpg" alt="装饰器"><h2 id="4-深浅拷贝"><a href="#4-深浅拷贝" class="headerlink" title="4.深浅拷贝"></a>4.深浅拷贝</h2><h3 id="is-x3D-x3D"><a href="#is-x3D-x3D" class="headerlink" title="is,&#x3D;&#x3D;"></a>is,&#x3D;&#x3D;</h3>is是比较两个引用是否指向了同一个对象（引用比较）<br>&#x3D;&#x3D; 是比较两个对象的值是否相等（值比较）<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3>浅拷贝：对于一个对象的顶层拷贝<br>通俗的理解是：<strong>拷贝了引用，并没有拷贝内容</strong></li></ol><ul><li>浅拷贝对不可变类型和可变类型的copy不同<ul><li>copy.copy对于可变类型，会进行浅拷贝</li><li>copy.copy对于不可变类型，不会拷贝，仅仅是指向<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">copy.copy()</span><br></pre></td></tr></table></figure><img src="/image/%E9%AB%98%E7%BA%A7/7.jpg" alt="装饰器"><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3>深拷贝：对于一个对象所有层次的拷贝(递归)<br><img src="/image/%E9%AB%98%E7%BA%A7/8.jpg" alt="装饰器"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">copy.deepcopy()</span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><img src="/image/%E9%AB%98%E7%BA%A7/9.jpg" alt="装饰器"><h2 id="5-with与“上下文管理器”"><a href="#5-with与“上下文管理器”" class="headerlink" title="5.with与“上下文管理器”"></a>5.with与“上下文管理器”</h2><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3>open 方法的返回值赋值给变量 f，当离开with代码块的时候，系统会自动调用f.close()方法， with 的作用和使用 try&#x2F;finally 语句是一样的。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">m</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;output.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">&quot;Python&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h3>任何实现了 <strong>enter</strong>() 和 <strong>exit</strong>() 方法的对象都可称之为上下文管理器，上下文管理器对象可以使用 with 关键字。<br><strong><strong>enter</strong>()方法返回资源对象，这里就是你将要打开的那个文件对象，<strong>exit</strong>() 方法处理一些清除工作。</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">File</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, filename, mode</span>):</span><br><span class="line">        self.filename = filename</span><br><span class="line">        self.mode = mode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;entering&quot;</span>)</span><br><span class="line">        self.f = <span class="built_in">open</span>(self.filename, self.mode)</span><br><span class="line">        <span class="keyword">return</span> self.f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;will exit&quot;</span>)</span><br><span class="line">        self.f.close()</span><br></pre></td></tr></table></figure></li></ul></li><li>Python 还提供了一个 contextmanager 的装饰器，更进一步简化了上下文管理器的实现方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from contextlib import contextmanager</span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def my_open(path, mode):</span><br><span class="line">    f = open(path, mode)</span><br><span class="line">    yield f</span><br><span class="line">    f.close()</span><br><span class="line">    </span><br><span class="line">with my_open(<span class="string">&#x27;out.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) as f:</span><br><span class="line">    f.write(<span class="string">&quot;python&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="6-面对对象"><a href="#6-面对对象" class="headerlink" title="6.面对对象"></a>6.面对对象</h2><h3 id="6-1-内建函数"><a href="#6-1-内建函数" class="headerlink" title="6.1 内建函数"></a>6.1 内建函数</h3>查看如何使用：help(function)<br>Build-in Function,启动python解释器，输入dir(<strong>builtin</strong>), 可以看到很多python解释器启动后默认加载的属性和函数，这些函数称之为内建函数<h4 id="map函数"><a href="#map函数" class="headerlink" title="map函数"></a>map函数</h4>map函数会根据提供的函数对指定序列做映射<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map(lambda x: x*x, [1, 2, 3]) <span class="comment"># 结果为:[1, 4, 9]</span></span><br><span class="line">map(lambda x, y: x+y, [1, 2, 3], [4, 5, 6]) <span class="comment"># 结果为:[5, 7, 9]</span></span><br></pre></td></tr></table></figure><h4 id="filter函数"><a href="#filter函数" class="headerlink" title="filter函数"></a>filter函数</h4>filter函数会对指定序列执行过滤操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter(lambda x: x%2, [1, 2, 3, 4]) <span class="comment"># [1, 3]</span></span><br></pre></td></tr></table></figure><h4 id="reduce函数"><a href="#reduce函数" class="headerlink" title="reduce函数"></a>reduce函数</h4>reduce函数会对参数序列中元素进行重复操作<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reduce(lambda x, y: x+y, [1,2,3,4]) <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line">reduce(lambda x, y: x+y, [1,2,3,4], 5) <span class="comment"># 15</span></span><br></pre></td></tr></table></figure><h3 id="6-2-封装、继承、多态"><a href="#6-2-封装、继承、多态" class="headerlink" title="6.2 封装、继承、多态"></a>6.2 封装、继承、多态</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4>封装（Encapsulation）是对具体对象的一种抽象，即将某些部分隐藏起来，在程序外部看不到，其含义是其他程序无法调用。<br><strong>封装就是一个类中抽象出来的静态数据（即属性）以及该类的一些功能（即方法）。</strong><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><strong>python支持多继承的</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个动物类Animal</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>(<span class="title class_ inherited__">object</span>): <span class="comment"># 类</span></span><br><span class="line">    legs = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 腿的数量 # 属性</span></span><br><span class="line">    color = <span class="string">&#x27;&#x27;</span>  <span class="comment"># 毛色</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>): <span class="comment"># 方法</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal吃东西&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal睡觉&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">walk</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Animal走路&quot;</span>)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>): <span class="comment"># 继承</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h5 id="多继承以及MRO顺序"><a href="#多继承以及MRO顺序" class="headerlink" title="多继承以及MRO顺序"></a>多继承以及MRO顺序</h5><strong>super().__init__相对于类名.__init__，在单继承上用法基本无差</strong><br><strong>但在多继承上有区别，super方法能保证每个父类的方法只会执行一次，而使用类名的方法会导致方法被执行多次</strong><br>多继承时，使用super方法，对父类的传参数，由于super的算法导致的原因，必须把<strong>参数全部传递，否则会报错</strong><br><strong>单继承时，使用super方法，则不能全部传递，只能传父类方法所需的参数，否则会报错</strong><br>多继承时，相对于使用类名.__init__方法，要把每个父类全部写一遍, 而使用super方法，只需写一句话便执行了全部父类的方法，这也是为何多继承需要全部传参的一个原因<h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4>多态特性涉及到父子类以及父类之间同名函数的调用顺序问题<br><strong>若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索，即方法在子类中未找到时，从左到右查找基类中是否包含方法。</strong><h3 id="6-3-静态方法和类方法"><a href="#6-3-静态方法和类方法" class="headerlink" title="6.3 静态方法和类方法"></a>6.3 静态方法和类方法</h3>实例方法：由对象调用；至少一个self参数；执行实例方法时，自动将调用该方法的对象赋值给self<br>类方法：由类调用； 至少一个cls参数；执行类方法时，自动将调用该方法的类赋值给cls<br>静态方法：由类调用；无默认参数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Foo(object):</span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        self.name = name</span><br><span class="line">    def ord_func(self):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot; 定义实例方法，至少有一个self参数 &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(self.name)</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;实例方法&#x27;</span>)</span><br><span class="line">    @classmethod</span><br><span class="line">    def class_func(cls):</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot; 定义类方法，至少有一个cls参数 &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;类方法&#x27;</span>)</span><br><span class="line">    @staticmethod</span><br><span class="line">    def static_func():</span><br><span class="line">        <span class="string">&quot;&quot;</span><span class="string">&quot; 定义静态方法 ，无默认参数&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;静态方法&#x27;</span>)</span><br><span class="line"></span><br><span class="line">f = Foo(<span class="string">&quot;中国&quot;</span>)</span><br><span class="line"><span class="comment"># 调用实例方法</span></span><br><span class="line">f.ord_func()</span><br><span class="line"><span class="comment"># 调用类方法</span></span><br><span class="line">Foo.class_func()</span><br><span class="line"><span class="comment"># 调用静态方法</span></span><br><span class="line">Foo.static_func()</span><br></pre></td></tr></table></figure><h3 id="6-4-类属性、实例属性"><a href="#6-4-类属性、实例属性" class="headerlink" title="6.4 类属性、实例属性"></a>6.4 类属性、实例属性</h3><strong>类属性在内存中只保存一份<br>实例属性在每个对象中都要保存一份</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Province(object):</span><br><span class="line">    <span class="comment"># 类属性</span></span><br><span class="line">    country = <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">    def __init__(self, name):</span><br><span class="line">        <span class="comment"># 实例属性</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个实例对象</span></span><br><span class="line">obj = Province(<span class="string">&#x27;山东省&#x27;</span>)</span><br><span class="line"><span class="comment"># 直接访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(obj.name)</span><br><span class="line"><span class="comment"># 直接访问类属性</span></span><br><span class="line">Province.country</span><br></pre></td></tr></table></figure><h3 id="6-5-内建属性"><a href="#6-5-内建属性" class="headerlink" title="6.5 内建属性"></a>6.5 内建属性</h3><h4 id="新式类"><a href="#新式类" class="headerlink" title="新式类"></a>新式类</h4>Python3中定义的类都是新式类的，无论是否写明一个类继承object，都会间接或直接继承object<h4 id="常用内建属性"><a href="#常用内建属性" class="headerlink" title="常用内建属性"></a>常用内建属性</h4><img src="/image/%E9%AB%98%E7%BA%A7/10.jpg" alt="内建属性"><h3 id="6-6-魔法属性"><a href="#6-6-魔法属性" class="headerlink" title="6.6 魔法属性"></a>6.6 魔法属性</h3></li><li><strong>doc</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 描述类信息，这是用于神奇 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Foo.__doc__)</span><br><span class="line"><span class="comment"># 输出：类的描述信息</span></span><br></pre></td></tr></table></figure></li><li><strong>module</strong> 和 <strong>class</strong><br><strong>module</strong> 表示当前操作的对象在那个模块<br><strong>class</strong> 表示当前操作的对象的类是什么<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&#x27;laowang&#x27;</span></span><br><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> Person</span><br><span class="line"></span><br><span class="line">obj = Person()</span><br><span class="line"><span class="built_in">print</span>(obj.__module__)  <span class="comment"># 输出 test 即：输出模块</span></span><br><span class="line"><span class="built_in">print</span>(obj.__class__)  <span class="comment"># 输出 test.Person 即：输出类</span></span><br></pre></td></tr></table></figure></li><li><strong>init</strong><br>初始化方法，通过类创建对象时，自动触发执行</li><li><strong>del</strong><br>当对象在内存中被释放之前，自动触发执行<br>Python是一门高级语言，程序员在使用时无需关心内存的分配和释放，因为此工作都是交给Python解释器来执行</li><li><strong>call</strong><br>对象后面加括号，触发执行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;__call__&#x27;</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()  <span class="comment"># 执行 __init__</span></span><br><span class="line">obj()  <span class="comment"># 执行 __call__</span></span><br></pre></td></tr></table></figure></li><li><strong>dict</strong><br>类或对象中的所有属性</li><li><strong>str</strong><br>一个类中定义了__str__方法，打印对象时，默认输出该方法的返回值</li><li><strong>getitem__、__setitem__、__delitem</strong><br>用于索引操作，分别表示获取、设置、删除数据</li><li><strong>getslice__、__setslice__、__delslice</strong><br>该三个方法用于分片操作<br><strong>在Python2中有效，Python3已经被移除</strong><h3 id="6-7-slots"><a href="#6-7-slots" class="headerlink" title="6.7 slots"></a>6.7 <strong>slots</strong></h3>动态语言：可以在运行的过程中，修改代码<br>静态语言：编译时已经确定好代码，运行过程中不能修改<br>为了达到限制的目的，Python允许在定义类的时候，定义一个特殊的__slots__属性，来<strong>限制该类创建的实例对象可以添加的属性</strong><br>__slots__定义的属性仅对当前类实例起作用，对<strong>继承的子类</strong>是不起作用的<h4 id="私有化"><a href="#私有化" class="headerlink" title="私有化"></a>私有化</h4>父类中属性名为__名字的，子类不继承，子类不能访问<br>如果在子类中向__名字赋值，那么会在子类中定义的一个与父类相同名字的属性<br>_ 名的变量、函数、类在使用from xxx import * 时都不会被导入<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xx: 公有变量</span><br><span class="line">_x: 单前置下划线,私有化属性或方法，from somemodule import *禁止导入,类对象和子类可以访问</span><br><span class="line">__xx：双前置下划线,避免与子类中的属性命名冲突，无法在外部直接访问(名字重整所以访问不到)</span><br><span class="line">__xx__:双前后下划线,用户名字空间的魔法对象或属性。例如:__init__ , __ 不要自己发明这样的名字</span><br><span class="line">xx_:单后置下划线, 用于避免与Python关键词的冲突</span><br></pre></td></tr></table></figure><h2 id="7-property属性"><a href="#7-property属性" class="headerlink" title="7.property属性"></a>7.property属性</h2>指定的某个方法来获取数据或者设置数据称之为property属性</li><li>使用方式<br><strong>定义时，在实例方法的基础上添加 @property 装饰器；并且仅有一个self参数<br>调用时，无需括号</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ############### 定义 ###############</span></span><br><span class="line">class Foo:</span><br><span class="line">    def func(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;func被调用&quot;</span>)</span><br><span class="line">    <span class="comment"># 定义property属性</span></span><br><span class="line">    @property</span><br><span class="line">    def prop(self):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;prop被调用&quot;</span>)</span><br><span class="line"><span class="comment"># ############### 调用 ###############</span></span><br><span class="line">foo_obj = Foo()</span><br><span class="line">foo_obj.func()  <span class="comment"># 调用实例方法</span></span><br><span class="line">foo_obj.prop  <span class="comment"># 调用property属性</span></span><br></pre></td></tr></table></figure><h3 id="装饰器方式"><a href="#装饰器方式" class="headerlink" title="装饰器方式"></a>装饰器方式</h3>类的实例方法上应用@property装饰器</li><li>经典类(有1种@property装饰器)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>:</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line">obj = Goods()</span><br><span class="line">result = obj.price  <span class="comment"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure></li><li>新式类(有3种@property装饰器)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Goods</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    python3中默认继承object类</span></span><br><span class="line"><span class="string">    只有在python3中才有@xxx.setter  @xxx.deleter</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@property&#x27;</span>)</span><br><span class="line"><span class="meta">    @price.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.setter&#x27;</span>)</span><br><span class="line"><span class="meta">    @price.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">price</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;@price.deleter&#x27;</span>)</span><br><span class="line">obj = Goods()</span><br><span class="line">obj.price          <span class="comment"># 自动执行 @property 修饰的 price 方法，并获取方法的返回值</span></span><br><span class="line">obj.price = <span class="number">123</span>    <span class="comment"># 自动执行 @price.setter 修饰的 price 方法，并将  123 赋值给方法的参数</span></span><br><span class="line"><span class="keyword">del</span> obj.price      <span class="comment"># 自动执行 @price.deleter 修饰的 price 方法</span></span><br></pre></td></tr></table></figure><h3 id="类属性方式"><a href="#类属性方式" class="headerlink" title="类属性方式"></a>类属性方式</h3>创建值为property对象的类属性</li><li>property方法中有个四个参数<br>第1个参数：方法名，调用 对象.属性 时自动触发执行方法<br>第2个参数：方法名，调用 对象.属性 ＝ XXX 时自动触发执行方法<br>第3个参数：方法名，调用 del 对象.属性 时自动触发执行方法<br>第4个参数：字符串，调用 对象.属性._<em>doc</em> ，此参数是该属性的描述信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_bar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;teacher&#x27;</span></span><br><span class="line"></span><br><span class="line">    BAR = <span class="built_in">property</span>(get_bar)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">reuslt = obj.BAR  <span class="comment"># 自动调用get_bar方法，并获取方法的返回值</span></span><br><span class="line"><span class="built_in">print</span>(reuslt)</span><br></pre></td></tr></table></figure><h3 id="使用property取代getter和setter方法"><a href="#使用property取代getter和setter方法" class="headerlink" title="使用property取代getter和setter方法"></a>使用property取代getter和setter方法</h3>重新实现一个属性的设置和读取方法,可做边界判定<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Money</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__money = <span class="number">0</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">money</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.__money</span><br><span class="line"><span class="meta">    @money.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">money</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, <span class="built_in">int</span>):</span><br><span class="line">            self.__money = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;error:不是整型数字&quot;</span>)</span><br><span class="line"></span><br><span class="line">a = Money()</span><br><span class="line">a.money = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(a.money)</span><br><span class="line">a.money = <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a.money)</span><br></pre></td></tr></table></figure><h2 id="8-元类"><a href="#8-元类" class="headerlink" title="8.元类"></a>8.元类</h2>元类就是用来创建这些类（对象）的，元类就是类的类。<h3 id="类也是对象"><a href="#类也是对象" class="headerlink" title="类也是对象"></a>类也是对象</h3>大多数编程语言中，类就是一组用来描述如何生成一个对象的代码段，<strong>Python中的类同样也是一种对象。</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义一个类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectCreator</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">本质仍然是一个对象，可以对它做如下的操作：</span></span><br><span class="line"><span class="string">赋值给一个变量</span></span><br><span class="line"><span class="string">拷贝</span></span><br><span class="line"><span class="string">增加属性</span></span><br><span class="line"><span class="string">作为函数参数进行传递</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(ObjectCreator)  <span class="comment"># 你可以打印一个类，因为它其实也是一个对象</span></span><br><span class="line">echo(ObjectCreator)  <span class="comment"># 你可以将类做为参数传给函数</span></span><br><span class="line"><span class="comment"># hasattr检查对象是否具有该方法</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>)) <span class="comment"># Fasle</span></span><br><span class="line">ObjectCreator.new_attribute = <span class="string">&#x27;foo&#x27;</span>  <span class="comment"># 你可以为类增加属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(ObjectCreator, <span class="string">&#x27;new_attribute&#x27;</span>)) <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(ObjectCreator.new_attribute) <span class="comment"># foo</span></span><br><span class="line">ObjectCreatorMirror = ObjectCreator  <span class="comment"># 你可以将类赋值给一个变量</span></span><br><span class="line"><span class="built_in">print</span>(ObjectCreatorMirror()) <span class="comment"># &lt;__main__.ObjectCreator object at 0x8997b4c&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用内建函数type创建类"><a href="#使用内建函数type创建类" class="headerlink" title="使用内建函数type创建类"></a>使用内建函数type创建类</h3>type可以接受一个类的描述作为参数，然后返回一个类<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按照普通定义类的方式</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>: <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(A))</span><br><span class="line"><span class="comment"># 使用type这种特殊方式</span></span><br><span class="line">B = <span class="built_in">type</span>(<span class="string">&quot;B&quot;</span>, (), &#123;&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">help</span>(B))</span><br></pre></td></tr></table></figure><h3 id="使用type创建带有属性的类"><a href="#使用type创建带有属性的类" class="headerlink" title="使用type创建带有属性的类"></a>使用type创建带有属性的类</h3><strong>type的第2个参数，元组中是父类的名字，而不是字符串<br>添加的属性是类属性，并不是实例属性</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    bar = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 翻译为type创建带有属性的类</span></span><br><span class="line">Foo = <span class="built_in">type</span>(<span class="string">&#x27;Foo&#x27;</span>, (), &#123;<span class="string">&#x27;bar&#x27;</span>: <span class="literal">True</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="使用type创建带有方法的类"><a href="#使用type创建带有方法的类" class="headerlink" title="使用type创建带有方法的类"></a>使用type创建带有方法的类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_b</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="built_in">print</span>(self.num)</span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_static</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----haha-----&quot;</span>)</span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_class</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(cls.num)</span><br><span class="line"><span class="comment"># 下面通过type来创建一个类，名字是B，继承A</span></span><br><span class="line">B = <span class="built_in">type</span>(<span class="string">&quot;B&quot;</span>, (A,), &#123;<span class="string">&quot;print_b&quot;</span>: print_b, <span class="string">&quot;print_static&quot;</span>: print_static, <span class="string">&quot;print_class&quot;</span>: print_class&#125;)</span><br><span class="line">b = B()  <span class="comment"># 创建实例对象</span></span><br><span class="line">b.print_b()  <span class="comment"># 调用实例方法</span></span><br><span class="line">b.print_static()  <span class="comment"># 调用静态方法</span></span><br><span class="line">b.print_class()  <span class="comment"># 调用类方法</span></span><br></pre></td></tr></table></figure><h3 id="自定义元类"><a href="#自定义元类" class="headerlink" title="自定义元类"></a>自定义元类</h3>元类的主要目的就是为了当创建类时能够自动地改变类<br>__metaclass__这个属性叫做元类，用来表示这个类是由谁来帮他实例化创建。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UpperAttrMetaClass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="comment"># __new__ 是在__init__之前被调用的特殊方法</span></span><br><span class="line">    <span class="comment"># __new__是用来创建对象并返回之的方法</span></span><br><span class="line">    <span class="comment"># 而__init__只是用来将传入的参数初始化给对象</span></span><br><span class="line">    <span class="comment"># 这里，创建的对象是类，我们希望能够自定义它，所以我们这里改写__new__</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__new__</span>(<span class="params">cls, class_name, class_parents, class_attr</span>):</span><br><span class="line">        <span class="comment"># 遍历属性字典，把不是__开头的属性名字变为大写</span></span><br><span class="line">        new_attr = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> name, value <span class="keyword">in</span> class_attr.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> name.startswith(<span class="string">&quot;__&quot;</span>):</span><br><span class="line">                new_attr[name.upper()] = value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">type</span>(class_name, class_parents, new_attr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>(<span class="built_in">object</span>, metaclass=UpperAttrMetaClass): <span class="comment"># 由UpperAttrMetaClass实例化创建</span></span><br><span class="line">    bar = <span class="string">&#x27;bip&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;bar&#x27;</span>)) <span class="comment"># 输出: False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(Foo, <span class="string">&#x27;BAR&#x27;</span>)) <span class="comment"># 输出:True</span></span><br><span class="line">f = Foo()</span><br><span class="line"><span class="built_in">print</span>(f.BAR) <span class="comment"># 输出:&#x27;bip&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="9-描述符"><a href="#9-描述符" class="headerlink" title="9.描述符"></a>9.描述符</h2><h3 id="getattr"><a href="#getattr" class="headerlink" title="getattr"></a><strong>getattr</strong></h3>重写__getattr__方法对类及其实例未定义的属性有效<br>如果访问的属性存在，就不会调用__getattr__方法(这个属性的存在，包括类属性和实例属性)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassA</span>:</span><br><span class="line">    x = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.y = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;__getattr__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = ClassA()</span><br><span class="line">    <span class="built_in">print</span>(a.x)  <span class="comment"># a</span></span><br><span class="line">    <span class="comment"># 使用实例对象直接访问实例存在的实例属性时,不会调用__getattr__方法</span></span><br><span class="line">    <span class="built_in">print</span>(a.y)  <span class="comment"># b</span></span><br><span class="line">    <span class="comment"># 使用实例对象直接访问实例不存在的实例属性时,会调用__getattr__方法</span></span><br><span class="line">    <span class="built_in">print</span>(a.z)  <span class="comment"># __getattr__</span></span><br></pre></td></tr></table></figure><h3 id="getattrbute"><a href="#getattrbute" class="headerlink" title="getattrbute"></a><strong>getattrbute</strong></h3>__getattribute__仅在新式类中可用，重写__getattrbute__方法对类对象或者实例对象的每个属性访问都有效。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassA</span>:</span><br><span class="line">    x = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.y = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattribute__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;__getattribute__被调用...&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;__getattribute__&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    a = ClassA()</span><br><span class="line">    <span class="comment"># 使用实例对象直接访问存在的类属性时,会调用__getattribute__方法</span></span><br><span class="line">    <span class="built_in">print</span>(a.x)  <span class="comment"># __getattribute__</span></span><br><span class="line">    <span class="comment"># 使用实例对象直接访问实例存在的实例属性时,会调用__getattribute__方法</span></span><br><span class="line">    <span class="built_in">print</span>(a.y)  <span class="comment"># __getattribute__</span></span><br><span class="line">    <span class="comment"># 使用实例对象直接访问实例不存在的实例属性时,也会调用__getattribute__方法</span></span><br><span class="line">    <span class="built_in">print</span>(a.z)  <span class="comment"># __getattribute__</span></span><br><span class="line">    <span class="built_in">print</span>(ClassA.x)  <span class="comment"># 通过类对象调用属性，不会执行__getattribute__方法</span></span><br></pre></td></tr></table></figure><strong>同时定义__getattribute__和__getattr__时，__getattr__方法不会再被调用，除非显示调用__getattr__方法或引发AttributeError异常。</strong><h3 id="描述符"><a href="#描述符" class="headerlink" title="描述符"></a>描述符</h3>描述符是具有“绑定行为”的对象属性，其属性访问已被描述符协议中的方法覆盖。<br>这些方法是__get__()，<strong>set</strong>()和 <strong>delete</strong>()。如果为对象定义了任何这些方法，则称其为描述符。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyDescriptor</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;get called&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;set called&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__delete__</span>(<span class="params">self, instance</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;delete called&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span>:</span><br><span class="line">    attr = MyDescriptor()</span><br><span class="line">foo = Foo()</span><br><span class="line">foo.attr <span class="comment"># get called</span></span><br><span class="line">foo.attr = <span class="string">&#x27;python&#x27;</span> <span class="comment"># set called</span></span><br><span class="line"><span class="keyword">del</span> foo.attr <span class="comment"># delete called</span></span><br><span class="line"><span class="comment"># 当访问 foo 的 attr 属性时， MyDescriptor 的 __get__ 方法被调用</span></span><br><span class="line"><span class="comment"># 当为 attr 设置一个新值时， MyDescriptor 的 __set__ 方法被调用</span></span><br><span class="line"><span class="comment"># 当为删除属性 attr 时， MyDescriptor 的 __delete__ 方法被调用</span></span><br></pre></td></tr></table></figure><h4 id="class类定义的过程"><a href="#class类定义的过程" class="headerlink" title="class类定义的过程"></a>class类定义的过程</h4><strong>python解释器遇到class时候，实际上会进行调用，去知道有哪些类属性和方法，然后将他们传递到元类type中去创建一个对象（类对象），因此class定义类实际上是被执行的</strong><h4 id="为什么用描述符"><a href="#为什么用描述符" class="headerlink" title="为什么用描述符"></a>为什么用描述符</h4><h5 id="可以做类型检查"><a href="#可以做类型检查" class="headerlink" title="可以做类型检查"></a>可以做类型检查</h5>Python是一个动态类型解释性语言，不像C&#x2F;C++等静态编译型语言，数据类型在编译时便可以进行验证，而Python中必须添加额外的类型检查逻辑代码才能做到这一点。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当使用实例访问name属性(即执行t.name)时，便会调用描述符的__get__方法。当使用实例对name属性进行赋值操作时(即t.name = &#x27;小小明明&#x27;)，可以看到描述符的__set__方法被调用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameDes</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.__name = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">def</span>  <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call __get__&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line">    <span class="keyword">def</span>  <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;call __set__&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>  <span class="built_in">isinstance</span>(value,<span class="built_in">str</span>):</span><br><span class="line">            self.__name = value</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;Must be an string&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="相对property属性更方便"><a href="#相对property属性更方便" class="headerlink" title="相对property属性更方便"></a>相对property属性更方便</h5>property来说，最大的缺点就是它们不能重复使用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NonNegative</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个可以屏蔽负数的描述符&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, default</span>):</span><br><span class="line">        self.default = default</span><br><span class="line">        self.data = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="comment"># 当调用描述符时 即：x.d</span></span><br><span class="line">        <span class="comment"># instance 就是调用的那个实例对象 x，如果是类对象则为None</span></span><br><span class="line">        <span class="comment"># owner 就是 type(x)</span></span><br><span class="line">        <span class="keyword">return</span> self.data.get(instance, self.default)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__set__</span>(<span class="params">self, instance, value</span>):</span><br><span class="line">        <span class="comment"># 当调用描述符时 即：x.d = val</span></span><br><span class="line">        <span class="comment"># instance 就是调用的那个实例对象 x</span></span><br><span class="line">        <span class="comment"># owner 就是 type(x)</span></span><br><span class="line">        <span class="keyword">if</span> value &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;设置有误: %s（请使用非负数）&quot;</span> % value)</span><br><span class="line">        self.data[instance] = value</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Movie</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="comment"># 定义描述符</span></span><br><span class="line">    rating = NonNegative(<span class="number">0</span>)</span><br><span class="line">    budget = NonNegative(<span class="number">0</span>)</span><br><span class="line">    gross = NonNegative(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, title, rating, budget, gross</span>):</span><br><span class="line">        self.title = title</span><br><span class="line">        self.rating = rating</span><br><span class="line">        self.budget = budget</span><br><span class="line">        self.gross = gross</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">profit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.gross - self.budget</span><br><span class="line">m = Movie(<span class="string">&#x27;三傻大闹宝莱坞&#x27;</span>, <span class="number">97</span>, <span class="number">964000</span>, <span class="number">1300000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电影评分：&quot;</span>, m.rating)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    m.rating = -<span class="number">100</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;电影预算：&quot;</span>, m.budget)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    m.budget = -<span class="number">4567</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure><h4 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h4>定义A类时，就已经开始通过元类要创建这个类对象，所以就需要将A类中的所有的类属性、方法都要通过字典的方式创建到type这个默认的元类中，就要通过装饰器确定此时b到底指向谁，此时b&#x3D;classmethod_new(b)<br>在执行classmethod_new时，创建了一个对象(其实就是描述符)<br>先要调用obj.b，得到一个返回值<br>执行上一步得到的返回值，即返回值()<br>需要得到一个返回值，又因为在通过实例对象调用类方法时，可能有实参进行传递，所以就需要这样一个函数，技能够调用原来b指向的函数，又能够再传递数据时接收数据，此时就用到了闭包<br>调用了定义的闭包，其又调用了之前的b指向的函数，从而完成类方法的功能<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 尝试完成 classmethod</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">classmethod_new</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, func</span>):</span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__get__</span>(<span class="params">self, instance, owner</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.func, instance, owner)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">call</span>(<span class="params">*args</span>):</span><br><span class="line">            self.func(owner, *args)</span><br><span class="line">        <span class="keyword">return</span> call</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    M = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----a 是实例方法----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod_new</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----b 是类方法方法1----&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cls.M)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----b 是类方法方法2----&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod_new</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">cls, num1, num2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----c 是类方法方法1----&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(cls.M + num1 + num2)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----c 是类方法方法2----&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = A()</span><br><span class="line">obj.b()</span><br><span class="line">A.b()</span><br><span class="line">obj.c(<span class="number">11</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python进阶&quot;&gt;&lt;a href=&quot;#Python进阶&quot; class=&quot;headerlink&quot; title=&quot;Python进阶&quot;&gt;&lt;/a&gt;Python进阶&lt;/h1&gt;&lt;h2 id=&quot;1-迭代器&quot;&gt;&lt;a href=&quot;#1-迭代器&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="Python" scheme="http://xczf.shop/cate%EF%BC%9Agories/Python/"/>
    
    
    <category term="Python" scheme="http://xczf.shop/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB</title>
    <link href="http://xczf.shop/2022/07/01/MongoDB/"/>
    <id>http://xczf.shop/2022/07/01/MongoDB/</id>
    <published>2022-07-01T11:00:41.000Z</published>
    <updated>2023-11-25T13:33:01.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="NOSQL"><a href="#NOSQL" class="headerlink" title="NOSQL"></a>NOSQL</h2><p>  NoSQL是非关系型的数据库。NoSQL也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。<br>  NoSQL用于超大规模数据的存储，这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。<br>  优点：高可扩展性，分布式计算，低成本，架构的灵活性，半结构化数据，没有复杂的关系<br>  缺点：没有标准化，查询功能有限，最终一致是不直观的程序</p><h3 id="键值-Key-Value-存储数据库"><a href="#键值-Key-Value-存储数据库" class="headerlink" title="键值(Key-Value)存储数据库"></a>键值(Key-Value)存储数据库</h3><p>键值数据库就等于传统语言中使用的哈希表，通过key添加、查询或者删除数据<br>优点：查询速度更快 缺点：数据无结构化，通常只被当做字符串或者二进制数据存储<br>应用场景：内容缓存、用户信息比如会话、配置信息、购物车等等，主要用于处理大量数据的高访问负载<br>NoSQL代表：Redis、Memcached</p><h3 id="文档型数据库"><a href="#文档型数据库" class="headerlink" title="文档型数据库"></a>文档型数据库</h3><p>文档数据库将数据以文档的形式储存，类似JSON，是一系列数据项的集合。每个数据项<br>都有一个名称与对应的值，值既可以是简单的数据类型；也可以是复杂的类型。<br>优点数据结构要求不严格，表结构可变<br>NoSQL代表：MongoDB、CouchDB</p><h3 id="列数据库"><a href="#列数据库" class="headerlink" title="列数据库"></a>列数据库</h3><p>列存储数据库将数据存储在列族中，将多个列集合成一个列族，键仍然存在，但是他们<br>的特点是指向多个列。<br>优点：列存储查找速度快，可扩展性强，更容容易进行分布式扩展，适用于分布式的文件系<br>统，应对分布式存储的海量数据 缺点：查询性能不高，缺乏统一的查询语法<br>NoSQL代表：Cassandra、HBase</p><h3 id="图形-Graph-数据库"><a href="#图形-Graph-数据库" class="headerlink" title="图形(Graph)数据库"></a>图形(Graph)数据库</h3><p>图形数据库允许我们将数据以图的方式存储<br>优点：图形相关算法，比如最短路径寻址，N度关系查找等<br>缺点：很多时候需要对整个图做计算才能提出需求的信息，分布式的群集方案不好做，处理超<br>级节点乏力，没有分片存储机制，国内社区不活跃<br>NoSQL代表：Neo4j、Infinite Graph</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><p>MongoDB是一个基于分布式文件存储的NoSQL数据库，由C++语言编写。为WEB应用提供可扩展的高性能数据存储解决方案。</p><hr><p>MongoDB 与关系型数据库术语对比<br><img src="/image/MongoDB/1.jpg" alt="1"></p><hr><h3 id="部署MongoDB"><a href="#部署MongoDB" class="headerlink" title="部署MongoDB"></a>部署MongoDB</h3><p>下载地址：<a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载压缩包并且解压</span></span><br><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-4.4.6.tgz</span><br><span class="line">tar xzvf mongodb-linux-x86_64-rhel70-4.4.6.tgz -C /usr/local</span><br><span class="line"><span class="built_in">cd</span> /usr/local/</span><br><span class="line"><span class="comment"># 软链接(快捷方式)</span></span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/mongodb-linux-x86_64-rhel70-4.4.6 /usr/local/mongodb</span><br><span class="line"><span class="comment"># 创建存放数据的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/data/db</span><br><span class="line"><span class="comment"># 创建存放日志的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/logs</span><br><span class="line"><span class="comment"># 创建日志记录文件</span></span><br><span class="line"><span class="built_in">touch</span> /usr/local/mongodb/logs/mongodb.log</span><br></pre></td></tr></table></figure><h3 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h3><p>MongoDB 的默认启动方式为前台启动,MongoDB后台启动就是以守护进程的方式启动，命令中添加 –fork</p><h4 id="前台运行"><a href="#前台运行" class="headerlink" title="前台运行"></a>前台运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mongodb/bin</span><br><span class="line">./mongod \</span><br><span class="line">--dbpath /usr/local/mongodb/data/db/ \</span><br><span class="line">--logpath /usr/local/mongodb/logs/mongodb.log \</span><br><span class="line">--logappend \</span><br><span class="line">--port 27017 \</span><br><span class="line">--bind_ip 0.0.0.0</span><br><span class="line">================================================</span><br><span class="line">* --dbpath：指定数据文件存放目录</span><br><span class="line">* --logpath：指定日志文件，注意是指定文件不是目录</span><br><span class="line">* --logappend：使用追加的方式记录日志</span><br><span class="line">* --port：指定端口，默认为 27017</span><br><span class="line">* --bind_ip：绑定服务 IP，若绑定 127.0.0.1，则只能本机访问，默认为本机地址</span><br></pre></td></tr></table></figure><p>关闭：Ctrl+c</p><h4 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/mongodb/bin</span><br><span class="line">./mongod \</span><br><span class="line">--dbpath /usr/local/mongodb/data/db/ \</span><br><span class="line">--logpath /usr/local/mongodb/logs/mongodb.log \</span><br><span class="line">--logappend \</span><br><span class="line">--port 27017 \</span><br><span class="line">--bind_ip 0.0.0.0 \</span><br><span class="line">--fork</span><br></pre></td></tr></table></figure><p>关闭</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令启动方式的关闭</span></span><br><span class="line">./mongod --dbpath /usr/local/mongodb/data/db/ --logpath /usr/local/mongodb/logs/mongodb.log --logappend --port 27017 --bind_ip 0.0.0.0 --fork --shutdown</span><br><span class="line"><span class="comment"># 配置文件启动方式的关闭</span></span><br><span class="line">bin/mongod -f /usr/local/mongodb/bin/mongodb.conf --shutdown</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><p>命令启动的方式并不适合管理，毕竟每次输入命令都需要考虑各参数的配置,命令启动的方式并不适合管理，毕竟每次输入命令都需要考虑各参数的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/bin/mongodb.conf</span><br><span class="line"><span class="comment"># 数据文件存放目录</span></span><br><span class="line">dbpath = /usr/local/mongodb/data/db</span><br><span class="line"><span class="comment"># 日志文件存放目录</span></span><br><span class="line">logpath = /usr/local/mongodb/logs/mongodb.log</span><br><span class="line"><span class="comment"># 以追加的方式记录日志</span></span><br><span class="line">logappend = <span class="literal">true</span></span><br><span class="line"><span class="comment"># 端口默认为 27017</span></span><br><span class="line">port = 27017</span><br><span class="line"><span class="comment"># 对访问 IP 地址不做限制，默认为本机地址</span></span><br><span class="line">bind_ip = 0.0.0.0</span><br><span class="line"><span class="comment"># 以守护进程的方式启用，即在后台运行</span></span><br><span class="line">fork = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/lib/systemd/system/mongodb.service</span><br><span class="line">***</span><br><span class="line">[Unit]</span><br><span class="line">Description=mongodb</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=/usr/local/mongodb/bin/mongod --config /usr/local/mongodb/bin/mongodb.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/usr/local/mongodb/bin/mongod --shutdown --config /usr/local/mongodb/bin/mongodb.conf</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">***</span><br><span class="line"><span class="built_in">chmod</span> 754 /usr/lib/systemd/system/mongodb.service</span><br><span class="line">systemctl restart mongodb</span><br></pre></td></tr></table></figure><h4 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加环境变量</span></span><br><span class="line">vim /etc/profile</span><br><span class="line">***</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/local/mongodb/bin/:<span class="variable">$PATH</span></span><br><span class="line">***</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">mongo</span><br></pre></td></tr></table></figure><h3 id="MongoDB-函数关闭"><a href="#MongoDB-函数关闭" class="headerlink" title="MongoDB 函数关闭"></a>MongoDB 函数关闭</h3><p>连接到 MongoDB 服务后，切换到 admin 数据库，并使用相关函数关闭服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 连接 mongodb</span></span><br><span class="line">bin/mongo</span><br><span class="line"><span class="comment"># 切换 admin 数据库</span></span><br><span class="line">use admin</span><br><span class="line"><span class="comment"># 执行以下函数(2选1)即可关闭服务</span></span><br><span class="line">db.shutdownServer()</span><br><span class="line">db.runCommand(<span class="string">&quot;shutdown&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="图形化工具"><a href="#图形化工具" class="headerlink" title="图形化工具"></a>图形化工具</h3><p><a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="选择和创建数据库"><a href="#选择和创建数据库" class="headerlink" title="选择和创建数据库"></a>选择和创建数据库</h4><p>数据库名条件(不能是空字符串,不得含有’ ‘（空格)、.、$、&#x2F;、\和\0 (空字符),应全部小写,最多64字节)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名称</span><br></pre></td></tr></table></figure><p>如果数据库不存在则自动创建<br><strong>MongoDB中默认的数据库为test，如果你没有选择数据库，集合将存放在test数据库中</strong><br><strong>在MongoDB中，集合只有在内容插入后才会创建</strong>，创建集合(数据表)后要再插入<br>一个文档(记录)，集合才会真正创建</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use articledb</span><br></pre></td></tr></table></figure><p>查看当前正在使用的数据库命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db</span><br></pre></td></tr></table></figure><p>查看有权限查看的所有数据库命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs 或 show databases</span><br></pre></td></tr></table></figure><h5 id="保留的数据库"><a href="#保留的数据库" class="headerlink" title="保留的数据库"></a>保留的数据库</h5><p>admin：从权限的角度来看，这是’root’数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。<br>local：这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合,local库是<br>MongoDB的系统库，记录着时间戳和索引和复制集等信息<br>config：当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息</p><h4 id="数据库的删除"><a href="#数据库的删除" class="headerlink" title="数据库的删除"></a>数据库的删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase() # 主要用来删除已经持久化的数据库</span><br></pre></td></tr></table></figure><h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><p>集合，类似于关系型数据库中的表<br>集合的命名(不能是空字符串””,不能含有\0字符,不能以”system.”开头,不能含有保留字符)</p><h5 id="显式创建"><a href="#显式创建" class="headerlink" title="显式创建"></a>显式创建</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(name) # 要创建的集合名称</span><br><span class="line">show tables 或 show collections # 查看当前库中的表</span><br></pre></td></tr></table></figure><h5 id="隐式创建"><a href="#隐式创建" class="headerlink" title="隐式创建"></a>隐式创建</h5><p>当向一个集合中插入一个文档的时候，如果集合不存在，则会自动创建集合,通常我们使用隐式创建文档即可</p><h5 id="集合的删除"><a href="#集合的删除" class="headerlink" title="集合的删除"></a>集合的删除</h5><p>如果成功删除选定集合，则drop()方法返回true，否则返回false</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><p>文档的数据结构和JSON基本一样,所有存储在集合中的数据都是BSON格式</p><h5 id="文档的插入"><a href="#文档的插入" class="headerlink" title="文档的插入"></a>文档的插入</h5><p>单个文档插入:使用<strong>insert()或save()方法</strong>向集合中插入文档<br><strong>mongo中的数字，默认情况下是double类型，如果要存整数型，必须使用函数NumberInt</strong><br>插入当前日期使用new Date()<br>插入的数据没有指定 id，会自动生成主键值<br>某字段没值，可以复制为null，或不写该字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">db.collection.insert(</span><br><span class="line">&lt;document or array of documents&gt;, # 要插入到集合中的文档或文档数组</span><br><span class="line">&#123;</span><br><span class="line">  writeConcern: &lt;document&gt;, # 插入选择的性能与可靠性级别</span><br><span class="line">  ordered: &lt;boolean&gt; # 是否排序</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"># 案例</span><br><span class="line">db.comment.insert(</span><br><span class="line">  &#123;</span><br><span class="line">&quot;articleid&quot;:&quot;100000&quot;,</span><br><span class="line">&quot;content&quot;:&quot;welcome to study mongodb&quot;,</span><br><span class="line">&quot;userid&quot;:&quot;1001&quot;,</span><br><span class="line">&quot;nickname&quot;:&quot;zhangsan&quot;,</span><br><span class="line">&quot;createdatetime&quot;:new Date(),</span><br><span class="line">&quot;likenum&quot;:NumberInt(10),</span><br><span class="line">&quot;state&quot;:null</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"># 成功 WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</span><br></pre></td></tr></table></figure><p>批量插入<br><strong>数据插入失败，将会终止插入，但已经插入成功的数据不会回滚掉</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">db.comment.insertMany([</span><br><span class="line">  &#123;</span><br><span class="line">&quot;_id&quot;:&quot;1&quot;,</span><br><span class="line">&quot;articleid&quot;:&quot;100001&quot;,</span><br><span class="line">&quot;content&quot;:&quot;一生一代一双人，争教两处销魂。&quot;,</span><br><span class="line">&quot;userid&quot;:&quot;1002&quot;,</span><br><span class="line">&quot;nickname&quot;:&quot;李四&quot;,</span><br><span class="line">&quot;createdatetime&quot;:new Date(),</span><br><span class="line">&quot;likenum&quot;:NumberInt(1000),</span><br><span class="line">&quot;state&quot;:&quot;1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">&quot;_id&quot;:&quot;2&quot;,</span><br><span class="line">&quot;articleid&quot;:&quot;100002&quot;,</span><br><span class="line">&quot;content&quot;:&quot;相思相望不相亲，天为谁春？&quot;,</span><br><span class="line">&quot;userid&quot;:&quot;1003&quot;,</span><br><span class="line">&quot;nickname&quot;:&quot;王五&quot;,</span><br><span class="line">&quot;createdatetime&quot;:new Date(),</span><br><span class="line">&quot;likenum&quot;:NumberInt(1000),</span><br><span class="line">&quot;state&quot;:&quot;1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">&quot;_id&quot;:&quot;3&quot;,</span><br><span class="line">&quot;articleid&quot;:&quot;100003&quot;,</span><br><span class="line">&quot;content&quot;:&quot;浆向蓝桥易乞，药成碧海难奔。&quot;,</span><br><span class="line">&quot;userid&quot;:&quot;1004&quot;,</span><br><span class="line">&quot;nickname&quot;:&quot;赵六&quot;,</span><br><span class="line">&quot;createdatetime&quot;:new Date(),</span><br><span class="line">&quot;likenum&quot;:NumberInt(1000),</span><br><span class="line">&quot;state&quot;:&quot;1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">&quot;_id&quot;:&quot;4&quot;,</span><br><span class="line">&quot;articleid&quot;:&quot;100004&quot;,</span><br><span class="line">&quot;content&quot;:&quot;若容相访饮牛津，相对忘贫。&quot;,</span><br><span class="line">&quot;userid&quot;:&quot;1005&quot;,</span><br><span class="line">&quot;nickname&quot;:&quot;老八&quot;,</span><br><span class="line">&quot;createdatetime&quot;:new Date(),</span><br><span class="line">&quot;likenum&quot;:NumberInt(1000),</span><br><span class="line">&quot;state&quot;:&quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"># 成功 &#123; &quot;acknowledged&quot; : true, &quot;insertedIds&quot; : [ &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot; ] &#125;</span><br></pre></td></tr></table></figure><p>为批量插入由于数据较多容易出现失败，因此，可以<strong>使用try catch进行异常捕捉处理</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">try&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;catch(e)&#123;</span><br><span class="line">print(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="文档基本查询"><a href="#文档基本查询" class="headerlink" title="文档基本查询"></a>文档基本查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 格式</span><br><span class="line">db.collection.find(&lt;query&gt;, [projection])</span><br><span class="line">==============================================</span><br><span class="line">db.comment.find()</span><br><span class="line"># 查询所有</span><br><span class="line">db.comment.find(&#123;&#125;)</span><br><span class="line"># 查询所有</span><br><span class="line">db.comment.find().pretty()</span><br><span class="line"># 并且以JSON格式显示</span><br><span class="line">db.comment.find(&#123;userid:&#x27;1003&#x27;&#125;).pretty()</span><br><span class="line"># 查询指定字段</span><br><span class="line">db.comment.findOne(&#123;&#x27;state&#x27;:&#x27;1&#x27;&#125;)</span><br><span class="line"># 只显示查询到的第一个记录</span><br></pre></td></tr></table></figure><p>投影查询：查询结果返回部分字段，则需要使用投影查询(不显示所有字段，只显示指定的字段)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;&quot;userid&quot;:&quot;1002&quot;&#125;,&quot;likenum&quot;:1,nickname:1&#125;).pretty()</span><br><span class="line"># 只显示likenum和nickname字段，1是显示</span><br><span class="line">db.comment.find(&#123;&quot;userid&quot;:&quot;1002&quot;&#125;,&#123;&quot;likenum&quot;:0&#125;).pretty()</span><br><span class="line"># 显示的时候隐藏likenum字段，0是不显示</span><br><span class="line">db.comment.find(&#123;&#125;,&#123;&quot;likenum&quot;:1,nickname:1&#125;).pretty()</span><br><span class="line"># 查询所有字段，但是只显示likenum和nickname字段</span><br></pre></td></tr></table></figure><h5 id="文档更新"><a href="#文档更新" class="headerlink" title="文档更新"></a>文档更新</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">  &lt;query&gt;, # 更新的选择条件</span><br><span class="line">  &lt;update&gt;, # 要应用的修改</span><br><span class="line">  &#123;</span><br><span class="line">upsert: &lt;boolean&gt;, # 可选，如果设置为true,则在没有与查询条件匹配的文档时创建新文档，默认为false</span><br><span class="line">multi: &lt;boolean&gt;, # 可选，如果设置为true,则更新符合查询条件的多个文档，如果设置为false，则更新一个文档，默认值为false</span><br><span class="line">writeConcern: &lt;document&gt;, # 可选，表示写问题的文档，抛出异常的级别</span><br><span class="line">collation: &lt;document&gt;, # 可选，指定要用于操作的校对规则例如字母大小写和重音标记规则</span><br><span class="line">arrayFilters: [ &lt;filterdocument1&gt;, ... ],</span><br><span class="line">hint: &lt;document|string&gt; # 可选，指定用于支持查询索引的文档或字符串</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>覆盖修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:&quot;1&quot;&#125;,&#123;likenum:NumberInt(1001)&#125;)</span><br><span class="line"># 修改_id为1的记录，点赞量为1001</span><br><span class="line">db.comment.find(&#123;_id:&quot;1&quot;&#125;).pretty()</span><br><span class="line"># 查看这条记录，发现update是覆盖修改</span><br></pre></td></tr></table></figure><p>局部修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.comment.update(&#123;_id:&quot;2&quot;&#125;,&#123;$set:&#123;likenum:NumberInt(889)&#125;&#125;)</span><br><span class="line"># 修改_id为2的记录，点赞量为889</span><br></pre></td></tr></table></figure><p>批量修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 修改所有点赞量为1000的昵称为丁一</span><br><span class="line">db.comment.update(&#123;likenum:NumberInt(1000)&#125;,&#123;$set:&#123;nickname:&quot;丁一&quot;&#125;&#125;)</span><br><span class="line"># 默认值修改第一条数据</span><br><span class="line">db.comment.update(&#123;likenum:NumberInt(1000)&#125;,&#123;$set:&#123;nickname:&quot;丁一&quot;&#125;&#125;,&#123;multi:true&#125;)</span><br><span class="line"># 修改所有符合条件的记录</span><br><span class="line">db.comment.find().pretty()</span><br></pre></td></tr></table></figure><p>列值增长</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 某列值在原有值的基础上进行增加或减少,把_id为3的点赞数加一</span><br><span class="line">db.comment.update(&#123;_id:&quot;3&quot;&#125;,&#123;$inc:&#123;likenum:NumberInt(1)&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.comment.remove(&#123;&#125;)</span><br><span class="line"># 删除comment集合下的所有数据</span><br><span class="line">db.comment.remove(&#123;_id:&quot;1&quot;&#125;)</span><br><span class="line"># 删除_id=1的记录</span><br></pre></td></tr></table></figure><h4 id="文档分页查询"><a href="#文档分页查询" class="headerlink" title="文档分页查询"></a>文档分页查询</h4><h5 id="统计查询"><a href="#统计查询" class="headerlink" title="统计查询"></a>统计查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.collection.count(query,options) # query查询选择条件，options可选，用于修改计数的额外选项</span><br><span class="line">db.comment.count()</span><br><span class="line"># 统计comment集合的所有的记录数</span><br><span class="line">db.comment.count(&#123;userid:&quot;1003&quot;&#125;)</span><br><span class="line"># 统计userid为1003的记录条数</span><br></pre></td></tr></table></figure><h5 id="分页列表查询"><a href="#分页列表查询" class="headerlink" title="分页列表查询"></a>分页列表查询</h5><p>使用limit()方法来读取指定数量的数据，使用skip()方法来跳过指定数量的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find().limit(3)</span><br><span class="line"># 获取3条记录</span><br><span class="line">db.comment.find().skip(3)</span><br><span class="line"># 从第4个记录开始获取</span><br></pre></td></tr></table></figure><h5 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h5><p>sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用1和-1来指定排序的方式，其中1为升序排序，而-1是用于降序排序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 对userid降序排序，并对访问量进行升序排序</span><br><span class="line">db.comment.find().sort(&#123;userid:-1,likenum:1&#125;)</span><br></pre></td></tr></table></figure><p><strong>skip()，limilt()，sort()三个放在一起执行的时候，执行的顺序是先sort()，然后是skip()，最后是显示的limit()</strong></p><h5 id="正则复杂条件查询"><a href="#正则复杂条件查询" class="headerlink" title="正则复杂条件查询"></a>正则复杂条件查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;content:/碧海/&#125;)</span><br><span class="line"># 查找内容里面包含碧海的</span><br><span class="line">db.comment.find(&#123;content:/^相思/&#125;)</span><br><span class="line"># 查找以相思开头的</span><br></pre></td></tr></table></figure><h5 id="比较查询"><a href="#比较查询" class="headerlink" title="比较查询"></a>比较查询</h5><p>$gt：大于<br>$lt：小于<br>$gte：大于等于<br>$lte：小于等于<br>$ne：不等于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;likenum:&#123;$gt:NumberInt(800)&#125;&#125;)</span><br><span class="line"># 查询点赞数大于800的记录</span><br></pre></td></tr></table></figure><h5 id="包含查询"><a href="#包含查询" class="headerlink" title="包含查询"></a>包含查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&#123;$in:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;)</span><br><span class="line"># 查询评论的集合中userid字段包含1003或1004的文档</span><br><span class="line">db.comment.find(&#123;userid:&#123;$nin:[&quot;1003&quot;,&quot;1004&quot;]&#125;&#125;)</span><br><span class="line"># 不包含</span><br></pre></td></tr></table></figure><h5 id="条件连接查询"><a href="#条件连接查询" class="headerlink" title="条件连接查询"></a>条件连接查询</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;$and:[&#123;likenum:&#123;$gte:NumberInt(700)&#125;&#125;,&#123;likenum:&#123;$lt:NumberInt(2000)&#125;&#125;]&#125;)</span><br><span class="line"># 查询评论集合中likenum大于等于700并且小于2000的文档</span><br><span class="line">db.comment.find(&#123;$or:[&#123;userid:&quot;1003&quot;&#125;,&#123;likenum:&#123;$lt:1000&#125;&#125;]&#125;)</span><br><span class="line"># 查询评论集合中userid为1003，或者点赞数小于1000的文档记录</span><br></pre></td></tr></table></figure><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>聚合(aggregate)是基于数据处理的聚合管道，每个文档通过一个由多个阶段（stage）组成的管道，可以对每个阶段的管道进行分组、过滤等功能，然后经过一系列的处理，输出相应的结果。</p><h4 id="match"><a href="#match" class="headerlink" title="$match"></a>$match</h4><p>$match用于进行数据的过滤，是在能够在聚合操作中使用的命令，和<strong>find区别在于$match 操作可以把结果交给下一个管道处理，而find不行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 查询年龄为18岁的学生</span><br><span class="line">db.stu.aggregate(&#123;$match:&#123;age:18&#125;&#125;)</span><br><span class="line"># 查询年龄大于20的学生</span><br><span class="line">db.stu.aggregate(&#123;&quot;$match&quot;: &#123;age:&#123;&quot;$gt&quot;: 18&#125;&#125;&#125;)</span><br><span class="line"># 查询年龄为18~40之间的学生</span><br><span class="line">db.stu.aggregate(&#123;$match:&#123;age:&#123;$gte:18, $lte:40&#125;&#125;&#125;)</span><br><span class="line"># 查询年龄为18~40之间gender为true的学生</span><br><span class="line">db.stu.aggregate(&#123;$match:&#123;age:&#123;$gte:18, $lte:40&#125;, gender:true&#125;&#125;)</span><br><span class="line"># 查询年龄大于20的男女学生的人数</span><br><span class="line">db.stu.aggregate([</span><br><span class="line">    &#123;$match:&#123;age:&#123;$gt:20&#125;&#125;&#125;,</span><br><span class="line">    &#123;$group:&#123;_id:&quot;$gender&quot;,counter:&#123;$sum:1&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="group"><a href="#group" class="headerlink" title="$group"></a>$group</h4><p>$group是所有聚合命令中用的最多的一个命令，用来将集合中的文档分组，可用于统计结果<br>_ id为必选字段，为被分组字段，可为空或null<br>accumulator为可选字段，其中可包含一下运算符：<br>$sum： 计算总和， $sum:1 表示以1倍计数<br>$avg： 计算平均值<br>$min： 获取最⼩值<br>$max： 获取最⼤值<br>$push： 在结果⽂档中插⼊值到⼀个数组中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 按照性别进行分组</span><br><span class="line">db.stu.aggregate(&#123;$group:&#123;_id:&quot;$gender&quot;&#125;&#125;)</span><br><span class="line"># 按照性别分组，显示每组的数量</span><br><span class="line">db.stu.aggregate(&#123;$group:&#123;_id:&quot;$gender&quot;, &quot;数量&quot;: &#123;$sum: 1&#125;&#125;&#125;)</span><br><span class="line"># 按照性别分组，显示每组的数量、姓名</span><br><span class="line">db.stu.aggregate(&#123;$group:&#123;_id:&quot;$gender&quot;, &quot;数量&quot;: &#123;$sum: 1&#125;, &quot;姓名&quot;: &#123;$push: &quot;$name&quot;&#125;&#125;&#125;)</span><br><span class="line"># 按照性别分组，显示每组的数量、姓名、平均年龄</span><br><span class="line">db.stu.aggregate(&#123;$group:&#123;_id:&quot;$gender&quot;, &quot;数量&quot;: &#123;$sum: 1&#125;, &quot;姓名&quot;: &#123;$push: &quot;$name&quot;&#125;, &quot;平均年龄&quot;:&#123;$avg:&quot;$age&quot;&#125;&#125;&#125;)</span><br></pre></td></tr></table></figure><h5 id="group-by-null"><a href="#group-by-null" class="headerlink" title="group by null"></a>group by null</h5><p>当我们需要统计整个文档的时候，$group 的另一种用途就是把整个文档分为一组进行统计<br>_ id:null 表示不指定分组的字段，即统计整个文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 统计所有平均年龄</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:</span><br><span class="line">        &#123;</span><br><span class="line">            _id:null,</span><br><span class="line">            &quot;平均年龄&quot;:&#123;$avg:&quot;$age&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="数据透视"><a href="#数据透视" class="headerlink" title="数据透视"></a>数据透视</h5><p>正常情况在统计的不同性别的时候，需要知道所有的name，需要逐条观察，如果通过某种方式把所有的name放到一起，那么此时就可以理解为数据透视</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:</span><br><span class="line">        &#123;</span><br><span class="line">            _id:null,</span><br><span class="line">            name:&#123;$push:&quot;$name&quot;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="project"><a href="#project" class="headerlink" title="$project"></a>$project</h4><p>$project用于修改文档的输入输出结构，例如重命名，增加，删除字段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查询学生的年龄、姓名，仅输出年龄姓名</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$project:&#123;_id:0,name:1,age:1&#125;&#125;</span><br><span class="line">)</span><br><span class="line"># 查询男女生的人数</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:&#123;_id:&quot;$gender&quot;,counter:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$project:&#123;_id:0,counter:1&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="$sort"></a>$sort</h4><p>$sort用于将输入的文档排序后输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 查询学生信息，按照年龄升序</span><br><span class="line">db.stu.aggregate(&#123;$sort:&#123;age:1&#125;&#125;)</span><br><span class="line"># 查询男女人数，按照人数降序</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:&#123;_id:&quot;$gender&quot;, counter:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort:&#123;counter:-1&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="skip和-limit"><a href="#skip和-limit" class="headerlink" title="$skip和$limit"></a>$skip和$limit</h4><p>$limit限制返回数据的条数<br>$skip 跳过指定的文档数，并返回剩下的文档数<br>同时使用时先使用skip在使用limit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 查询2条学生信息</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$limit:2&#125;</span><br><span class="line">)</span><br><span class="line"># 查询从第3条开始的学生信息</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$skip:2&#125;</span><br><span class="line">)</span><br><span class="line"># 统计男女生人数，按照人数升序，返回第二条数据</span><br><span class="line">db.stu.aggregate(</span><br><span class="line">    &#123;$group:&#123;_id:&quot;$gender&quot;,counter:&#123;$sum:1&#125;&#125;&#125;,</span><br><span class="line">    &#123;$sort:&#123;counter:-1&#125;&#125;,</span><br><span class="line">    &#123;$skip:1&#125;,</span><br><span class="line">    &#123;$limit:1&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>  索引支持在MongoDB中高效地执行查询。如果没有索引，MongoDB必须执行全集合扫描，即扫描集合中的每个文档，以选择与查询语句 匹配的文档。查询存在适当的索引，MongoDB可以使用该索引限制必须检查的文档数。 索引是特殊的数据结构，它以易于遍历的形式存储集合数据集的一小部分。索引存储特定字段或一组字段的值，按字段值排序。索引项的排 序支持有效的相等匹配和基于范围的查询操作。</p><h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><p>单字段索引:MongoDB支持在文档的单个字段上创建用户定义的升序&#x2F;降序索引，称为单字段索引。<br>复合索引：如果符合索引由{userid: 1, score: -1}组成，则索，引首先按userid正序排序，然后在每个userid的值内，再按照score倒序排序。</p><h4 id="索引查看"><a href="#索引查看" class="headerlink" title="索引查看"></a>索引查看</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.comment.getIndexes()</span><br><span class="line">***</span><br><span class="line">[ &#123;</span><br><span class="line">&quot;v&quot; : 2,</span><br><span class="line">&quot;key&quot; : &#123;</span><br><span class="line">&quot;_id&quot; : 1</span><br><span class="line">&#125;,</span><br><span class="line">&quot;name&quot; : &quot;_id_&quot;</span><br><span class="line">&#125; ]</span><br><span class="line">***</span><br></pre></td></tr></table></figure><h4 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.collection.createIndex(keys, options)</span><br><span class="line"># 单字段索引</span><br><span class="line">db.comment.createIndex(&#123;userid:1&#125;)</span><br><span class="line"># 复合索引：对userid和nickname同时建立</span><br><span class="line">db.comment.createIndex(&#123;userid:1,nickname:-1&#125;)</span><br></pre></td></tr></table></figure><h4 id="索引的移除"><a href="#索引的移除" class="headerlink" title="索引的移除"></a>索引的移除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection.dropIndex(index)</span><br><span class="line">db.comment.dropIndex(&#123;userid:1&#125;)</span><br><span class="line"># &#123; &quot;nIndexesWas&quot; : 3, &quot;ok&quot; : 1 &#125;</span><br><span class="line">db.comment.getIndexes()</span><br><span class="line"># 再次查看发现已经删除</span><br><span class="line">db.comment.dropIndexes()</span><br><span class="line"># 删除所有索引</span><br></pre></td></tr></table></figure><h4 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h4><p><strong>“stage” : “COLLSCAN”, 注意这边是全局扫描</strong><br>当查询条件和查询的投影仅包含索引字段时，MongoDB直接从索引返回结果，而不扫描任何文档或将文档带入内存。这些覆盖的查询可以非常有效</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.comment.find(&#123;userid:&quot;1003&quot;&#125;).explain()</span><br></pre></td></tr></table></figure><h3 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h3><p>保证数据库安全，主要用于灾难处理</p><ul><li>备份<br>-h： 服务器地址， 也可以指定端⼝号<br>-d： 需要备份的数据库名称<br>-o： 备份的数据存放位置， 此⽬录中存放着备份出来的数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br></pre></td></tr></table></figure></li><li>恢复<br>-h： 服务器地址<br>-d： 需要恢复的数据库实例<br>–dir： 备份数据所在位置<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h dbhost -d dbname --<span class="built_in">dir</span> dbdirectory</span><br></pre></td></tr></table></figure><h3 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h3>MongoDB是没有默认管理员账号，所以要先添加管理员账号，并且MongoDB服务器需要在运行的时候开启验证模式</li><li>以权限认证的方式启动MongoDB数据库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mongod -auth</span><br><span class="line"># 动信息中会有信息[initandlisten] options: &#123; security: &#123; authorization: &quot;enabled&quot; &#125; &#125;</span><br></pre></td></tr></table></figure></li><li>创建超级用户<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 切换数据库</span><br><span class="line">use admin</span><br><span class="line"># 创建超级用户</span><br><span class="line">db.createUser(&#123;&quot;user&quot;:&quot;python&quot;,&quot;pwd&quot;:&quot;python&quot;,&quot;roles&quot;:[&quot;root&quot;]&#125;)</span><br><span class="line"># 此时再使用数据库各命令的时候会报权限错误，需要认证才能执行相应操作</span><br><span class="line">use admin</span><br><span class="line">db.auth(&#x27;python&#x27;,&#x27;python&#x27;)</span><br></pre></td></tr></table></figure></li><li>创建普通用户<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建普通用户user1,该用户在test1上的权限是只读</span><br><span class="line">db.createUser(&#123;&quot;user&quot;:&quot;user1&quot;, &quot;pwd&quot;:&quot;pwd1&quot;, roles:[&quot;read&quot;]&#125;)</span><br><span class="line"># 创建普通用户user2,该用户在test1上的权限是读写</span><br><span class="line">db.createUser(&#123;&quot;user&quot;:&quot;user2&quot;, &quot;pwd&quot;:&quot;pwd1&quot;, roles:[&quot;readWrite&quot;]&#125;)</span><br></pre></td></tr></table></figure></li><li>查看创建的用户<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">show users</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : &quot;admin.python&quot;,</span><br><span class="line">    &quot;user&quot; : &quot;python&quot;,</span><br><span class="line">    &quot;db&quot; : &quot;admin&quot;,</span><br><span class="line">    &quot;roles&quot; : [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;role&quot; : &quot;root&quot;,</span><br><span class="line">            &quot;db&quot; : &quot;admin&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除用户<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropUser(&#x27;python&#x27;)</span><br></pre></td></tr></table></figure><h2 id="副本集"><a href="#副本集" class="headerlink" title="副本集"></a>副本集</h2>副本集（Replica Set）是一组维护相同数据集的mongod服务。 副本集可提供冗余和高<br>可用性，是所有生产部署的基础。副本集类似于有自动故障恢复功能的主从集群。</li><li>冗余和数据可用性<br>复制提供冗余并提高数据可用性。 通过在不同数据库服务器上提供多个数据副本，复制可提<br>供一定级别的容错功能，以防止丢失单个数据库服务器。 在某些情况下，复制可以提供增加<br>的读取性能，因为客户端可以将读取操作发送到不同的服务上，在不同数据中心维护数据副本可以增加分布式应用程序的数据位置和可用性。您还可以为专用目的维护其他副本，例如灾难恢复，报告或备份。</li><li>MongoDB中的复制<br>副本集是一组维护相同数据集的mongod实例。副本集包含多个数据承载节点和可选的一个仲裁节点。 在承载数据的节点中，一个且仅一个成员被视为主节点，而其他节点被视为次要<br>（从）节点。 主节点接收所有写操作。 副本集只能有一个主要能够确认具有{w：“most”}写<br>入关注的写入; 虽然在某些情况下，另一个mongod实例可能暂时认为自己也是主要的。主要<br>记录其操作日志中的数据集的所有更改，即oplog。</li><li>主从复制和副本集区别<br><strong>主从集群和副本集最大的区别就是副本集没有固定的“主节点”；</strong>整个集群会选出一个“主节点”，当其挂掉后，又在剩下的从节点中选中其他节点为“主节点”，副本集总有一个活跃点<br>(主、primary)和一个或多个备份节点(从、secondary)。</li></ul><hr><p><img src="/image/MongoDB/2.jpg" alt="副本集"></p><hr><h3 id="副本集三个角色"><a href="#副本集三个角色" class="headerlink" title="副本集三个角色"></a>副本集三个角色</h3><p>主要成员（Primary）：主要接收所有写操作。就是主节点。<br>副本成员（Replicate）：从主节点通过复制操作以维护相同的数据集，即备份数据，不可写操作，但可以读操作（但需要配置）。是默认的一种从节点类型<br>仲裁者（Arbiter）：不保留任何数据的副本，只具有投票选举作用，当然也可以将仲裁服务器维护为副本集的一部分，即副本成员同时也可以是仲裁者。也是一种从节点类型。<br><strong>如果你的副本+主节点的个数是偶数，建议加一个仲裁者，形成奇数，容易满足大多数的投<br>票。如果你的副本+主节点的个数是奇数，可以不加仲裁者。</strong></p><h3 id="主节点选举原则"><a href="#主节点选举原则" class="headerlink" title="主节点选举原则"></a>主节点选举原则</h3><p>主节点选举的触发条件(主节点故障,主节点网络不可达（默认心跳信息为10秒）,人工干预（rs.stepDown(600)）)<br><strong>在获得票数的时候，优先级（priority）参数影响重大</strong>,默认情况下，优先级的值是1</p><h3 id="集群故障分析"><a href="#集群故障分析" class="headerlink" title="集群故障分析"></a>集群故障分析</h3><h4 id="副本节点故障"><a href="#副本节点故障" class="headerlink" title="副本节点故障"></a>副本节点故障</h4><p>主节点和仲裁节点对副本节点的心跳失败。因为主节点还在，没有触发投票选举。<br>如果此时，在主节点写入数据。再启动从节点，会发现，主节点写入的数据，会自动同步给从节点。此时：不影响正常使用</p><h4 id="主节点故障"><a href="#主节点故障" class="headerlink" title="主节点故障"></a>主节点故障</h4><p><strong>从节点和仲裁节点对主节点的心跳失败，当失败超过10秒，此时因为没有主节点了，会自动发起投票。</strong><br>而副本节点只有一台，因此，候选人只有一个就是副本节点，开始投票。<br>仲裁节点向副本节点投了一票，副本节点本身自带一票，因此共两票，超过了“大多数”<br>27019是仲裁节点，没有选举权，27018不向其投票，其票数是0.<br>最终结果，27018成为主节点。具备读写功能。<br><strong>再启动 27017主节点，发现27017变成了从节点，27018仍保持主节点。</strong><br>登录27017节点，发现是从节点了，数据自动从27018同步。<br>此时：不影响正常使用</p><h4 id="仲裁节点故障"><a href="#仲裁节点故障" class="headerlink" title="仲裁节点故障"></a>仲裁节点故障</h4><p>主节点和副本节点对仲裁节点的心跳失败。因为主节点还在，因此，没有触发投票选举。<br>此时：不影响正常使用</p><h4 id="仲裁节点和主节点故障"><a href="#仲裁节点和主节点故障" class="headerlink" title="仲裁节点和主节点故障"></a>仲裁节点和主节点故障</h4><p><strong>副本集中没有主节点了，导致此时，副本集是只读状态，无法写入。</strong><br>因为27017的票数，没有获得大多数，即没有大于等于2，它只有默认的一票（优先级是1）<br>如果要触发选举，随便加入一个成员即可。<br>如果只加入 27019仲裁节点成员，则主节点一定是27017，因为没得选了，仲裁节点不参与选举，但参与投票。<br>如果只加入 27018节点，会发起选举。因为27017和27018都是一票，则按照谁数据新，谁当主节点。<br>此时：影响正常使用，需要处理</p><h4 id="仲裁节点和从节点故障"><a href="#仲裁节点和从节点故障" class="headerlink" title="仲裁节点和从节点故障"></a>仲裁节点和从节点故障</h4><p>10秒后，27017主节点自动降级为副本节点。（服务降级）<br><strong>副本集不可写数据了，已经故障了。</strong><br>此时：影响正常使用，需要处理</p><h4 id="主节点和从节点故障"><a href="#主节点和从节点故障" class="headerlink" title="主节点和从节点故障"></a>主节点和从节点故障</h4><p>影响正常使用，需要处理</p><h3 id="副本集创建"><a href="#副本集创建" class="headerlink" title="副本集创建"></a>副本集创建</h3><h4 id="创建主节点"><a href="#创建主节点" class="headerlink" title="创建主节点"></a>创建主节点</h4><p>建立存档数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/replica_sets/myrs_27017/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/replica_sets/myrs_27017/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/replica_sets/myrs_27017/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27017/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27017/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27017/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27017</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myrs</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>启动节点服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/replica_sets/myrs_27017/mongod.conf</span><br></pre></td></tr></table></figure><h4 id="创建副本节点"><a href="#创建副本节点" class="headerlink" title="创建副本节点"></a>创建副本节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/replica_sets/myrs_27018/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/replica_sets/myrs_27018/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/replica_sets/myrs_27018/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27018/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27018/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27017/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27018</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myrs</span><br></pre></td></tr></table></figure><p>启动节点服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/replica_sets/myrs_27018/mongod.conf</span><br></pre></td></tr></table></figure><h4 id="创建仲裁节点"><a href="#创建仲裁节点" class="headerlink" title="创建仲裁节点"></a>创建仲裁节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/replica_sets/myrs_27019/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/replica_sets/myrs_27019/data/db</span><br></pre></td></tr></table></figure><p>新建或修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/replica_sets/myrs_27019/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27019/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27019/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/replica_sets/myrs_27017/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27019</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myrs</span><br></pre></td></tr></table></figure><p>启动节点服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/replica_sets/myrs_27019/mongod.conf</span><br></pre></td></tr></table></figure><h4 id="初始化配置副本集和主节点"><a href="#初始化配置副本集和主节点" class="headerlink" title="初始化配置副本集和主节点"></a>初始化配置副本集和主节点</h4><p>使用客户端命令连接任一个节点，但这里尽量要连接主节点(27017节点)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --host=localhost --port=27017</span><br></pre></td></tr></table></figure><p>很多命令无法使用，初始化副本集</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.initiate()</span><br></pre></td></tr></table></figure><p>查看副本节点配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><p>添加副本集和仲裁节点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs.add(&quot;192.168.189.130:27018&quot;) # 添加副本节点</span><br><span class="line">rs.addArb(&quot;192.168.189.130:27019&quot;) # 添加仲裁节点</span><br></pre></td></tr></table></figure><p>设置从节点可读</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rs.slaveOk()</span><br><span class="line">rs.slaveOk(false) # 取消从节点的数据读取权限</span><br></pre></td></tr></table></figure><hr><p><img src="/image/MongoDB/3.jpg" alt="部署前"><br><img src="/image/MongoDB/4.jpg" alt="部署前"></p><hr><p><img src="/image/MongoDB/5.jpg" alt="降级后"></p><hr><h2 id="分片集群"><a href="#分片集群" class="headerlink" title="分片集群"></a>分片集群</h2><p>分片（sharding）是<strong>一种跨多台机器分布数据的方法</strong>，MongoDB使用分片来支持具有非常大的数据集和高吞吐量操作的部署。 分片是将数据拆分，散到不同的机器上，不需要功能强大的大型计算机就可以储存更多的数据，处理更多的负载。<br>有两种解决系统增长的方法：<strong>垂直扩展和水平扩展</strong>。</p><ul><li>垂直扩展是<strong>增加单个服务器的容量</strong>，例如使用更强大的CPU，添加更多RAM或增加存储空间量。可用技术的局限性可能会限制单个机器对于给定工作负载而言足够强大。此外，基于云的提供商基于可用的硬件配置具有硬性上限。垂直缩放有实际的最大值。</li><li>水平扩展是<strong>划分系统数据集并分散加载到多个服务器上</strong>，添加其他服务器以根据需要增加容量。虽然单个机器的总体速度或容量可能不高，但每台机器处理整个工作负载的子集，可能提供比单个高速大容量服务器更高的效率。扩展部署容量只需要根据需要添加额外的服务器，这可能比单个机器的高端硬件的总体成本更低。但是这样基础架构和部署维护的复杂性会增加。<h3 id="分片集群组件"><a href="#分片集群组件" class="headerlink" title="分片集群组件"></a>分片集群组件</h3>分片（存储）：每个分片包含分片数据的子集。每个分片都可以部署为副本集。<br>mongos（路由）：mongos充当查询路由器，在客户端应用程序和分片集群之间提供接口。<br>config servers（“调度”的配置）：配置服务器存储群集的元数据和配置设置。 从MongoDB 3.4开始，必须将配置服务器部署为副本集（CSRS）</li></ul><hr><p><img src="/image/MongoDB/6.jpg" alt="组件"></p><hr><h3 id="分片机制"><a href="#分片机制" class="headerlink" title="分片机制"></a>分片机制</h3><p>数据如何切分：基于分片切分后的数据块称为 chunk，一个分片后的集合会包含多个 chunk，每个 chunk 位于哪个分片(Shard) 则记录在 Config Server(配置服务器)上。<br>Mongos 在操作分片集合时，会自动根据分片键找到对应的 chunk，并向该 chunk 所在的分片发起操作请求。<br>MongoDB 支持两种分片算法：<strong>哈希分片和范围分片</strong></p><h3 id="案例：分片集群架构"><a href="#案例：分片集群架构" class="headerlink" title="案例：分片集群架构"></a>案例：分片集群架构</h3><p>两个分片节点副本集（3+3）+ 一个配置节点副本集（3）+两个路由节点（2），共11个服务节点</p><hr><p><img src="/image/MongoDB/7.jpg" alt="集群架构"></p><hr><h4 id="分片（存储）节点副本集的创建"><a href="#分片（存储）节点副本集的创建" class="headerlink" title="分片（存储）节点副本集的创建"></a>分片（存储）节点副本集的创建</h4><h5 id="第一套副本集shard-1"><a href="#第一套副本集shard-1" class="headerlink" title="第一套副本集shard 1"></a>第一套副本集shard 1</h5><p>准备存放数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs01_27018/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs01_27018/data/db</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs01_27118/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs01_27118/data/db</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs01_27218/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs01_27218/data/db</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27018/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27018/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27018/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27018</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myshardrs01</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: shardsvr <span class="comment"># 分片角色，shardsvr为分片节点，configsvr配置节点</span></span><br><span class="line">***</span><br><span class="line">vim /usr/local/mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27118/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27118/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27118/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27118</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myshardrs01</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: shardsvr</span><br><span class="line">***</span><br><span class="line">vim /usr/local/mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27218/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27218/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs01_27218/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27218</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myshardrs01</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: shardsvr</span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>启动第一套副本集：一主一副本一仲裁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myshardrs01_27018/mongod.conf</span><br><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myshardrs01_27118/mongod.conf</span><br><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myshardrs01_27218/mongod.conf</span><br><span class="line">ps -ef |grep mongod</span><br></pre></td></tr></table></figure><hr><p><img src="/image/MongoDB/8.jpg" alt="myshardrs01"></p><hr><p>初始化副本集和创建主节点，尽量连接主节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27018</span><br><span class="line">rs.initiate()</span><br><span class="line">rs.status()</span><br><span class="line">rs.add(<span class="string">&quot;192.168.189.130:27118&quot;</span>)</span><br><span class="line">rs.addArb(<span class="string">&quot;192.168.189.130:27218&quot;</span>)</span><br><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><h5 id="第二套副本集-shard-2"><a href="#第二套副本集-shard-2" class="headerlink" title="第二套副本集 shard 2"></a>第二套副本集 shard 2</h5><p>准备存放数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs02_27318/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs02_27318/data/db</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs02_27418/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs02_27418/data/db</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs02_27518/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myshardrs02_27518/data/db</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/sharded_cluster/myshardrs02_27318/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27318/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27318/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27318/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27318</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myshardrs02</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: shardsvr</span><br><span class="line">***</span><br><span class="line">vim /usr/local/mongodb/sharded_cluster/myshardrs02_27418/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27418/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27418/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27418/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27418</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myshardrs02</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: shardsvr</span><br><span class="line">***</span><br><span class="line">vim /usr/local/mongodb/sharded_cluster/myshardrs02_27518/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27518/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27518/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">        enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myshardrs02_27518/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27518</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myshardrs02</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: shardsvr</span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>启动第一套副本集：一主一副本一仲裁</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myshardrs02_27318/mongod.conf</span><br><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myshardrs02_27418/mongod.conf</span><br><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myshardrs02_27518/mongod.conf</span><br><span class="line">ps -ef |grep mongod</span><br></pre></td></tr></table></figure><hr><p><img src="/image/MongoDB/9.jpg" alt="myshardrs02"></p><hr><p>初始化副本集和创建主节点，尽量连接主节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27318</span><br><span class="line">rs.initiate()</span><br><span class="line">rs.status()</span><br><span class="line">rs.add(<span class="string">&quot;192.168.189.130:27418&quot;</span>)</span><br><span class="line">rs.addArb(<span class="string">&quot;192.168.189.130:27518&quot;</span>)</span><br><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><h4 id="配置节点副本集的创建-config-server"><a href="#配置节点副本集的创建-config-server" class="headerlink" title="配置节点副本集的创建 config server"></a>配置节点副本集的创建 config server</h4><p>准备存放数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myconfigrs_27019/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myconfigrs_27019/data/db</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myconfigrs_27119/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myconfigrs_27119/data/db</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myconfigrs_27219/log</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/myconfigrs_27219/data/db</span><br></pre></td></tr></table></figure><p>配置文件:<strong>分片角色设为配置节点</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/sharded_cluster/myconfigrs_27019/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27019/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27019/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">         enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27019/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27019</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myconfigr</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: configsvr</span><br><span class="line">***</span><br><span class="line">vim /usr/local/mongodb/sharded_cluster/myconfigrs_27119/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27119/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27119/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">         enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27119/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27119</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myconfigr</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: configsvr</span><br><span class="line">***</span><br><span class="line">vim /usr/local/mongodb/sharded_cluster/myconfigrs_27219/mongod.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27219/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">    dbPath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27219/data/db&quot;</span></span><br><span class="line">    journal:</span><br><span class="line">         enabled: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/myconfigrs_27219/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27219</span><br><span class="line">replication:</span><br><span class="line">    replSetName: myconfigr</span><br><span class="line">sharding:</span><br><span class="line">    clusterRole: configsvr</span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>启动副本集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myconfigrs_27019/mongod.conf</span><br><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myconfigrs_27119/mongod.conf</span><br><span class="line">mongod -f /usr/local/mongodb/sharded_cluster/myconfigrs_27219/mongod.conf</span><br><span class="line">ps -ef |grep mongod</span><br></pre></td></tr></table></figure><hr><p><img src="/image/MongoDB/10.jpg" alt="myconfigrs"></p><hr><p>初始化副本集和创建主节点:<strong>不用添加仲裁节点了，否则会报错</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27019</span><br><span class="line">rs.initiate()</span><br><span class="line">rs.status()</span><br><span class="line">rs.add(<span class="string">&quot;192.168.189.130:27119&quot;</span>)</span><br><span class="line">rs.add(<span class="string">&quot;192.168.189.130:27219&quot;</span>)</span><br><span class="line">rs.conf()</span><br></pre></td></tr></table></figure><h4 id="路由节点的创建和操作-mongos"><a href="#路由节点的创建和操作-mongos" class="headerlink" title="路由节点的创建和操作 mongos"></a>路由节点的创建和操作 mongos</h4><p>存放日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/mymongos_27017/log</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/sharded_cluster/mymongos_27017/mongos.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/mymongos_27017/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/mymongos_27017/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27017</span><br><span class="line">sharding:</span><br><span class="line">    configDB: myconfigrs/192.168.189.130:27019,192.168.189.130:27119,192.168.189.130:27219</span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>启动mongos</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongos -f /usr/local/mongodb/sharded_cluster/mymongos_27017/mongos.conf</span><br></pre></td></tr></table></figure><p>登录mongos:<strong>写不进去数据，如果写数据会报错</strong>,原因： 通过路由节点操作，现在只是连接了配置节点，还没有连接分片数据节点，因此无法写入业务数据。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 27017</span><br></pre></td></tr></table></figure><h4 id="路由节点上进行分片配置操作"><a href="#路由节点上进行分片配置操作" class="headerlink" title="路由节点上进行分片配置操作"></a>路由节点上进行分片配置操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一套分片副本集添加</span></span><br><span class="line">sh.addShard(<span class="string">&quot;myshardrs01/192.168.189.130:27018,192.168.189.130:27118,192.168.189.130:27218&quot;</span>)</span><br><span class="line"><span class="comment"># 第二套分片副本集添加</span></span><br><span class="line">sh.addShard(<span class="string">&quot;myshardrs02/192.168.189.130:27318,192.168.189.130:27418,192.168.189.130:27518&quot;</span>)</span><br><span class="line"><span class="comment"># 移除分片</span></span><br><span class="line">db.runCommand(&#123;removeShard: <span class="string">&quot;myshardrs02&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>开启分片功能：sh.enableSharding(“库名”)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh.enableSharding(<span class="string">&quot;articledb&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>分片规则</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 哈希策略</span><br><span class="line">sh.shardCollection(&quot;articledb.comment&quot;,&#123;&quot;nickname&quot;:&quot;hashed&quot;&#125;)</span><br><span class="line"># 范围策略</span><br><span class="line">sh.shardCollection(&quot;articledb.author&quot;,&#123;&quot;age&quot;:1&#125;)</span><br><span class="line"># 使用作者年龄字段作为片键，按照年龄的值进行分片</span><br></pre></td></tr></table></figure><p>插入数据测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 测试一(哈希规则)，登录mongs后，向comment循环插入1000条数据做测试</span><br><span class="line">use articledb</span><br><span class="line">for(var i=1;i&lt;=1000;i++)&#123;db.comment.insert(&#123;_id:i+&quot;&quot;,nickname:&quot;Test&quot;+i&#125;)&#125;</span><br><span class="line">db.comment.count() # 1000</span><br><span class="line"># 测试二(范围规则)，登录mongs后，向author循环插入20000条测试数据</span><br><span class="line">use articledb</span><br><span class="line">for (var i=1;i&lt;=2000;i++)&#123;db.author.save(&#123;&quot;name&quot;:&quot;test&quot;+i,&quot;age&quot;:NumberInt(i%120)&#125;)&#125;</span><br><span class="line">db.author.count() # 2000</span><br></pre></td></tr></table></figure><hr><p><img src="/image/MongoDB/11.jpg" alt="hash"></p><hr><h4 id="再增加一个路由节点"><a href="#再增加一个路由节点" class="headerlink" title="再增加一个路由节点"></a>再增加一个路由节点</h4><p>准备存放数据和日志的目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/mongodb/sharded_cluster/mymongos_27117/log</span><br></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/mongodb/sharded_cluster/mymongos_27117/mongos.conf</span><br><span class="line">***</span><br><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/mymongos_27117/log/mongod.log&quot;</span></span><br><span class="line">    logAppend: <span class="literal">true</span></span><br><span class="line">processManagement:</span><br><span class="line">    fork: <span class="literal">true</span></span><br><span class="line">    pidFilePath: <span class="string">&quot;/usr/local/mongodb/sharded_cluster/mymongos_27117/log/mongod.pid&quot;</span></span><br><span class="line">net:</span><br><span class="line">    bindIp: localhost,192.168.189.130</span><br><span class="line">    port: 27117</span><br><span class="line">sharding:</span><br><span class="line">    configDB: myconfigrs/192.168.189.130:27019,192.168.189.130:27119,192.168.189.130:27219</span><br><span class="line">***</span><br></pre></td></tr></table></figure><p>启动mongos,使用mongo客户端登录27117，发现，<strong>第二个路由无需配置,因为分片配置都保存到了配置服务器</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;NOSQL&quot;&gt;&lt;a href=&quot;#NOSQL&quot; class=&quot;headerlink&quot; title=&quot;NOSQL&quot;&gt;&lt;/a&gt;NOSQL&lt;/h2&gt;&lt;p&gt;  NoSQL是非关系型的数据库。NoSQL也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据</summary>
      
    
    
    
    <category term="数据库" scheme="http://xczf.shop/cate%EF%BC%9Agories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="数据库" scheme="http://xczf.shop/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>数据结构和算法(Python)</title>
    <link href="http://xczf.shop/2022/06/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://xczf.shop/2022/06/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2022-06-16T11:00:41.000Z</published>
    <updated>2023-10-31T06:14:04.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><h2 id="一-顺序表"><a href="#一-顺序表" class="headerlink" title="一.顺序表"></a>一.顺序表</h2><h3 id="1-查找"><a href="#1-查找" class="headerlink" title="1.查找"></a>1.查找</h3><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><p>时间复杂度：O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,elem</span>)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;self.<span class="built_in">len</span>(): <span class="comment"># 以顺序表的最大长度为循环条件进行循环</span></span><br><span class="line"><span class="keyword">if</span>(self.a[i]==elem): <span class="comment"># 找到输入值结束循环</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 否则指针加一</span></span><br><span class="line">i=i+<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i&lt;self.<span class="built_in">len</span>(): <span class="comment"># 返回找到的值的指针</span></span><br><span class="line"><span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h4 id="单链表表长"><a href="#单链表表长" class="headerlink" title="单链表表长"></a>单链表表长</h4><p>时间复杂度：O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">p=self.__head <span class="comment"># 赋初值p为扫描指针</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line">p=p.<span class="built_in">next</span> <span class="comment"># 指针移动到下一个结点</span></span><br><span class="line"><span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h3 id="2-删除"><a href="#2-删除" class="headerlink" title="2.删除"></a>2.删除</h3><h4 id="保序删除"><a href="#保序删除" class="headerlink" title="保序删除"></a>保序删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">j=i+<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j&lt;<span class="built_in">list</span>.<span class="built_in">len</span>():</span><br><span class="line"><span class="built_in">list</span>.a[j-<span class="number">1</span>]=<span class="built_in">list</span>.a[j]</span><br><span class="line">j+=<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="按值删除"><a href="#按值删除" class="headerlink" title="按值删除"></a>按值删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self,item</span>):</span><br><span class="line">p=self.__head</span><br><span class="line"><span class="keyword">if</span> p.data==item: <span class="comment"># 删除的是头结点需要单独处理</span></span><br><span class="line">self.__head=p.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">if</span> p.data!=item:</span><br><span class="line">pre=p <span class="comment"># 记录p的前驱结点</span></span><br><span class="line">p=p.<span class="built_in">next</span> <span class="comment"># p后移</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pre.<span class="built_in">next</span>=p.<span class="built_in">next</span> <span class="comment"># 找到item后修改指针</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><h3 id="3-插入"><a href="#3-插入" class="headerlink" title="3.插入"></a>3.插入</h3><h4 id="插入运算"><a href="#插入运算" class="headerlink" title="插入运算"></a>插入运算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">j=<span class="built_in">list</span>.<span class="built_in">len</span>()-<span class="number">1</span> <span class="comment"># j在最后一个元素位置</span></span><br><span class="line"><span class="keyword">while</span> j&gt;=i: <span class="comment"># i为等待插入的值</span></span><br><span class="line"><span class="built_in">list</span>.a[j+<span class="number">1</span>]=<span class="built_in">list</span>.a[j]</span><br><span class="line"><span class="built_in">list</span>.a[i]=x</span><br></pre></td></tr></table></figure><h3 id="4-合并"><a href="#4-合并" class="headerlink" title="4.合并"></a>4.合并</h3><h4 id="线性表的合并算法"><a href="#线性表的合并算法" class="headerlink" title="线性表的合并算法"></a>线性表的合并算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Merge</span>(<span class="params">la,lb,lc</span>):</span><br><span class="line">i=<span class="number">0</span> <span class="comment"># 指针开始的位置</span></span><br><span class="line">j=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(a) <span class="keyword">and</span> j&lt;<span class="built_in">len</span>(b): <span class="comment"># 条件：均要小于最大长度</span></span><br><span class="line"><span class="keyword">if</span> la[i]&lt;=lb[j]: <span class="comment"># a比b小时a进入c</span></span><br><span class="line">lc.append(la[i])</span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">lc.append(lb[j])</span><br><span class="line">j+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i&gt;=<span class="built_in">len</span>(a): <span class="comment"># a循环结束就将b的元素全部添加进c</span></span><br><span class="line">lc.extend(lb[j:])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">lc.extend(la[i:])</span><br><span class="line"><span class="keyword">return</span> lc</span><br></pre></td></tr></table></figure><h3 id="5-实现顺序表"><a href="#5-实现顺序表" class="headerlink" title="5.实现顺序表"></a>5.实现顺序表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">seqlist</span>: <span class="comment"># 创建一个顺序表类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,max_space=<span class="number">30</span></span>) <span class="comment"># 初始化函数</span></span><br><span class="line">self.max_space=max_space <span class="comment"># 设置最大空间</span></span><br><span class="line">        self.sl=max_space*[<span class="number">0</span>] <span class="comment"># 申请数组存放列表</span></span><br><span class="line">        self.length=<span class="number">0</span> <span class="comment"># 记录实际元素的个数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">appenddata</span>(<span class="params">self,data</span>) <span class="comment"># 追加元素data</span></span><br><span class="line">    <span class="keyword">if</span> self.length==self.max_space:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;顺序表已满，不能进行添加&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">self.sl[self.length]=data <span class="comment"># 赋值</span></span><br><span class="line">            self.length+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printdata</span>(<span class="params">self</span>): <span class="comment"># 遍历操作</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.length):</span><br><span class="line">            <span class="built_in">print</span>(self.sl[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertdata</span>(<span class="params">self,index.data</span>) <span class="comment"># 插入元素操作</span></span><br><span class="line">    <span class="keyword">if</span> self.length==self.max_space:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;顺序表已满，不能进行插入&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> index&lt;<span class="number">0</span> <span class="keyword">or</span> index&gt;self.length:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;位置不合法&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i=self.length-<span class="number">1</span> <span class="comment"># 最后一个指针开始</span></span><br><span class="line">                <span class="keyword">while</span> i&gt;=index: <span class="comment"># index后的元素向后移动一位</span></span><br><span class="line">                    self.sl[i+<span class="number">1</span>]=self.sl[i]</span><br><span class="line">                    i--</span><br><span class="line">                self.sl[index]=data <span class="comment"># 插入位置赋值</span></span><br><span class="line">                self.length+=<span class="number">1</span> <span class="comment"># 最大长度加一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteindex</span>(<span class="params">self.index</span>): <span class="comment"># 按索引删除</span></span><br><span class="line">    <span class="keyword">if</span> self.length=<span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;空表&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> index&lt;<span class="number">0</span> <span class="keyword">or</span> index&gt;=self.length:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;位置不合法&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                i=index</span><br><span class="line">                <span class="keyword">while</span> i&lt;self.length:</span><br><span class="line">                    self.sl[i]=self.sl[i+<span class="number">1</span>] <span class="comment"># 插入位置变为后一个元素的值</span></span><br><span class="line">                self.length-- <span class="comment"># 最大长度减一</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">searchdata</span>(<span class="params">self.data</span>): <span class="comment"># 按值查找</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.length):</span><br><span class="line"><span class="keyword">if</span>(self.sl[i]==data)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">if</span> i==self.length:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;没找到元素&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;找到元素&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> i <span class="comment"># 返回下标</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deletedata</span>(<span class="params">self.data</span>): <span class="comment"># 按值删除</span></span><br><span class="line">i=self.searchdata(data)</span><br><span class="line">        <span class="keyword">if</span> i!=-<span class="number">1</span>:</span><br><span class="line">            self.deleteindex(i)</span><br><span class="line"><span class="comment"># 测试功能</span></span><br><span class="line">s=seqlist()</span><br><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入追加元素个数：&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入追加的元素：&#x27;</span>))</span><br><span class="line">    s.appenddata(data)</span><br><span class="line">s.printdata()</span><br><span class="line">s.insertdata(<span class="number">2</span>,<span class="number">111</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;插入后&#x27;</span>)</span><br><span class="line">s.printdata()</span><br><span class="line">s.insertdata(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;删除后&#x27;</span>)</span><br><span class="line">s.deleteindex()</span><br><span class="line">s.printdata()</span><br><span class="line">s.deletedata(<span class="number">1</span>)</span><br><span class="line">s.printdata()</span><br></pre></td></tr></table></figure><h2 id="二-单链表"><a href="#二-单链表" class="headerlink" title="二.单链表"></a>二.单链表</h2><h3 id="1-插入"><a href="#1-插入" class="headerlink" title="1.插入"></a>1.插入</h3><h4 id="头插法添加元素"><a href="#头插法添加元素" class="headerlink" title="头插法添加元素"></a>头插法添加元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self,item</span>)</span><br><span class="line">s=Node(item) <span class="comment"># 生成一个带插入结点对象</span></span><br><span class="line">s.<span class="built_in">next</span>=self.__head <span class="comment"># s的后继结点为头结点</span></span><br><span class="line">self.__head=s <span class="comment"># 头结点为s的node</span></span><br></pre></td></tr></table></figure><h4 id="尾插法插入单链表"><a href="#尾插法插入单链表" class="headerlink" title="尾插法插入单链表"></a>尾插法插入单链表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self,x</span>): <span class="comment"># 单链表末尾插入元素</span></span><br><span class="line">p=self.__head</span><br><span class="line"><span class="keyword">while</span> p.<span class="built_in">next</span>!=<span class="literal">None</span>: <span class="comment"># 指针达到链表末尾</span></span><br><span class="line">p=p.<span class="built_in">next</span></span><br><span class="line">s=Node(x) <span class="comment"># 生成结点，传值x</span></span><br><span class="line">p.<span class="built_in">next</span>=s <span class="comment"># 修改链接</span></span><br></pre></td></tr></table></figure><h4 id="指定位置插入元素insert"><a href="#指定位置插入元素insert" class="headerlink" title="指定位置插入元素insert"></a>指定位置插入元素insert</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,pos,x</span>): <span class="comment"># 在pos的位置插入元素x</span></span><br><span class="line">p=self.__head <span class="comment"># 赋初值</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> pos&gt;=self.length(): <span class="comment"># 如果pos位置小于1,不合法</span></span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count&lt;pos: <span class="comment"># 查找插入位置</span></span><br><span class="line">p=p.<span class="built_in">next</span></span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line">s=Node(X)</span><br><span class="line">s.<span class="built_in">next</span>=p.<span class="built_in">next</span> <span class="comment"># 修改指针</span></span><br><span class="line">p.<span class="built_in">next</span>=s <span class="comment"># 修改指针</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="2-遍历"><a href="#2-遍历" class="headerlink" title="2.遍历"></a>2.遍历</h3><h4 id="遍历单链表"><a href="#遍历单链表" class="headerlink" title="遍历单链表"></a>遍历单链表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">travel</span>(<span class="params">self</span>):</span><br><span class="line">p=self.__head <span class="comment"># p从头指针开始</span></span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span>: <span class="comment"># 条件为不指向链表末尾</span></span><br><span class="line"><span class="built_in">print</span>(p.data,end=<span class="string">&#x27;&#x27;</span>) <span class="comment"># 打印</span></span><br><span class="line">p=p.<span class="built_in">next</span> <span class="comment"># 指向下一节点</span></span><br></pre></td></tr></table></figure><h3 id="3-查找"><a href="#3-查找" class="headerlink" title="3.查找"></a>3.查找</h3><h4 id="按序号查找"><a href="#按序号查找" class="headerlink" title="按序号查找"></a>按序号查找</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">searchpos</span>(<span class="params">self,pos</span>): <span class="comment"># pos为待查找位置</span></span><br><span class="line">p=self.__head</span><br><span class="line">count=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> pos&lt;<span class="number">1</span>: <span class="comment"># 判断位置是否合法</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span> <span class="keyword">and</span> count !=pos:</span><br><span class="line">p=p.<span class="built_in">next</span></span><br><span class="line">count+=<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><h4 id="按值查找-1"><a href="#按值查找-1" class="headerlink" title="按值查找"></a>按值查找</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self,item</span>):</span><br><span class="line">p=self.__head</span><br><span class="line"><span class="keyword">while</span> p.data!=item <span class="keyword">and</span> p!=<span class="literal">None</span>:</span><br><span class="line">p=p.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">if</span> p.data==item:</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"><span class="keyword">elif</span> p== <span class="literal">None</span>: <span class="comment"># 找不到值的情况</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="4-合并-1"><a href="#4-合并-1" class="headerlink" title="4.合并"></a>4.合并</h3><h4 id="链表的合并算法"><a href="#链表的合并算法" class="headerlink" title="链表的合并算法"></a>链表的合并算法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>: <span class="comment"># 构建节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">self.data=data</span><br><span class="line">self.<span class="built_in">next</span>=<span class="literal">None</span> <span class="comment"># 不知道后继节点为谁，所以为空</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">List</span>: <span class="comment"># 创建单链表类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self._head=<span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>)： <span class="comment"># 判断是否为空</span></span><br><span class="line"><span class="keyword">return</span> self._head</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self,data</span>): <span class="comment"># 尾插法建立单链表</span></span><br><span class="line">p=self._head <span class="comment"># 创建头指针</span></span><br><span class="line">        n=Node(data) <span class="comment"># 待插入结点</span></span><br><span class="line">        <span class="keyword">if</span> self._head == <span class="literal">None</span>: <span class="comment"># 没有数据直接插入</span></span><br><span class="line">            self._head = n</span><br><span class="line">        esle: </span><br><span class="line">            <span class="keyword">while</span> p.<span class="built_in">next</span> != <span class="literal">None</span>: <span class="comment"># 循环到空</span></span><br><span class="line">                p=p.<span class="built_in">next</span></span><br><span class="line">            p.<span class="built_in">next</span>=n</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printlist</span>(<span class="params">self</span>): <span class="comment"># 单链表遍历</span></span><br><span class="line">    p=self._head</span><br><span class="line">    <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(p.data,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        p=p.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;创建la,lb&#x27;</span>)</span><br><span class="line">la=<span class="type">List</span>()</span><br><span class="line">lb=<span class="type">List</span>()</span><br><span class="line"><span class="comment"># 输出la</span></span><br><span class="line">data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入链表a的值，输入-1结束&#x27;</span>))</span><br><span class="line"><span class="keyword">while</span> data != -<span class="number">1</span></span><br><span class="line">la.append(data)</span><br><span class="line">    data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请继续输入链表a的值，输入-1结束&#x27;</span>))</span><br><span class="line">la.printlist()</span><br><span class="line"><span class="comment"># 输出lb</span></span><br><span class="line">data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入链表b的值，输入-1结束&#x27;</span>))</span><br><span class="line"><span class="keyword">while</span> data != -<span class="number">1</span></span><br><span class="line">lb.append(data)</span><br><span class="line">    data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请继续输入链表b的值，输入-1结束&#x27;</span>))</span><br><span class="line">lb.printlist()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Merge</span>(<span class="params">la,lb,lc</span>) <span class="comment"># la，lb已经存在，合并函数</span></span><br><span class="line">pa=la._head <span class="comment"># la表头赋值给pa</span></span><br><span class="line">pb=lb._head <span class="comment"># lb表头赋值给pb</span></span><br><span class="line">tail=lc._head <span class="comment"># tail等于初始表头指针</span></span><br><span class="line">    <span class="keyword">while</span> pa!=<span class="literal">None</span> <span class="keyword">and</span> pb!=<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> pa.data &lt;= pb.data:</span><br><span class="line">            <span class="keyword">if</span> lc.head=<span class="literal">None</span>: <span class="comment"># 第一个结点为空</span></span><br><span class="line">                lc._head=pa</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.<span class="built_in">next</span>=pa</span><br><span class="line">            tail=pa <span class="comment"># tail指向lc最后结点</span></span><br><span class="line">            pa=pa.<span class="built_in">next</span> <span class="comment"># 指向la下一个结点遍历</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> lc.head=<span class="literal">None</span>: <span class="comment"># 第一个结点为空</span></span><br><span class="line">                lc._head=pb</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                tail.<span class="built_in">next</span>=pb</span><br><span class="line">            tail=pb <span class="comment"># tail指向lc最后结点</span></span><br><span class="line">            pb=pb.<span class="built_in">next</span> <span class="comment"># 指向la下一个结点遍历</span></span><br><span class="line">     <span class="keyword">if</span> pa!=<span class="literal">None</span>: <span class="comment"># 出现有剩余指针</span></span><br><span class="line">        tail.<span class="built_in">next</span>=pa</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tail.<span class="built_in">next</span>=pb</span><br><span class="line"></span><br><span class="line">lc=<span class="type">List</span>()</span><br><span class="line">Merge(la,lb,lc)</span><br><span class="line">lc.printlist()</span><br></pre></td></tr></table></figure><h3 id="5-实现单链表"><a href="#5-实现单链表" class="headerlink" title="5.实现单链表"></a>5.实现单链表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>): <span class="comment"># python没有这个类，需要单独创建</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>): <span class="comment"># 初始化需要数据</span></span><br><span class="line">        self.data=data <span class="comment"># 数据域</span></span><br><span class="line">        self.<span class="built_in">next</span>=<span class="literal">None</span> <span class="comment"># 没有元素为空</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimleLinklist</span>(<span class="title class_ inherited__">object</span>): <span class="comment"># 创建一个单链表类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 初始化</span></span><br><span class="line">        self._head=<span class="literal">None</span> <span class="comment"># 没有元素，头为空</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>): <span class="comment"># 判断是否为空</span></span><br><span class="line">        <span class="keyword">if</span> self._head==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addhead</span>(<span class="params">self,data</span>): <span class="comment"># 头插法插入元素</span></span><br><span class="line">        node=Node(data) <span class="comment"># 生成插入节点</span></span><br><span class="line">        <span class="comment"># 关键步骤，把插入元素的后继头指针的后继，头指针等于node</span></span><br><span class="line">        node.<span class="built_in">next</span>=self._head </span><br><span class="line">        self._head=node</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">printdata</span>(<span class="params">self</span>): <span class="comment"># 打印链表</span></span><br><span class="line">        p=self._head <span class="comment"># 指向表头</span></span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>: <span class="comment"># p不为空时</span></span><br><span class="line">            <span class="built_in">print</span>(p.data)</span><br><span class="line">            p=p.<span class="built_in">next</span> <span class="comment"># 打印结束变成下一个元素</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>): <span class="comment"># 求长度</span></span><br><span class="line">        p=self._head</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">            count+=<span class="number">1</span> <span class="comment"># 计数</span></span><br><span class="line">            p=p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchdata</span>(<span class="params">self,data</span>): <span class="comment"># 按值查找</span></span><br><span class="line">        p=self._head</span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">if</span> p.data==data:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            p=p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> p==<span class="literal">None</span>: <span class="comment"># 查找失败</span></span><br><span class="line">            <span class="keyword">return</span> false</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insertdata</span>(<span class="params">self,pos,data</span>): <span class="comment"># 指定位置插入</span></span><br><span class="line">        <span class="keyword">if</span> pos==<span class="number">0</span>: <span class="comment"># 头结点</span></span><br><span class="line">            self.addhead(data)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        p=self._head</span><br><span class="line">        count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> count&gt;=pos: <span class="comment"># 找到指定插入位置</span></span><br><span class="line">                node=Node(data) <span class="comment"># 创造结点</span></span><br><span class="line">                node.<span class="built_in">next</span>=p.<span class="built_in">next</span> <span class="comment"># 修改指针</span></span><br><span class="line">                p.<span class="built_in">next</span>=node</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># 没找到指定插入位置</span></span><br><span class="line">                p=p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> p==<span class="literal">None</span>: <span class="comment"># 插入不合法</span></span><br><span class="line">            ruturn <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">removedata</span>(<span class="params">self,data</span>) <span class="comment"># 按值删除元素,存在重复就删除第一个值</span></span><br><span class="line">    p=self._head</span><br><span class="line">        <span class="keyword">if</span> p.data==data: <span class="comment"># 第一个删除结点时</span></span><br><span class="line">            self._head=p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            pre=p <span class="comment"># pre用来保存前一个结点的信息</span></span><br><span class="line">            p=p.<span class="built_in">next</span> <span class="comment"># p向后移动</span></span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>: </span><br><span class="line">            <span class="keyword">if</span> p.data==data:</span><br><span class="line">                pre.<span class="built_in">next</span>=p.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>: <span class="comment"># 继续向下查找</span></span><br><span class="line">                pre=p</span><br><span class="line">                p=p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">if</span> p==<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">searchmaxdata</span>(<span class="params">self</span>): <span class="comment"># 寻找最大值</span></span><br><span class="line">        p=self._head</span><br><span class="line">        flag=p.data <span class="comment"># 存放的最大值</span></span><br><span class="line">        <span class="comment"># flag=p 存放的p的位置</span></span><br><span class="line">        p=p.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> p.data&gt;flag:</span><br><span class="line">                flag=p.data <span class="comment"># 重新赋值</span></span><br><span class="line">            p=p.<span class="built_in">next</span> <span class="comment"># 成不成立都要执行</span></span><br><span class="line">        <span class="keyword">return</span> flag</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">sl=SingleLinklist()</span><br><span class="line">num=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入追加的元素个数&#x27;</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">    data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入追加的元素&#x27;</span>))</span><br><span class="line">    sl.addhead(data)</span><br><span class="line">sl.printdata()</span><br><span class="line"><span class="built_in">print</span>(sl.length())</span><br><span class="line">data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要查找的数据：&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(sl.searchdata(data))</span><br><span class="line">pos=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要插入的位置：&#x27;</span>))</span><br><span class="line">data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要插入的数据：&#x27;</span>))</span><br><span class="line">sl.insertdata(pos,data)</span><br><span class="line">data=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入要删除的数据：&#x27;</span>))</span><br><span class="line">sl.removedata(data)</span><br><span class="line">sl.printdata()</span><br></pre></td></tr></table></figure><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><h2 id="一-栈（先进后出）"><a href="#一-栈（先进后出）" class="headerlink" title="一.栈（先进后出）"></a>一.栈（先进后出）</h2><h3 id="1-顺序栈"><a href="#1-顺序栈" class="headerlink" title="1.顺序栈"></a>1.顺序栈</h3><h4 id="空栈"><a href="#空栈" class="headerlink" title="空栈"></a>空栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 初始化</span></span><br><span class="line">self._<span class="built_in">list</span>=[] <span class="comment"># 初始化一个空列表</span></span><br></pre></td></tr></table></figure><h4 id="判断为空"><a href="#判断为空" class="headerlink" title="判断为空"></a>判断为空</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>): <span class="comment"># 判断栈是否为空</span></span><br><span class="line">    <span class="keyword">if</span> self._<span class="built_in">list</span> <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="入栈"><a href="#入栈" class="headerlink" title="入栈"></a>入栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list采用动态顺序表，不需要判断是否会满</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pushstack</span>(<span class="params">self,item</span>):</span><br><span class="line">self._<span class="built_in">list</span>.append(item)</span><br></pre></td></tr></table></figure><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">popstack</span>(<span class="params">self</span>):</span><br><span class="line">item=self._<span class="built_in">list</span>.pop() <span class="comment"># 默认最后一个元素</span></span><br><span class="line"><span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h4 id="读栈顶元素"><a href="#读栈顶元素" class="headerlink" title="读栈顶元素"></a>读栈顶元素</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">item=self._<span class="built_in">list</span>[-<span class="number">1</span>] <span class="comment"># 获取栈顶元素</span></span><br><span class="line"><span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><h5 id="顺序栈实现十进制转换其它进制"><a href="#顺序栈实现十进制转换其它进制" class="headerlink" title="顺序栈实现十进制转换其它进制"></a>顺序栈实现十进制转换其它进制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">sstack</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 定义一个列表</span></span><br><span class="line">self.slist=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>): <span class="comment"># 判断是否是空</span></span><br><span class="line"><span class="keyword">if</span> self.slist==[]</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pushstack</span>(<span class="params">self.data</span>): <span class="comment"># 入栈</span></span><br><span class="line">self.slist.append(data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">popstack</span>(<span class="params">self</span>): <span class="comment"># 出栈</span></span><br><span class="line"><span class="keyword">return</span> self.slist.pop()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">peekdata</span>(<span class="params">self</span>): <span class="comment"># 栈顶元素</span></span><br><span class="line"><span class="keyword">return</span> self.slist[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sizestack</span>(<span class="params">self</span>): <span class="comment"># 大小</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">len</span>(self.slist)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span></span><br><span class="line">s=sstack()</span><br><span class="line">N=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入一个10进制数&#x27;</span>))</span><br><span class="line">r=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入待转换机制&#x27;</span>))</span><br><span class="line"><span class="keyword">while</span> N!=<span class="number">0</span>:</span><br><span class="line">s.pushstack(N%r)</span><br><span class="line">N=N//r</span><br><span class="line"><span class="keyword">while</span> s.is_empty()!=<span class="number">1</span>:</span><br><span class="line">data=s.popstack()</span><br><span class="line"><span class="built_in">print</span>(data,end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-链栈"><a href="#2-链栈" class="headerlink" title="2.链栈"></a>2.链栈</h3><h4 id="栈结点"><a href="#栈结点" class="headerlink" title="栈结点"></a>栈结点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">self.data=data</span><br><span class="line">self.<span class="built_in">next</span>=<span class="literal">None</span></span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListStack</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self._top=<span class="literal">None</span> <span class="comment"># 初始为空</span></span><br></pre></td></tr></table></figure><h4 id="判断为空-1"><a href="#判断为空-1" class="headerlink" title="判断为空"></a>判断为空</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>): <span class="comment"># 判断栈是否为空</span></span><br><span class="line"><span class="keyword">return</span> self._top</span><br></pre></td></tr></table></figure><h4 id="入栈-1"><a href="#入栈-1" class="headerlink" title="入栈"></a>入栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self,item</span>):</span><br><span class="line">s=Node(item) <span class="comment"># 创建一个结点</span></span><br><span class="line">s.<span class="built_in">next</span>=self._top <span class="comment"># 修改指向</span></span><br><span class="line">self._top=s <span class="comment"># top指针移动</span></span><br></pre></td></tr></table></figure><h4 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">p=self._top <span class="comment"># 取出顶元素</span></span><br><span class="line">self._top=self._top.<span class="built_in">next</span> <span class="comment"># 修改栈顶指针</span></span><br><span class="line"><span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><h2 id="二-队列（先进先出）"><a href="#二-队列（先进先出）" class="headerlink" title="二.队列（先进先出）"></a>二.队列（先进先出）</h2><h3 id="1-循环队列"><a href="#1-循环队列" class="headerlink" title="1.循环队列"></a>1.循环队列</h3><h4 id="初始化-1"><a href="#初始化-1" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,maxsize</span>): <span class="comment"># maxsize为分配空间</span></span><br><span class="line">self.queue=[<span class="literal">None</span>]*maxsize <span class="comment"># 列表大小</span></span><br><span class="line">self.maxsize=maxsize <span class="comment"># 实际空间大小初值</span></span><br><span class="line">self.front=<span class="number">0</span> <span class="comment"># 头指针</span></span><br><span class="line">self.rear=<span class="number">0</span> <span class="comment"># 队尾指针</span></span><br></pre></td></tr></table></figure><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,item</span>):</span><br><span class="line"><span class="comment"># 队尾插入item元素</span></span><br><span class="line"><span class="keyword">if</span>(self.rear+<span class="number">1</span>)%self.maxsize==self.front: <span class="comment"># 判断是否为满</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;FULL&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.queue[self.rear]=item <span class="comment"># 入队</span></span><br><span class="line">self.rear=(self.rear+<span class="number">1</span>)%self.maxsize <span class="comment"># 修改队尾指针</span></span><br></pre></td></tr></table></figure><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>): <span class="comment"># 队头删除</span></span><br><span class="line"><span class="keyword">if</span> self.rear==self.front <span class="comment"># 判断是不是空</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;EMPTY&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">item=self.queue[self.front] <span class="comment"># 取队头元素</span></span><br><span class="line">self.front=(self.front+<span class="number">1</span>)%self.maxsize <span class="comment"># 后移头指针</span></span><br><span class="line"><span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h4 id="求个数"><a href="#求个数" class="headerlink" title="求个数"></a>求个数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getssize</span>(<span class="params">self</span>):</span><br><span class="line">n=(self.rear-self.front+self.maxsize)%self.maxsize</span><br><span class="line"><span class="keyword">return</span> n</span><br></pre></td></tr></table></figure><h4 id="遍历队列"><a href="#遍历队列" class="headerlink" title="遍历队列"></a>遍历队列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">showqueue</span>(<span class="params">self</span>):</span><br><span class="line">p=self.front <span class="comment"># 头不能失去，p为遍历指针</span></span><br><span class="line"><span class="keyword">while</span> p!=self.rear: <span class="comment"># 头尾是否相遇</span></span><br><span class="line"><span class="built_in">print</span>(self.queue[p])</span><br><span class="line">p=p(p+<span class="number">1</span>)%self.maxsize <span class="comment"># 后移</span></span><br></pre></td></tr></table></figure><h3 id="2-链队列"><a href="#2-链队列" class="headerlink" title="2.链队列"></a>2.链队列</h3><h4 id="初始化结点"><a href="#初始化结点" class="headerlink" title="初始化结点"></a>初始化结点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">QueueHead</span>(<span class="title class_ inherited__">object</span>): <span class="comment"># 链队列列表头结点类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): </span><br><span class="line">self.front=<span class="number">0</span> <span class="comment"># 头指针</span></span><br><span class="line">self.rear=<span class="number">0</span> <span class="comment"># 队尾指针</span></span><br></pre></td></tr></table></figure><h4 id="初始化空队列"><a href="#初始化空队列" class="headerlink" title="初始化空队列"></a>初始化空队列</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clas LinkQueue(<span class="built_in">object</span>): <span class="comment"># 定义一个链表列</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>): <span class="comment"># 队列初始化</span></span><br><span class="line">self._head=QueueHead() <span class="comment"># 创建一个表头结点</span></span><br><span class="line"><span class="keyword">if</span> __name==<span class="string">&#x27;__main__&#x27;</span> <span class="comment"># 创建</span></span><br><span class="line">Q=LinkQueue()</span><br></pre></td></tr></table></figure><h4 id="判断为空-2"><a href="#判断为空-2" class="headerlink" title="判断为空"></a>判断为空</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">if</span> self._head.front==self._head.rear <span class="keyword">and</span> self._head.front==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self,data</span>): <span class="comment"># data为入队元素</span></span><br><span class="line">s=QueueNode(data)</span><br><span class="line"><span class="keyword">if</span> self.is_empty():</span><br><span class="line">self._head.rear=s <span class="comment"># 队头队尾指向s</span></span><br><span class="line">self._head.front=s</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self._head.rear.<span class="built_in">next</span>=s <span class="comment"># 队尾指向的指针指向s</span></span><br><span class="line">self._head.rear=s</span><br></pre></td></tr></table></figure><h4 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self,data</span>): <span class="comment"># data为出队元素</span></span><br><span class="line"><span class="keyword">if</span> self.is_empty():</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;empty&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> self._head.front==self._head.rear <span class="keyword">and</span> self.front!=<span class="literal">None</span>: <span class="comment"># 一个节点</span></span><br><span class="line">p=self._head.front <span class="comment"># 取出队头元素</span></span><br><span class="line">self._head.front=<span class="literal">None</span></span><br><span class="line">self._head.rear=<span class="literal">None</span></span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line"><span class="keyword">else</span>: <span class="comment"># 多个结点</span></span><br><span class="line">p=self._head.front <span class="comment"># 取出队头元素</span></span><br><span class="line">self._head.front=self._head.front.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="一-二叉树"><a href="#一-二叉树" class="headerlink" title="一.二叉树"></a>一.二叉树</h2><p>二叉树性质：<br>1.对于非空二叉树，叶子结点为N0，度为2的结点为N2，则N1&#x3D;N2+1，总结点数为N，中度为1的结点数为N1，所有的结点均小于或等于2，所以N&#x3D;N0+N1+N2，B为二叉树分支总数，N&#x3D;B+1，因为分支是由度1和2结点射出，所以：B&#x3D;N1+2 * N2<br>2.非空二叉树的第i层上最后有2^(i-1)结点（i&gt;&#x3D;1）<br>3.一颗深度为K的二叉树，最多有2^(k-1)个结点（k&gt;&#x3D;1）,满二叉树每层都是最大结点数，完全二叉树除最后一层都是满的，并且最后一层满或者集中在一侧<br>4.N个结点的完全二叉树的深度为|log2n|+1</p><h3 id="遍历二叉树"><a href="#遍历二叉树" class="headerlink" title="遍历二叉树"></a>遍历二叉树</h3><p>遍历：顺着某一个搜索路径，把某种结构的数据都访问一遍，仅访问一次</p><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><p>访问根结点–&gt;先序遍历根节点左子树–&gt;先序遍历根节点右子树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preTraverse</span>(<span class="params">T</span>):</span><br><span class="line">    <span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="built_in">print</span>(T.data)</span><br><span class="line">    preTraverse(T.lchild) <span class="comment"># 遍历左子树</span></span><br><span class="line">    preTraverse(T.rchild) <span class="comment"># 遍历右子树</span></span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><p>先序遍历根节点左子树–&gt;访问根结点–&gt;先序遍历根节点右子树</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">midTraverse</span>(<span class="params">T</span>):</span><br><span class="line">    <span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    midTraverse(T.lchild) <span class="comment"># 遍历左子树</span></span><br><span class="line">    <span class="built_in">print</span>(T.data)</span><br><span class="line">    midTraverse(T.rchild) <span class="comment"># 遍历右子树</span></span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>后序遍历根节点左子树–&gt;后序遍历根节点右子树–&gt;访问根结点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">PostTraverse</span>(<span class="params">T</span>):</span><br><span class="line">    <span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    PostTraverse(T.lchild) <span class="comment"># 遍历左子树</span></span><br><span class="line">    PostTraverse(T.rchild) <span class="comment"># 遍历右子树</span></span><br><span class="line">    <span class="built_in">print</span>(T.data)</span><br></pre></td></tr></table></figure><h4 id="非递归中序遍历"><a href="#非递归中序遍历" class="headerlink" title="非递归中序遍历"></a>非递归中序遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">InOrder</span>(<span class="params">T</span>):</span><br><span class="line">p=T</span><br><span class="line">s=ListStack() <span class="comment"># 初始化一个栈</span></span><br><span class="line"><span class="keyword">while</span> s.is_empty()!=<span class="number">1</span> <span class="keyword">or</span> p!=<span class="literal">None</span>: <span class="comment"># 栈非空或者P不空</span></span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span>: <span class="comment"># P不空</span></span><br><span class="line">s.pushstack(p)</span><br><span class="line">p=p.lchild <span class="comment"># 左子树不断深入</span></span><br><span class="line"><span class="keyword">if</span> s.is_empty()!=<span class="number">1</span>: <span class="comment"># 栈非空</span></span><br><span class="line">p=s.popstack() <span class="comment"># 弹出栈顶元素</span></span><br><span class="line"><span class="built_in">print</span>(p.data)</span><br><span class="line">p=p.rchild</span><br></pre></td></tr></table></figure><h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入二叉树的二叉链表，结果得到二叉树的叶子结点个数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">countleaf</span>(<span class="params">T</span>): <span class="comment"># 统计叶子结点</span></span><br><span class="line"><span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> T.lchild==<span class="literal">None</span> <span class="keyword">and</span> T.rchild==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">global</span> n <span class="comment"># 全局变量n</span></span><br><span class="line">n+=<span class="number">1</span></span><br><span class="line">countleaf(T.lchild)</span><br><span class="line">countleaf(T.rchild)</span><br></pre></td></tr></table></figure><h3 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BNode</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data=<span class="literal">None</span>,lchild=<span class="literal">None</span>,rchild=<span class="literal">None</span></span>):</span><br><span class="line">self.data=data</span><br><span class="line">self.lchild=lchild</span><br><span class="line">self.rchild=rchild</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">T</span>): <span class="comment"># 先序遍历</span></span><br><span class="line"><span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">print</span>(T.data,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">predorder(T.lchild)</span><br><span class="line">predorder(T.rchild)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">miorder</span>(<span class="params">T</span>): <span class="comment"># 中序遍历</span></span><br><span class="line"><span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">midorder(T.lchild)</span><br><span class="line"><span class="built_in">print</span>(T.data,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">midorder(T.rchild)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createBT</span>(): <span class="comment"># 递归创建二叉树（递归）,空用*表示</span></span><br><span class="line">ch=<span class="built_in">input</span>(<span class="string">&#x27;输入一个node数据&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> ch==<span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">T=BNode(ch)</span><br><span class="line">T.lchild=createBT()</span><br><span class="line">T.rchild=createBT()</span><br><span class="line"><span class="keyword">return</span> T</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">searchdata</span>(<span class="params">T.ch</span>): <span class="comment"># 查找</span></span><br><span class="line"><span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> T.data==ch:</span><br><span class="line"><span class="keyword">return</span> T</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=searchdata(T.lchild,ch)</span><br><span class="line"><span class="keyword">if</span> p!=<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> p</span><br><span class="line">p=searchdata(T.rchild,ch)</span><br><span class="line"><span class="keyword">if</span> p!=<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span> p </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">a=BNode(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">b=BNode(<span class="string">&#x27;B&#x27;</span>)</span><br><span class="line">a.lchild=b</span><br><span class="line">c=BNode(<span class="string">&#x27;C&#x27;</span>)</span><br><span class="line">a.rchild=c</span><br><span class="line">d=BNode(<span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">b.rchild=d</span><br><span class="line">preorder(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">miorder(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="列表存储"><a href="#列表存储" class="headerlink" title="列表存储"></a>列表存储</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">T</span>): <span class="comment"># 先序遍历</span></span><br><span class="line"><span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">print</span>(T[<span class="number">0</span>])</span><br><span class="line">preorder(T[<span class="number">1</span>])</span><br><span class="line">preorder(T[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BinTreelist</span>(): <span class="comment"># 创建</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data,lchild=<span class="literal">None</span>,rchild=<span class="literal">None</span></span>):</span><br><span class="line">self.btree=[data,lchild,rchild]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> self,btree[<span class="number">0</span>] <span class="keyword">is</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_lchild</span>(<span class="params">self.lchild</span>):</span><br><span class="line"><span class="keyword">if</span> self.is_empty():</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">self.btree[<span class="number">1</span>]=lchild.btree</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_rchild</span>(<span class="params">self.rchild</span>):</span><br><span class="line"><span class="keyword">if</span> self.is_empty():</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">self.btree[<span class="number">2</span>]=rchild.btree</span><br><span class="line"><span class="comment"># t=[&#x27;A&#x27;,[&#x27;B&#x27;,None,[&#x27;C&#x27;,None,None]],[&#x27;C&#x27;,None,None]]</span></span><br><span class="line"><span class="built_in">print</span>(t)</span><br><span class="line">preorder(t)</span><br></pre></td></tr></table></figure><h2 id="二-哈夫曼树"><a href="#二-哈夫曼树" class="headerlink" title="二.哈夫曼树"></a>二.哈夫曼树</h2><h4 id="初始化结点-1"><a href="#初始化结点-1" class="headerlink" title="初始化结点"></a>初始化结点</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">self.lchild=<span class="literal">None</span></span><br><span class="line">self.rchild=<span class="literal">None</span></span><br><span class="line">self.parent=<span class="literal">None</span></span><br><span class="line">self.data=data</span><br></pre></td></tr></table></figure><h4 id="创建树"><a href="#创建树" class="headerlink" title="创建树"></a>创建树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_huffman_tree</span>(<span class="params">nodes</span>):</span><br><span class="line">nodelist=nodes[:] <span class="comment"># 复制nodes里面的元素到nodelist</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(nodelist)&gt;<span class="number">1</span>: <span class="comment"># 一直执行到列表长度小于等于1</span></span><br><span class="line">nodelist.sort(key=<span class="keyword">lambda</span> item:item.data) <span class="comment"># 按照频率值排序</span></span><br><span class="line">node_left=nodelist.pop() <span class="comment"># 取出第一个最小值并删除</span></span><br><span class="line">node_right=nodelist.pop() <span class="comment"># 取出第二个最小值并删除</span></span><br><span class="line"><span class="comment"># 生成一个结点，为刚才那俩个值的和</span></span><br><span class="line">node_father=Node(node_left.data+node_right.data)</span><br><span class="line">node_father.lchild=node_left  <span class="comment"># 修改左孩子指针，最小值为左子树</span></span><br><span class="line">node_father.rchild=node_right </span><br><span class="line">node_left.parent=node_father <span class="comment"># 修改左孩子的父节点</span></span><br><span class="line">node_right.parent=node_father</span><br><span class="line">nodelist.append(node_father) <span class="comment"># 新生成的结点加入列表</span></span><br><span class="line">    nodelist[<span class="number">0</span>].parent=<span class="literal">None</span> <span class="comment"># 根节点无父结点</span></span><br><span class="line">    <span class="keyword">return</span> nodelist[<span class="number">0</span>] <span class="comment"># 返回父节点</span></span><br></pre></td></tr></table></figure><h4 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">HuffmanNode</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,data</span>):</span><br><span class="line">self.data=data</span><br><span class="line">self.lchild=<span class="literal">None</span></span><br><span class="line">self.rchild=<span class="literal">None</span></span><br><span class="line">self.parent=<span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_hammanTree</span>(<span class="params">haffnode</span>):</span><br><span class="line">nodelist=haffnode[:]</span><br><span class="line"><span class="keyword">while</span> <span class="built_in">len</span>(nodelist)&gt;<span class="number">1</span>:</span><br><span class="line">nodelist.sort(key=<span class="keyword">lambda</span> item:item.data)</span><br><span class="line">left=nodelist.pop(<span class="number">0</span>)</span><br><span class="line">right=nodelist.pop(<span class="number">0</span>)</span><br><span class="line">father=HuffmanNode(eft.data+right.data)</span><br><span class="line">father.lchild=left</span><br><span class="line">father.rchild=right</span><br><span class="line">left.parent=father</span><br><span class="line">right.parent=father</span><br><span class="line">nodelist.append(father)</span><br><span class="line"><span class="keyword">return</span> nodelist[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preorder</span>(<span class="params">T</span>): <span class="comment"># 先序遍历</span></span><br><span class="line"><span class="keyword">if</span> T==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="built_in">print</span>(T.data,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">predorder(T.lchild)</span><br><span class="line">predorder(T.rchild)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span></span><br><span class="line">haffnode=[]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入叶子结点权值，输入-1结束&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> a=-<span class="number">1</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">haffnode.append(HuffmanNode(a))</span><br><span class="line">create_hammanTree(haffnode)</span><br><span class="line">preorder(bt)</span><br></pre></td></tr></table></figure><h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GraphAX</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,mat,vers</span>):</span><br><span class="line">self.mat=[mat[i][:]<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(vnum)] <span class="comment"># mat邻接矩阵</span></span><br><span class="line">self.verxs=verxs <span class="comment"># verxs顶点</span></span><br><span class="line">self.vnum=vnum <span class="comment"># 顶点数</span></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>从某顶点出发，访问图中所有顶点，并且每个只访问一次</p><h3 id="邻接矩阵实现"><a href="#邻接矩阵实现" class="headerlink" title="邻接矩阵实现"></a>邻接矩阵实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GrapAX</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,vertx,mat</span>): <span class="comment"># vertx存放顶点集，mat存放边</span></span><br><span class="line">vnum=<span class="built_in">len</span>(vertx) <span class="comment"># 顶点个数</span></span><br><span class="line">self.vertx=vertx</span><br><span class="line">self.mat=[mat[i][:]<span class="keyword">for</span> i on <span class="built_in">range</span>(vnum)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_edge</span>(<span class="params">self,vi,vj</span>): <span class="comment"># 判断俩个顶点是否相连</span></span><br><span class="line"><span class="keyword">if</span> vi <span class="keyword">not</span> <span class="keyword">in</span> self.vertx <span class="keyword">or</span> vj <span class="keyword">not</span> <span class="keyword">in</span> self.vertx:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;false&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line">i=self.vertx.index(<span class="string">&#x27;vi&#x27;</span>)</span><br><span class="line">j=self.vertx.index(<span class="string">&#x27;vj&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> self.mat[i][j]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_matrix</span>():</span><br><span class="line">nodes=[<span class="string">&#x27;v0&#x27;</span>,<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;v2&#x27;</span>,<span class="string">&#x27;v3&#x27;</span>,<span class="string">&#x27;v4&#x27;</span>] <span class="comment"># 顶点信息</span></span><br><span class="line">matrix=[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]] <span class="comment"># vi到vj有边1，无边0</span></span><br><span class="line">mygraph=GraphAX(nodes,matrix)</span><br><span class="line"><span class="keyword">return</span> mygraph</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">graph=create_matrix</span><br><span class="line"><span class="built_in">print</span>(graph.vertx)</span><br><span class="line"><span class="built_in">print</span>(graph.mat)</span><br></pre></td></tr></table></figure><h4 id="深度遍历"><a href="#深度遍历" class="headerlink" title="深度遍历"></a>深度遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sstack</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.slist=[]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">if</span> self.slist==[]:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pushstack</span>(<span class="params">self,data</span>):</span><br><span class="line">self.slist.append(data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">popstack</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> self.slist.pop()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DFSmat</span>(<span class="params">graph</span>): <span class="comment"># 图深度遍历</span></span><br><span class="line">visited=[<span class="number">0</span>]*<span class="built_in">len</span>(graph.verxs) <span class="comment"># 初始大小</span></span><br><span class="line">s=Sstack()</span><br><span class="line">s.pushstack(<span class="number">0</span>) <span class="comment"># 第0个元素索引入栈</span></span><br><span class="line"><span class="built_in">print</span>(graph.verxs[<span class="number">0</span>],end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">visited[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> s.is_empty()!=<span class="number">1</span>:</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.verxs)):</span><br><span class="line"><span class="keyword">if</span> graph,mat[i][j] == <span class="number">1</span> <span class="keyword">and</span> visited[j]==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(graph.verxs[j])</span><br><span class="line">visited[j]=<span class="number">1</span></span><br><span class="line">s.pushstack(j)</span><br><span class="line">i=j</span><br><span class="line"><span class="keyword">if</span> s.is_empty()!=<span class="number">1</span>:</span><br><span class="line">i=s.popstack()</span><br><span class="line">DFSmat(graph)</span><br></pre></td></tr></table></figure><h4 id="广度遍历"><a href="#广度遍历" class="headerlink" title="广度遍历"></a>广度遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Squeue</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,maxsize</span>):</span><br><span class="line">self.queue=maxsize*[<span class="literal">None</span>]</span><br><span class="line">self.front=<span class="number">0</span></span><br><span class="line">self.near=<span class="number">0</span></span><br><span class="line">self.maxsize=maxsize</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">if</span> self.front==self.rear:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">inqueue</span>(<span class="params">self,data</span>):</span><br><span class="line"><span class="keyword">if</span> (self,rear+<span class="number">1</span>)%self.maxsize==self.front:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">self.queue[self.rear]=data</span><br><span class="line">self.rear=(self.rear+<span class="number">1</span>)%self.maxsize</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">if</span> self.is_empty()==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">dara=self.queue[self.front]</span><br><span class="line">self.front=(self.front+<span class="number">1</span>)%self.maxsize</span><br><span class="line"><span class="keyword">return</span> data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BSFmat</span>(<span class="params">graph</span>):</span><br><span class="line">visited=[<span class="number">0</span>]*<span class="built_in">len</span>(<span class="built_in">len</span>(graph.verxs))</span><br><span class="line">q=Squeue()</span><br><span class="line"><span class="built_in">print</span>(graph.verxs[<span class="number">0</span>],end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">visited[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">q.inqueue(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> q.is_empty()!=<span class="number">1</span></span><br><span class="line">i=q.dequeue()</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.verxs)):</span><br><span class="line"><span class="keyword">if</span> graph.mat[i][j]==<span class="number">1</span> <span class="keyword">and</span> visited[j]==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(graph.verxs[j],end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">visited[j]=<span class="number">1</span></span><br><span class="line">q.inqueue(j)</span><br></pre></td></tr></table></figure><h3 id="邻接表实现"><a href="#邻接表实现" class="headerlink" title="邻接表实现"></a>邻接表实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Anode</span>: <span class="comment"># 边表节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,edgedata,weight=<span class="number">0</span></span>):</span><br><span class="line">self.edgedata=edgedata <span class="comment"># data</span></span><br><span class="line">self.weight=weight <span class="comment"># 权值</span></span><br><span class="line">self.<span class="built_in">next</span>=<span class="literal">None</span> <span class="comment"># 连结</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vnode</span>: <span class="comment"># 顶点表结点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,verdata</span>):</span><br><span class="line">self.vertdata=vertdata</span><br><span class="line">self.firsta=<span class="literal">None</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span>: <span class="comment"># 图类</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">self.vertList=[]</span><br><span class="line">self.numvert=<span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_vert</span>(<span class="params">self,key</span>): <span class="comment"># 添加到顶点表</span></span><br><span class="line">vertex=Vnode(key)</span><br><span class="line">self.vertList.append(vertex)</span><br><span class="line">self.numvert+=<span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_edge</span>(<span class="params">self,vert1,vert2,weight=<span class="number">0</span></span>): <span class="comment"># 添加边</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(self.vertList):</span><br><span class="line"><span class="keyword">if</span> vert1==self.vertList[i].vertdata:</span><br><span class="line">n1=self.vertList[i]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i==<span class="built_in">len</span>(self.vertList):</span><br><span class="line">n1=self.add_vert(vert1)</span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(self.vertList):</span><br><span class="line"><span class="keyword">if</span> vert2==self.vertList[i].vertdata:</span><br><span class="line">n2=self.vertList[i]</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">i+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> i==<span class="built_in">len</span>(self.vertList):</span><br><span class="line">n2=self.add_vert(vert2)</span><br><span class="line">j=self.vertList.index(n2)</span><br><span class="line">p=Anode(j)</span><br><span class="line">p.<span class="built_in">next</span>=n1.firstta</span><br><span class="line">n1.firsta=p</span><br><span class="line"></span><br><span class="line">graph=Graph()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">s=<span class="built_in">input</span>(<span class="string">&#x27;请输入图的顶点值，输入#结束&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> s==<span class="string">&#x27;#&#x27;</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">graph.add_vert(s)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">vert1,vert2=<span class="built_in">input</span>(<span class="string">&#x27;请输入边的俩个顶点，用，隔开，输入#结束&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> vert1==<span class="string">&#x27;#&#x27;</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">graph.add_edge(vert1,vert2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(graph.numvert):</span><br><span class="line"><span class="built_in">print</span>(graph.vertlist[i].vertdata.end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="深度遍历-1"><a href="#深度遍历-1" class="headerlink" title="深度遍历"></a>深度遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Sstack</span>():</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">DFSadj</span>(<span class="params">graph</span>): <span class="comment"># 深度遍历邻接表</span></span><br><span class="line">visited=[<span class="number">0</span>]*graph.numvert</span><br><span class="line">s=Sstack()</span><br><span class="line"><span class="built_in">print</span>(graph.vertList[<span class="number">0</span>].vertdata,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">visited[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">s.pushstack(<span class="number">0</span>)</span><br><span class="line">p=graph.vertList[<span class="number">0</span>].firsta</span><br><span class="line"><span class="keyword">while</span> s.is_empty()!=<span class="number">1</span>:</span><br><span class="line"><span class="keyword">if</span> visited[p.edgedata]==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(graph.vertList[p.edgedata].vertdata,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">visited[p.edgedata]=<span class="number">1</span></span><br><span class="line">s.pushstack(p.edgestack)</span><br><span class="line">p=graph.vertList[<span class="number">0</span>].firsta</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p=p.<span class="built_in">next</span></span><br><span class="line">q=s.popstack()</span><br><span class="line">p=graph.vertList[q].firsta</span><br></pre></td></tr></table></figure><h4 id="广度遍历-1"><a href="#广度遍历-1" class="headerlink" title="广度遍历"></a>广度遍历</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BFSadj</span>(<span class="params">graph</span>):</span><br><span class="line">visited=[<span class="number">0</span>]*graph.numvert</span><br><span class="line">q=Queue(graph.numvert)</span><br><span class="line"><span class="built_in">print</span>(graph.vertList[<span class="number">0</span>].vertdata,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">visited[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">s.inqueue(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">while</span> q.is_empty()!=<span class="number">1</span>:</span><br><span class="line">i=q.desqueue()</span><br><span class="line">p=graph.vertList[i].firsta</span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">if</span> visited[p.edgedata]==<span class="number">0</span>:</span><br><span class="line"><span class="built_in">print</span>(graph.vertList[p.edgedata].vertdata,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">visited[p.edgedata]=<span class="number">1</span></span><br><span class="line">q.inqueue(p.edgedata)</span><br><span class="line">p=p.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><p>生成树中顶点数和图的顶点数是相同的。<br>极小的含义:在该连通子图中删除任何一条边，子图则不再连通<br>一个有n个顶点的连通图的生成树最多有n-1条边，在生成树中再加一条边必然形成回路<br>一个图可以有多棵不同的生成树。<br><strong>含n个顶点n-1条边的图不一定是生成树</strong></p><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="迪杰斯特拉算法-单源点最短路径"><a href="#迪杰斯特拉算法-单源点最短路径" class="headerlink" title="迪杰斯特拉算法:单源点最短路径"></a>迪杰斯特拉算法:单源点最短路径</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Dijkstra</span>(<span class="params">graph</span>):</span><br><span class="line">dist=[<span class="number">0</span>,<span class="number">10</span>,<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>),<span class="number">30</span>,<span class="number">100</span>] <span class="comment"># 初始化dist[i]</span></span><br><span class="line">visted=[<span class="number">0</span>]*<span class="built_in">len</span>(graph.vertx) <span class="comment"># 初始化visited</span></span><br><span class="line">pre=[<span class="literal">None</span>]*<span class="built_in">len</span>(graph.vertx)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.vertx))</span><br><span class="line"><span class="keyword">if</span> graph.mat[<span class="number">0</span>][i]==<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment"># 表示前一顶点的序号</span></span><br><span class="line">pre[i]=-<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pre[i]=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.vertx)-<span class="number">1</span>):</span><br><span class="line">mindist=<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.vertx)): <span class="comment"># 最小没被访问的距离</span></span><br><span class="line"><span class="keyword">if</span> dist[i]&lt;mindist <span class="keyword">and</span> visted[i]!=<span class="number">1</span>:</span><br><span class="line">mindist=dist[i]</span><br><span class="line">k=i</span><br><span class="line">visted[k]=<span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.vertx)):</span><br><span class="line"><span class="keyword">if</span> (mindist+graph.mat[k][i])&lt;dist[i] <span class="keyword">and</span> visted[i]!=<span class="number">1</span>:</span><br><span class="line">dist[i]=dist[k]+graph.mat[k][i]</span><br><span class="line">pre[i]=k</span><br><span class="line">pre[i]=k</span><br><span class="line"><span class="keyword">return</span> dist,pre</span><br></pre></td></tr></table></figure><h4 id="佛洛伊德算法-多源点最短路径"><a href="#佛洛伊德算法-多源点最短路径" class="headerlink" title="佛洛伊德算法:多源点最短路径"></a>佛洛伊德算法:多源点最短路径</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Floyed</span>(<span class="params">graph</span>):<span class="comment">#弗洛伊德算法</span></span><br><span class="line">path=[[-<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph. vertx))]<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.vertx))</span><br><span class="line">A=[graph.mat[i][:<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(graph.vertx))]</span><br><span class="line"><span class="keyword">for</span> v <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(A)):</span><br><span class="line"><span class="keyword">if</span> A[i][j]&gt;(A[i][v]+A[v][j]):</span><br><span class="line">A[i][j]=A[i][v]+A[v][j]</span><br><span class="line">path[i][j]=v</span><br><span class="line"><span class="keyword">return</span> A,path</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printpath</span>(<span class="params">i，j, path,graph</span>):<span class="comment">#求所走过的路径</span></span><br><span class="line"><span class="keyword">if</span> path[i][j]==-<span class="number">1</span>:</span><br><span class="line"><span class="built_in">print</span> (graph. vertx[i],graph. vertx[j])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">mid path[i][j]</span><br><span class="line">printpath(i, mid, path, graph)</span><br><span class="line">printpath(mid, j, path, graph)</span><br></pre></td></tr></table></figure><h3 id="AOV-x2F-AOE网"><a href="#AOV-x2F-AOE网" class="headerlink" title="AOV&#x2F;AOE网"></a>AOV&#x2F;AOE网</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Topologicalsort</span>(<span class="params">graph</span>): <span class="comment"># 拓扑排序</span></span><br><span class="line">s=Sstack()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(graph. numvert):<span class="comment">#初始时，把所有度为0的顶点入栈</span></span><br><span class="line"><span class="keyword">if</span> graph.vertList[i].degree==<span class="number">0</span>:</span><br><span class="line">s.pushstack(i)</span><br><span class="line"><span class="keyword">while</span> s.is_empty()!=<span class="number">1</span> :<span class="comment">#元素出栈，修改各顶点的度，当度为0，入栈</span></span><br><span class="line">j=s.popstack()</span><br><span class="line"><span class="built_in">print</span>(j) <span class="comment"># 打印输出拓扑序列的元素</span></span><br><span class="line">p=graph.vertList[j].firsta</span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">k=p.edgedata</span><br><span class="line">graph.vertList[k].degree=graph.vertList[k].degree-<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> graph.vertList[k].degree==<span class="number">0</span>:</span><br><span class="line">s.pushstack(k)</span><br><span class="line">p=p.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Topologicalsort</span>(<span class="params">graph</span>): <span class="comment"># 拓扑排序</span></span><br><span class="line">s=Sstack()</span><br><span class="line">stp=Sstack() <span class="comment"># 存放拓扑序列</span></span><br><span class="line">ve=[<span class="number">0</span>]*graph.numvert <span class="comment"># 事件最早发生时间，和顶点数量有关</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(graph. numvert):<span class="comment">#初始时，把所有度为0的顶点入栈</span></span><br><span class="line"><span class="keyword">if</span> graph.vertList[i].degree==<span class="number">0</span>:</span><br><span class="line">s.pushstack(i)</span><br><span class="line"><span class="keyword">while</span> s.is_empty()!=<span class="number">1</span> :<span class="comment">#元素出栈，修改各顶点的度，当度为0，入栈</span></span><br><span class="line">j=s.popstack()</span><br><span class="line"><span class="built_in">print</span>(j=<span class="number">1</span>，end=<span class="string">&#x27;&#x27;</span>) <span class="comment"># 打印输出拓扑序列的元素</span></span><br><span class="line">stp.pushstack(j) <span class="comment"># 入栈</span></span><br><span class="line">p=graph.vertList[j].firsta</span><br><span class="line"><span class="keyword">while</span> p!=<span class="literal">None</span>:</span><br><span class="line">k=p.edgedata</span><br><span class="line"><span class="keyword">if</span> (ve[j]+p.weight)&gt;ve[k]:</span><br><span class="line">ve[k]=ve[j]+p.weight</span><br><span class="line">graph.vertList[k].degree=graph.vertList[k].degree-<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> graph.vertList[k].degree==<span class="number">0</span>:</span><br><span class="line">s.pushstack(k)</span><br><span class="line">p=p.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">return</span> ve,stp</span><br></pre></td></tr></table></figure><h1 id="字典和集合"><a href="#字典和集合" class="headerlink" title="字典和集合"></a>字典和集合</h1><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>查找表：同一类型数据元素构成的集合</p><h3 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h3><h4 id="顺序查找表"><a href="#顺序查找表" class="headerlink" title="顺序查找表"></a>顺序查找表</h4><p>可以用list实现或者链表<br>查找过程:从表的一端开始，向另一端逐个将数据元素的关键字与检索键key进行比较，直到找到关键字等于key的数据元素或到达表的另一端<br>ASL：(n+1)&#x2F;2, n为查找的第n个元素<br>只能使用顺序表：线性表为无序表，有序表但是为链式结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">search_seq</span>(<span class="params">sl,key</span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sl:</span><br><span class="line"><span class="keyword">if</span> i==key:</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="二分查找表"><a href="#二分查找表" class="headerlink" title="二分查找表"></a>二分查找表</h4><p>适用于有序表，且限于顺序存储结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">halfsearch</span>(<span class="params">sa,key,low,high</span>):</span><br><span class="line">mid=(low+high)//<span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> key==sa[mid]: <span class="comment"># 成功</span></span><br><span class="line"><span class="keyword">return</span> mid+<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> low&gt;high:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">elif</span> key&gt;sa[mid]:</span><br><span class="line"><span class="keyword">return</span> halfsearch(sa,key,mid+<span class="number">1</span>,high)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> halfsearch(sa,key,low,mid-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="树表"><a href="#树表" class="headerlink" title="树表"></a>树表</h3><h4 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Searchkey</span>(<span class="params">self,key</span>): <span class="comment"># 查找</span></span><br><span class="line">bt=self._root</span><br><span class="line"><span class="keyword">while</span> bt!=<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">if</span> key&lt;bt.data:</span><br><span class="line">bt=bt.lchild</span><br><span class="line"><span class="keyword">elif</span> key&gt;bt.data:</span><br><span class="line">bt=bt.rchild</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> bt</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self,ket</span>):<span class="comment"># 插入</span></span><br><span class="line">bt=self._root</span><br><span class="line"><span class="keyword">if</span> bt==<span class="literal">None</span>: <span class="comment"># 为空建立根结点</span></span><br><span class="line">self._root=BstNode(key)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">if</span> key&lt;bt.data:</span><br><span class="line"><span class="keyword">if</span> bt.left==<span class="literal">None</span>: <span class="comment"># 左为空，建立左子树根节点</span></span><br><span class="line">bt.left=BstNode(key)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">bt=bt.lchild</span><br><span class="line"><span class="keyword">elif</span> key&gt;bt.data:</span><br><span class="line"><span class="keyword">if</span> bt.right==<span class="literal">None</span>: <span class="comment"># 右为空，建立右子树根节点</span></span><br><span class="line">bt.right=BstNode(key)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">bt=bt.rchild</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self,key</span>): <span class="comment"># 删除</span></span><br><span class="line">p,q=<span class="literal">None</span>,self._root <span class="comment"># p是q父节点</span></span><br><span class="line"><span class="keyword">while</span> q <span class="keyword">and</span> q.data!=key:</span><br><span class="line">p=q</span><br><span class="line"><span class="keyword">if</span> key&lt;q.data:</span><br><span class="line">q=q.lchild</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">q=q.rchild</span><br><span class="line"><span class="keyword">if</span> q==<span class="literal">None</span>:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> q.lchild==<span class="literal">None</span>: <span class="comment"># 只有右子树</span></span><br><span class="line"><span class="keyword">if</span> p==<span class="literal">None</span>:</span><br><span class="line">self._root=q.rchild</span><br><span class="line"><span class="keyword">elif</span> q==p.lchild:</span><br><span class="line">p.lchild=q.rchild</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p.rchild=q.rchild</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> q.rchild==<span class="literal">None</span>: <span class="comment"># 只有左子树</span></span><br><span class="line"><span class="keyword">if</span> p==<span class="literal">None</span>:</span><br><span class="line">self._root=q.lchild</span><br><span class="line"><span class="keyword">elif</span> q==p.lchild:</span><br><span class="line">p.lchild=q.lchild</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">p.rchild=q.lchild</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">r=q.lchild <span class="comment"># 既有左又有右</span></span><br><span class="line"><span class="keyword">while</span> r.rchild!=<span class="literal">None</span>:</span><br><span class="line">t=r</span><br><span class="line">r=r.rchild</span><br><span class="line">t.rchild=r.lchild</span><br><span class="line">q.data=r.data</span><br></pre></td></tr></table></figure><h4 id="平衡二叉树（AVL树）"><a href="#平衡二叉树（AVL树）" class="headerlink" title="平衡二叉树（AVL树）"></a>平衡二叉树（AVL树）</h4><p>左子树和右子树深度之差不超过1</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>在python中用列表实现一组连续的存储空间，查找效率高但占用空间高</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><p>依次将每个待排序的记录插入到一个有序序列的合适位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">insertsort</span>(<span class="params">lists</span>):</span><br><span class="line">count=<span class="built_in">len</span>(lists)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,count):</span><br><span class="line">key=<span class="built_in">list</span>[i]</span><br><span class="line">j=i-<span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> j&gt;=<span class="number">0</span> <span class="keyword">and</span> lists[j]&gt;key:</span><br><span class="line">lists[j+<span class="number">1</span>]=lists[j]</span><br><span class="line">lists[j]=key</span><br><span class="line">j-=<span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> lists</span><br></pre></td></tr></table></figure><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shellsort</span>(<span class="params">lists,gap</span>):</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> gap: <span class="comment"># 步长是gap中元素</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m): <span class="comment"># 直接插入元素</span></span><br><span class="line">key=i+m</span><br><span class="line"><span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> lists[key]&gt;<span class="built_in">list</span>[i]:</span><br><span class="line">lists[key],lists[i]=lists[i],<span class="built_in">list</span>[key]</span><br><span class="line">i=i-m</span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选出最大或最小与第一个交换，以此类推</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">selectsort</span>(<span class="params">lists</span>):</span><br><span class="line">count=<span class="built_in">len</span>(lists)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(count-<span class="number">1</span>):</span><br><span class="line">flag=i</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,count):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>[j]&lt;lists[flag]:</span><br><span class="line">flag=j</span><br><span class="line"><span class="keyword">if</span> flag!=i:</span><br><span class="line">lists[i],lists[flag]=lists[flag],lists[i]</span><br></pre></td></tr></table></figure><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆逻辑结构是一棵完全二叉树，采用顺序存储结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">HeapAdjust</span>(<span class="params">lists,parent.length</span>): <span class="comment"># 小顶堆</span></span><br><span class="line">temp=lists[parent]</span><br><span class="line">i=parent</span><br><span class="line">j=<span class="number">2</span>*i</span><br><span class="line"><span class="keyword">while</span> j&lt;=length:</span><br><span class="line"><span class="keyword">if</span> j&lt;length <span class="keyword">and</span> lists[j]&gt;lists[j+<span class="number">1</span>]: <span class="comment"># 左右孩子里面小的</span></span><br><span class="line">j+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> temp&gt;lists[j]: <span class="comment"># 根和左右孩子里面小的</span></span><br><span class="line">lists[i]=<span class="built_in">list</span>[j] <span class="comment"># 最小值变成根</span></span><br><span class="line">i=j</span><br><span class="line">j=<span class="number">2</span>*<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">lists[i]=temp</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BubbleSort</span>(<span class="params">lists</span>):</span><br><span class="line">lenght=<span class="built_in">len</span>(lists)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length-<span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,length-i):</span><br><span class="line"><span class="keyword">if</span> lists[j-<span class="number">1</span>]&gt;lists[j]:</span><br><span class="line">lists[j-<span class="number">1</span>],lists[j]=lists[j],lists[j-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">GetIndex</span>(<span class="params">lists,low,high</span>): <span class="comment"># 中心点选取</span></span><br><span class="line">temp=lists[low]</span><br><span class="line"><span class="keyword">while</span> low&lt;high:</span><br><span class="line"><span class="keyword">while</span> low&lt;high <span class="keyword">and</span> lists[high]&gt;=temp:</span><br><span class="line">high=high-<span class="number">1</span></span><br><span class="line">lists[low]=lists[high]</span><br><span class="line"><span class="keyword">while</span> low&lt;high <span class="keyword">and</span> lists[high]&lt;=temp:</span><br><span class="line">high=high-<span class="number">1</span></span><br><span class="line">lists[high]=lists[low]</span><br><span class="line">lists[low]=temp</span><br><span class="line"><span class="keyword">return</span> low</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">QuickSort</span>(<span class="params">lists,low,high</span>):</span><br><span class="line"><span class="keyword">if</span> low&lt;high:</span><br><span class="line">index=GetIndex(lists,low,high)</span><br><span class="line">QuickSort(lists,<span class="number">0</span>,index-<span class="number">1</span>)</span><br><span class="line">QuickSort(lists,index+<span class="number">1</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">lista,listb</span>):</span><br><span class="line">listc=[]</span><br><span class="line">h=j=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> j &lt; <span class="built_in">len</span>(lista) <span class="keyword">and</span> h &lt; <span class="built_in">len</span>(listb):</span><br><span class="line"><span class="keyword">if</span> lista[j] &lt; listb[h]:</span><br><span class="line">listc.append(lista[j])</span><br><span class="line">j+=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">listc.append(listb[j])</span><br><span class="line">h+=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> j==<span class="built_in">len</span>(lista):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> listb[h:]:</span><br><span class="line">listc.append(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lista[h:]:</span><br><span class="line">listc.append(i)</span><br><span class="line">reurn listc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_sort</span>(<span class="params">lists</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lists)&lt;=<span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> lists</span><br><span class="line">middle=<span class="built_in">len</span>(lists)//<span class="number">2</span></span><br><span class="line">left = merge_sort(lists[:middle])</span><br><span class="line">right = merge_sort(lists[middle:])</span><br><span class="line"><span class="keyword">return</span> merge(left,right)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;表&quot;&gt;&lt;a href=&quot;#表&quot; class=&quot;headerlink&quot; title=&quot;表&quot;&gt;&lt;/a&gt;表&lt;/h1&gt;&lt;h2 id=&quot;一-顺序表&quot;&gt;&lt;a href=&quot;#一-顺序表&quot; class=&quot;headerlink&quot; title=&quot;一.顺序表&quot;&gt;&lt;/a&gt;一.顺序表&lt;/h</summary>
      
    
    
    
    <category term="python" scheme="http://xczf.shop/cate%EF%BC%9Agories/python/"/>
    
    
    <category term="python" scheme="http://xczf.shop/tags/python/"/>
    
    <category term="数据结构" scheme="http://xczf.shop/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>windows操作系统安装</title>
    <link href="http://xczf.shop/2021/10/15/windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://xczf.shop/2021/10/15/windows%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2021-10-15T11:00:41.000Z</published>
    <updated>2023-10-31T06:12:59.955Z</updated>
    
    <content type="html"><![CDATA[<p>  操作系统的重新安装可以帮助我们解决大部分的电脑问题，而定时的重装系统也是一个良好的使用习惯。</p><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><p>  重装操作系统的方案很多，比如光盘，U盘，ghost镜像安装等等。方法众多就不一一的阐述原理以及不同方法的优劣。这里选择最实用的U盘安装进行教学。</p><p>  <strong>准备工具：一个U盘、一个windows的镜像。</strong></p><p>  镜像下载地址（切勿解压，后续塞进U盘即可）：<a href="https://next.itellyou.cn/Original/">https://next.itellyou.cn/Original/</a> </p><h3 id="启动盘的制作"><a href="#启动盘的制作" class="headerlink" title="启动盘的制作"></a>启动盘的制作</h3><p>  市面上存在众多的U盘启动盘制作工具，比如大白菜，老毛桃这些上古传奇工具。新兴工具WINPE。<br>  但是我更加推荐另外俩款制作工具：ventory（安装包小，并且可以配置脚本实现批量安装）和优启通（新手的最爱，操作简单）。<br>  ventory下载地址：<a href="https://www.ventoy.net/cn/index.html">https://www.ventoy.net/cn/index.html</a><br>  优启通下载地址：<a href="https://www.itsk.com/thread-424686-1-1.html">https://www.itsk.com/thread-424686-1-1.html</a></p><p>  接下来以优启通为例完成启动盘制作<br>  1.将U盘插入你的电脑并保证里面没有任何重要的文件，下载好压缩包后解压，并打开EasyU_v（x.x）.exe文件。<br>  2.程序会自动扫描到你的U盘，写入模式为 USB-HDD，分区格式 NTFS，确认后点击全新制作即可。<br>  3.大约等待几分钟启动盘即制作完成，这个时候<strong>将镜像和电脑里重要的文件存入U盘</strong>。</p><h3 id="进入BIOS"><a href="#进入BIOS" class="headerlink" title="进入BIOS"></a>进入BIOS</h3><p>  这一步的目的是将电脑的启动顺序换成U盘优先。<br>  步骤：<br>  1.重新启动电脑后连续按DEL键，笔记本按F2键进入。<br>  2.将第一启动项设置为U盘启动。（不同电脑的更改方式不统一，下面阐述最常见类型）<br>  进入BIOS FEATURES SETUP中，将Boot Sequence（启动顺序）设定为USB-ZIP（或USB-HDD、USB-FDD，USB-CD-ROM 请与你制作的U盘工作模式对应）最上方为第一启动项。设定的方法是在该项上按PageUP 或 （上升）或PageDown（下降）键进行更换。<br>  特殊机型自行百度。<br>  3.按F10保存退出</p><h3 id="启动盘操作"><a href="#启动盘操作" class="headerlink" title="启动盘操作"></a>启动盘操作</h3><p>  1.打开橙色程序DG硬盘分区，根据情况清除所有分区切勿删除U盘内容，删除方法点击对应分区然后右键找到删除选项，删除完成一定要点左上角的保存更改。<br>  2.如果有固态硬盘请优先选择作为系统盘，全是机械硬盘请忽略。<br>  3.点击左上角的快速分区，分区表类必须选GUID，分区数目自行定夺，如果有俩个及以上的磁盘，那么作为系统盘的那个磁盘必须选上<strong>保留现有ESP分区和创建MSR分区</strong>（其余磁盘请忽略，除非你想搞双系统）， 高级设置里NTFS不要更改，后面的数字可随意更改（注意系统盘分区时一定要让某区在80GB以上，不然操作系统的镜像映射不了）图中E盘是系统盘那么接下来恢复镜像也必然要选折E盘， 然后清空卷标， 最后一定注意下方第二行要选着<strong>4096扇区</strong>。最后直接退出程序即可，这里并不需要保存。</p><hr><p><img src="/image/caozuoxitong/1.jpg" alt="截图"></p><hr><p>  4.打开红色软件EIX系统安装程序 点击Windows 10 专业版 和启动盘（E） 点击一键恢复即可。<strong>最后在完成重启时一定要拔掉U盘啊。</strong></p><hr><p><img src="/image/caozuoxitong/2.jpg" alt="截图"></p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;  操作系统的重新安装可以帮助我们解决大部分的电脑问题，而定时的重装系统也是一个良好的使用习惯。&lt;/p&gt;
&lt;h3 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h3&gt;&lt;p&gt;  重装操作</summary>
      
    
    
    
    <category term="windows" scheme="http://xczf.shop/cate%EF%BC%9Agories/windows/"/>
    
    
    <category term="系统原理" scheme="http://xczf.shop/tags/%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
    
    <category term="windows" scheme="http://xczf.shop/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>python 爬虫 （施工中）</title>
    <link href="http://xczf.shop/2021/07/15/python-%E7%88%AC%E8%99%AB/"/>
    <id>http://xczf.shop/2021/07/15/python-%E7%88%AC%E8%99%AB/</id>
    <published>2021-07-15T11:00:41.000Z</published>
    <updated>2023-12-19T09:24:58.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一-基础部分"><a href="#一-基础部分" class="headerlink" title="一.基础部分"></a>一.基础部分</h2><h3 id="1-爬虫概念"><a href="#1-爬虫概念" class="headerlink" title="1.爬虫概念"></a>1.爬虫概念</h3><h4 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h4><p>网络爬虫（又被称为网页蜘蛛，网络机器人）就是模拟浏览器发送网络请求，接收请求响应，一种按照一定的规则，自动地抓取互联网信息的程序。只要是浏览器(客户端)能做的事情，爬虫都能够做</p><h4 id="获取爬虫"><a href="#获取爬虫" class="headerlink" title="获取爬虫"></a>获取爬虫</h4><p>其它公司开发的通用爬虫：八爪鱼，火车头<br>开发人员自己编写（目的性很强，定向爬虫）</p><h4 id="爬虫的分类"><a href="#爬虫的分类" class="headerlink" title="爬虫的分类"></a>爬虫的分类</h4><p>通用爬虫 ：通常指搜索引擎的爬虫<br>聚焦爬虫 ：针对特定网站的爬虫</p><h3 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h3><hr><p><img src="/image/%E7%88%AC%E8%99%AB/1.jpg" alt="1"></p><hr><p>向起始url发送请求，并获取响应-&gt;对响应进行提取-&gt;如果提取url，则继续发送请求获取响应-&gt;如果提取数据，则将数据进行保存<br><strong>提取url是最耗时、最复杂的地方</strong></p><h3 id="3-http-https协议"><a href="#3-http-https协议" class="headerlink" title="3.http,https协议"></a>3.http,https协议</h3><p>基础部分：<a href="https://www.xczf.asia/2023/10/01/DevOps/#http-%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">https://www.xczf.asia/2023/10/01/DevOps/#http-%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE</a><br>网络调试助手下载： <a href="http://www.cmsoft.cn/download/cmsoft/netassist.zip">http://www.cmsoft.cn/download/cmsoft/netassist.zip</a><br>加上HTTP协议的内容,整体当做数据发送给TCP服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">200</span> OK <span class="comment"># 响应头</span></span><br><span class="line"></span><br><span class="line">hello world <span class="comment"># 响应体s</span></span><br></pre></td></tr></table></figure><ul><li>请求头：告诉http服务器当前http客户端信息<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> <span class="string">/</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>127.0.0.1:8081 # 主机和端口号</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive # 链接类型</span><br><span class="line"><span class="attribute">sec-ch-ua</span><span class="punctuation">: </span>&quot;Google Chrome&quot;;v=&quot;119&quot;, &quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;</span><br><span class="line"><span class="attribute">sec-ch-ua-mobile</span><span class="punctuation">: </span>?0</span><br><span class="line"><span class="attribute">sec-ch-ua-platform</span><span class="punctuation">: </span>&quot;Windows&quot;</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1 # 升级为HTTPS请求</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 # 浏览器名称</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>... # 传输文件类型</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br # 文件编解码格式</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.9,en-CN;q=0.8,en;q=0.7,zh-HK;q=0.6</span><br><span class="line"># x-requested-with :XMLHttpRequest 表示该请求是Ajax异步请求</span><br><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>... # Cookie</span><br></pre></td></tr></table></figure></li><li>一个页面显示的过程<br>1.浏览器先向地址栏中的url发起请求，并获取相应<br>2.在返回的响应内容（html）中，会带有css、js、图片等url地址，以及ajax代码，浏览器按照响应内容中的顺序依次发送其他的请求，并获取相应的响应<br>3.浏览器每获取一个响应就对展示出的结果进行添加（加载），js，css等内容会修改页面的内容，js也可以重新发送请求，获取响应<br>4.渲染:从获取第一个响应并在浏览器中展示，直到最终获取全部响应，并在展示的结果中添加内容或修改<h3 id="4-robots协议"><a href="#4-robots协议" class="headerlink" title="4.robots协议"></a>4.robots协议</h3>在线生成robots：<a href="https://tool.chinaz.com/robots">https://tool.chinaz.com/robots</a><br>Robots协议：网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取，但它仅仅是互联网中的一般约定<br>Robots.txt:存放于站点根目录下的纯文本文件，指定搜索引擎只抓取指定内容，禁止抓取的部分内容或全部内容</li><li>User-agent:只能有一条，用于描述搜索引擎名字</li><li>Disallow：描述不希望被访问到的URL<h3 id="5-爬虫相关插件"><a href="#5-爬虫相关插件" class="headerlink" title="5.爬虫相关插件"></a>5.爬虫相关插件</h3>XPath Helper：<a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=zh-CN">https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl?hl=zh-CN</a><br>Web Scraper：<a href="https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn?hl=zh-CN">https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn?hl=zh-CN</a><br>Toggle JavaScript：<a href="https://chrome.google.com/webstore/detail/toggle-javascript/cidlcjdalomndpeagkjpnefhljffbnlo?hl=zh-CN">https://chrome.google.com/webstore/detail/toggle-javascript/cidlcjdalomndpeagkjpnefhljffbnlo?hl=zh-CN</a><br>User-Agent Switcher for Chrome：<a href="https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg?hl=zh-CN">https://chrome.google.com/webstore/detail/user-agent-switcher-for-c/djflhoibgkdhkhhcedjiklpkjnoahfmg?hl=zh-CN</a><br>EditThisCookie：<a href="https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=zh-CN">https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg?hl=zh-CN</a><br>switchysharp：<a href="https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm?hl=zh-CN">https://chrome.google.com/webstore/detail/proxy-switchysharp/dpplabbmogkhghncfbfdeeokoefdjegm?hl=zh-CN</a><br>JSON-handle：<a href="https://chromewebstore.google.com/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj?hl=zh-CN">https://chromewebstore.google.com/detail/json-handle/iahnhfdhidomcpggpaimmmahffihkfnj?hl=zh-CN</a><h3 id="6-爬虫相关软件"><a href="#6-爬虫相关软件" class="headerlink" title="6.爬虫相关软件"></a>6.爬虫相关软件</h3><h4 id="POSTMAN"><a href="#POSTMAN" class="headerlink" title="POSTMAN"></a>POSTMAN</h4>下载：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a><br>POSTMAN教程：<a href="https://www.jianshu.com/p/97ba64888894">https://www.jianshu.com/p/97ba64888894</a><h4 id="ApiPost"><a href="#ApiPost" class="headerlink" title="ApiPost"></a>ApiPost</h4>下载：<a href="https://www.apipost.cn/download.html">https://www.apipost.cn/download.html</a><br>ApiPost教程<a href="https://doc.apipost.cn/">https://doc.apipost.cn/</a><h3 id="7-requests模块"><a href="#7-requests模块" class="headerlink" title="7.requests模块"></a>7.requests模块</h3>作用：发送网络请求，返回响应数据<br>中文文档 ：<a href="https://requests.readthedocs.io/zh_CN/latest">https://requests.readthedocs.io/zh_CN/latest</a><h4 id="安装requests模块"><a href="#安装requests模块" class="headerlink" title="安装requests模块"></a>安装requests模块</h4></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install pip==20.2.4</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure></li><li>模块管理<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt <span class="comment"># 查看已经安装的模块</span></span><br><span class="line">pip install -r requirements.txt <span class="comment"># 下载文件中所有模块</span></span><br></pre></td></tr></table></figure><h4 id="requests发送get"><a href="#requests发送get" class="headerlink" title="requests发送get"></a>requests发送get</h4>通过requests向url发送请求，获取数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line"><span class="comment"># 三种方法按顺序尝试，解决所有网页解码的问题</span></span><br><span class="line"><span class="comment"># str类型数据，默认解码得到的内容，一般都是正确的，text一般用于文本</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br><span class="line"><span class="comment"># str类型数据(utf-8)</span></span><br><span class="line"><span class="comment"># bytes类型数据，content用于媒体文件</span></span><br><span class="line"><span class="built_in">print</span>(response.content.decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(response.encoding=utf-<span class="number">8</span>)</span><br></pre></td></tr></table></figure></li><li>reponse常用属性<br>response.text                        响应体 str类型<br>respones.content                 响应体 bytes类型<br>response.status_code          响应状态码<br>response.request.headers  响应对应的请求头<br>response.headers                 响应头<br>response.request.cookies    响应对应请求的cookie<br>response.cookies                  响应的cookie（经过了set-cookie动作）<br>response.url                           请求的URL<h5 id="案例：下载一张图片"><a href="#案例：下载一张图片" class="headerlink" title="案例：下载一张图片"></a>案例：下载一张图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;https://trademark.zbjimg.com/pattern-prod/2016/image_27/20577261.jpg&quot;</span></span><br><span class="line"><span class="comment"># 响应是图片，且是而二进制类型</span></span><br><span class="line">r = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二进制打开+写入打开文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/img/A.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">f.write(r.content)</span><br></pre></td></tr></table></figure><h4 id="iter-content"><a href="#iter-content" class="headerlink" title="iter_content"></a>iter_content</h4>iter_content：想要知道下载的进度，可以通过类似迭代的方式下载部分资源</li><li>使用iter_content<br>在获取数据时，设置stream&#x3D;True**(如果设置了stream&#x3D;True，那么什么时候要获取这个数据内容，才会真正的开始下载。如果不设置stream&#x3D;True，那么在调用resquests.get时，就会耗费时间下载)**<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(url=url, stream=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 取值</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.html&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fd:</span><br><span class="line"><span class="comment"># chunk_size每一条线程执行通过块大小</span></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">100</span>):</span><br><span class="line">        fd.write(chunk)</span><br></pre></td></tr></table></figure><h5 id="下载视频时显示进度"><a href="#下载视频时显示进度" class="headerlink" title="下载视频时显示进度"></a>下载视频时显示进度</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">video_url = <span class="string">&quot;https://f.video.weibocdn.com/o0/98KgDiAIlx08aa603yXu01041200PeG20E010.mp4?label=mp4_1080p&amp;template=1920x1080.25.0&amp;media_id=4967933810507867&amp;tp=8x8A3El:YTkl0eM8&amp;us=0&amp;ori=1&amp;bf=4&amp;ot=h&amp;ps=3lckmu&amp;uid=3ZoTIp&amp;ab=,8143-g0,8013-g0,3601-g27&amp;Expires=1700124023&amp;ssig=Ljd%2Fl28WYG&amp;KID=unistore,video&quot;</span></span><br><span class="line">r = requests.get(url=video_url, stream=True)</span><br><span class="line"><span class="comment"># 总长度</span></span><br><span class="line">reponse_body_lenth = int(r.headers.get(<span class="string">&quot;Content-Length&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;body的数据长度为:&quot;</span>, reponse_body_lenth)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取响应内容存储到文件</span></span><br><span class="line">with open(<span class="string">&quot;1.mp4&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) as fd:</span><br><span class="line">    write_length = 0</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=100):</span><br><span class="line">        write_length += fd.write(chunk)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;下载进度: %02.2f%%&quot;</span> % (100 * write_length / reponse_body_lenth))</span><br></pre></td></tr></table></figure><h4 id="发送带header请求"><a href="#发送带header请求" class="headerlink" title="发送带header请求"></a>发送带header请求</h4>有些URL，在请求时不同的浏览器版本得到的响应内容不同，所以此时我们就需要修改请求头或者添加请求头信息</li><li>r.headers  响应头</li><li>r.request.headers <strong>请求头</strong></li><li>给请求添加header操作<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line">r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure><h5 id="携带User-Agent请求"><a href="#携带User-Agent请求" class="headerlink" title="携带User-Agent请求"></a>携带User-Agent请求</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers)</span><br><span class="line"><span class="comment"># 打印请求头信息</span></span><br><span class="line"><span class="built_in">print</span>(r.request.headers)</span><br><span class="line"><span class="comment"># 响应内容</span></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h4 id="带有URL-参数的请求"><a href="#带有URL-参数的请求" class="headerlink" title="带有URL 参数的请求"></a>带有URL 参数的请求</h4>搜索的时候经常发现url地址中会有一个 ?，问号后边的就是请求参数，又叫查询字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kw = &#123;<span class="string">&#x27;wd&#x27;</span>:<span class="string">&#x27;python&#x27;</span>&#125; <span class="comment"># 请求参数的形式：字典</span></span><br><span class="line">r = requests.get(url, params=kw)</span><br></pre></td></tr></table></figure><h5 id="案例-baidu查询"><a href="#案例-baidu查询" class="headerlink" title="案例:baidu查询"></a>案例:baidu查询</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是目标url</span></span><br><span class="line"><span class="comment"># url = &#x27;https://www.baidu.com/s?wd=1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后有没有问号结果都一样</span></span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/s&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求参数是一个字典 即wd=python</span></span><br><span class="line">kw = &#123;<span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url, headers=headers, params=kw)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请求的URL：&quot;</span>, r.url)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;响应内容如下：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.content)</span><br></pre></td></tr></table></figure><h4 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h4>POST，用来提交数据</li><li>发送POST请求的方式<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;keyword&quot;</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.post(<span class="string">&quot;目标URL&quot;</span>, data=data)</span><br></pre></td></tr></table></figure><h5 id="单词查询"><a href="#单词查询" class="headerlink" title="单词查询"></a>单词查询</h5></li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/2.jpg" alt="单词查询"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fanyi</span>(<span class="params">keyword</span>):</span><br><span class="line">    url = <span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># 要发送的请求体</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;kw&quot;</span>: keyword</span><br><span class="line">    &#125;</span><br><span class="line">    r = requests.post(url=url, headers=headers, data=data)</span><br><span class="line">    <span class="comment"># 将字符串格式的字典（json字符串），转换为python字典</span></span><br><span class="line">    text_dict = json.loads(r.text)</span><br><span class="line">    k = text_dict.get(<span class="string">&quot;data&quot;</span>)[<span class="number">0</span>].get(<span class="string">&quot;k&quot;</span>)</span><br><span class="line">    v = text_dict.get(<span class="string">&quot;data&quot;</span>)[<span class="number">0</span>].get(<span class="string">&quot;v&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(k)</span><br><span class="line">    <span class="built_in">print</span>(v)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        keyword = <span class="built_in">input</span>(<span class="string">&#x27;请输入单词:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> keyword == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        fanyi(keyword)</span><br></pre></td></tr></table></figure><hr><p><img src="/image/%E7%88%AC%E8%99%AB/3.jpg" alt="boy"></p><hr><h5 id="任意贴吧网页源码爬取"><a href="#任意贴吧网页源码爬取" class="headerlink" title="任意贴吧网页源码爬取"></a>任意贴吧网页源码爬取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TieBaSpider</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,tieba_name,n</span>):</span><br><span class="line">        self.tieba_name =tieba_name</span><br><span class="line">        self.n = n</span><br><span class="line">        self.url_temp = <span class="string">&quot;https://tieba.baidu.com/f?kw=&quot;</span> + tieba_name + <span class="string">&quot;=&amp;pn&#123;&#125;&quot;</span></span><br><span class="line">        self.headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_url_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;将每页的网址传入数组，每50pn代表一页&#x27;&#x27;&#x27;</span></span><br><span class="line">        url_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.n):</span><br><span class="line">            url = self.url_temp.<span class="built_in">format</span>(i*<span class="number">50</span>)</span><br><span class="line">            url_list.append(url)</span><br><span class="line">        <span class="keyword">return</span> url_list</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_url</span>(<span class="params">self,url</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;发送请求，获取数据,并以bit返回&#x27;&#x27;&#x27;</span></span><br><span class="line">        r = requests.get(url,headers=self.headers)</span><br><span class="line">        <span class="keyword">return</span> r.content.decode()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_html_str</span>(<span class="params">self,html_str,page_num</span>):</span><br><span class="line">        txt_name = <span class="string">&quot;&#123;&#125;吧-第&#123;&#125;页.html&quot;</span>.<span class="built_in">format</span>(self.tieba_name,page_num)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(txt_name,<span class="string">&quot;w&quot;</span>,encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(html_str)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1.造url_list列表</span></span><br><span class="line">        url_list = self.get_url_list()</span><br><span class="line">        <span class="comment"># 2.遍历url_list发送请求，获取响应</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            html_str = self.parse_url(url)</span><br><span class="line">            <span class="comment"># 3.保存</span></span><br><span class="line">            page_num = url_list.index(url) + <span class="number">1</span></span><br><span class="line">            self.save_html_str(html_str,page_num)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;save Done&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    tieba_name = <span class="built_in">input</span>(<span class="string">&quot;请输入贴吧名字:&quot;</span>)</span><br><span class="line">    page = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入爬取页数:&quot;</span>))</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tieba = TieBaSpider(tieba_name,page)</span><br><span class="line">        tieba.run()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;错误为：&quot;</span>+e)</span><br></pre></td></tr></table></figure><h4 id="requests处理cookie"><a href="#requests处理cookie" class="headerlink" title="requests处理cookie"></a>requests处理cookie</h4><p>cookie和session详解：<a href="https://blog.csdn.net/swadian2008/article/details/104267034">https://blog.csdn.net/swadian2008/article/details/104267034</a><br>为什么要有cookie：http是上网最常用的协议，但它是无状态的，所以浏览器再次请求并不知到第一次请求的情况，所以第一次请求后服务器会给浏览器一个值，下次访问有即认为不是新用户<br>什么是session：session是保存在服务端的，服务端要给每个用户保存一个sessionId，而浏览器只需要保存自己的seeionId，这样就给服务器增加了负担。因为每个用户只需要存自己的sessionId，而服务器需要存所有用户的sessionId。</p><h5 id="发送请求时添加cookie"><a href="#发送请求时添加cookie" class="headerlink" title="发送请求时添加cookie"></a>发送请求时添加cookie</h5><ul><li>cookie字符串添加headers中<br><strong>cookie有过期时间 ，所以直接复制浏览器中的cookie可能意味着下一次运行程序时需要替换代码中的cookie，对应的我们也可以通过一个程序专门来获取cookie供其他程序使用；当然也有很多网站的cookie过期时间很长，这种情况下，直接复制cookie来使用更加简单</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>:<span class="string">&quot;PPA_CI=6282ee9fda2dc5bbd68bdc44ace090f7; Hm_lvt_12d0a9d48890160be2aeca33f7eb2fdb=1700049682,1700111290,1700228785,1700277765; Hm_lpvt_12d0a9d48890160be2aeca33f7eb2fdb=1700277770&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure></li><li>cookies参数接收字典形式的cookie<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookies = &#123;<span class="string">&quot;cookie的name&quot;</span>: <span class="string">&quot;cookie的value&quot;</span>&#125;</span><br><span class="line">requests.get(url, headers=headers, cookies=cookie_dict)</span><br></pre></td></tr></table></figure></li><li>将字符串cookie转换为字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies_dict = &#123;temp[:temp.find(<span class="string">&quot;=&quot;</span>)]: temp[temp.find(<span class="string">&quot;=&quot;</span>)+<span class="number">1</span>:] <span class="keyword">for</span> temp <span class="keyword">in</span> cookies_str.split(<span class="string">&quot;; &quot;</span>)&#125;</span><br></pre></td></tr></table></figure><h5 id="获取响应时提取cookie"><a href="#获取响应时提取cookie" class="headerlink" title="获取响应时提取cookie"></a>获取响应时提取cookie</h5></li><li>直接从响应头中get<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(r.headers.get(<span class="string">&quot;Set-Cookie&quot;</span>))</span><br></pre></td></tr></table></figure></li><li>response.cookies<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookies = requests.utils.dict_from_cookiejar(r.cookies)</span><br></pre></td></tr></table></figure><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4>通过各种方法将各种网络请求重新定个方向转到其它位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://www.360buy.com&quot;</span>, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(r.url) <span class="comment"># 返回了https://www.jd.com/，即重定向</span></span><br></pre></td></tr></table></figure><h5 id="取消自动重定向"><a href="#取消自动重定向" class="headerlink" title="取消自动重定向"></a>取消自动重定向</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(url, allow_redirects=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>, headers=headers, allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code) <span class="comment"># 302</span></span><br><span class="line"><span class="built_in">print</span>(r.url) <span class="comment"># http://www.baidu.com </span></span><br><span class="line"><span class="built_in">print</span>(r.headers.get(<span class="string">&quot;Location&quot;</span>)) <span class="comment"># https://www.baidu.com/</span></span><br></pre></td></tr></table></figure><h5 id="获取历史请求（即获取重定向的所有记录）"><a href="#获取历史请求（即获取重定向的所有记录）" class="headerlink" title="获取历史请求（即获取重定向的所有记录）"></a>获取历史请求（即获取重定向的所有记录）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://www.360buy.com&quot;</span>, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;历史请求过程信息：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.history)</span><br><span class="line"><span class="keyword">for</span> one_info <span class="keyword">in</span> r.history:</span><br><span class="line">    <span class="built_in">print</span>(one_info.status_code, one_info.url, one_info.headers.get(<span class="string">&quot;Location&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="SSL证书错误"><a href="#SSL证书错误" class="headerlink" title="SSL证书错误"></a>SSL证书错误</h4></li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/4.jpg" alt="SSL证书错误"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 即有报错ssl.CertificateError ...</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://12306.cn/mormhweb/&quot;</span></span><br><span class="line"><span class="comment"># verify=False即可解决问题</span></span><br><span class="line">r = requests.get(url, verify=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h4 id="请求超时"><a href="#请求超时" class="headerlink" title="请求超时"></a>请求超时</h4><p>一个请求很久没有结果，就会让整个项目的效率变得非常低，这个时候我们就需要对请求进行强制要求，让他必须在特定的时间内返回结果，否则就报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.google.com&quot;</span></span><br><span class="line">r = requests.get(url, timeout=<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="retrying模块"><a href="#retrying模块" class="headerlink" title="retrying模块"></a>retrying模块</h4><p>retrying模块的地址：<a href="https://pypi.org/project/retrying/">https://pypi.org/project/retrying/</a></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install retrying</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>通过装饰器的方式使用，让<strong>被装饰的函数反复执行retry中可以传入参数stop_max_attempt_number,让函数报错后继续重新执行，达到最大执行次数的上限，如果每次都报错，整个函数报错，如果中间有一个成功，程序继续往后执行</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop_max_attempt_number=<span class="number">2</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;num=&quot;</span>, num)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">100</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;i&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        test()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> ret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;产生异常...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有异常&quot;</span>)</span><br><span class="line"><span class="comment"># num = 1</span></span><br><span class="line"><span class="comment"># num = 2</span></span><br><span class="line"><span class="comment"># 产生异常...</span></span><br></pre></td></tr></table></figure><h5 id="retrying和requests的简单封装"><a href="#retrying和requests的简单封装" class="headerlink" title="retrying和requests的简单封装"></a>retrying和requests的简单封装</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"></span><br><span class="line">num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@retry(<span class="params">stop_max_attempt_number=<span class="number">3</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_url_test</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">global</span> num</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;第%d次尝试&quot;</span> % num)</span><br><span class="line">    num += <span class="number">1</span></span><br><span class="line">    headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line">    <span class="comment"># 超时的时候会报错并重试</span></span><br><span class="line">    r = requests.get(url, headers=headers, timeout=<span class="number">3</span>)</span><br><span class="line">    <span class="comment"># 状态码不是200，也会报错并重试</span></span><br><span class="line">    <span class="keyword">assert</span> r.status_code == <span class="number">200</span>  <span class="comment"># 断言:如果assert 后面的条件为True则呈现继续运行，否则抛出异常</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_url</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># 进行异常捕获</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = parse_url_test(url)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;产生异常：&quot;</span>, e)</span><br><span class="line">        <span class="comment"># 报错返回None</span></span><br><span class="line">        r = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://chinasoftinc.com/owa&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----开始----&quot;</span>)</span><br><span class="line">    r = parse_url(url=url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----结束----&quot;</span>, <span class="string">&quot;响应内容为：&quot;</span>, r)</span><br></pre></td></tr></table></figure><hr><p><img src="/image/%E7%88%AC%E8%99%AB/5.jpg" alt="retrying"></p><hr><h4 id="发送json数据"><a href="#发送json数据" class="headerlink" title="发送json数据"></a>发送json数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.post(url, json=&#123;<span class="string">&quot;kw&quot;</span>: <span class="string">&quot;python&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h5 id="登录查询"><a href="#登录查询" class="headerlink" title="登录查询"></a>登录查询</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># 薪经咨询登录URL</span></span><br><span class="line">url = <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 配置要登录的用户名</span></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;mobile&quot;</span>: <span class="string">&quot;xxxxxxxxxxxxx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;xxxxxxx&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 进行登录</span></span><br><span class="line">r = requests.post(url=url, headers=headers, json=payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请求头是：&quot;</span>, r.request.headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请求体是：&quot;</span>, r.request.body)</span><br><span class="line"><span class="comment"># 响应的cookie</span></span><br><span class="line"><span class="built_in">print</span>(requests.utils.dict_from_cookiejar(r.cookies))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;响应体为：&quot;</span>, r.json())</span><br><span class="line"><span class="comment"># print(json.loads(r.text))</span></span><br></pre></td></tr></table></figure><h4 id="Session会话"><a href="#Session会话" class="headerlink" title="Session会话"></a>Session会话</h4><p>爬取某些页面的时候，服务器往往会需要cookie，而想要得到cookie 就需要先访问某个URL进行登录，服务器接收到请求之后验证用户名以及密码在登录成功的情况下会返回一个响应，这个响应的header中一般会有一个set-cookie的信息，它对应的值就是要设置的cookie信息。<br>虽然可以通过requests.utils.dict_from_cookiejar(r.cookies)提取到这个响应信息中设置的新cookie，但在下一个请求中再携带这个数据的过程较为麻烦。</p><ul><li>Session的作用<br>保存cookie，下一次请求会自动带上前一次的cookie<br>实现和服务端的长连接，加快请求速度</li><li>使用方法<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># session对象在请求了一个网站后，对方服务器设置在本地的cookie会保存在session对象中，下一次再使用session对象请求对方服务器的时候，会自动带上前一次的cookie</span></span><br><span class="line"><span class="comment"># 1. 创建一个session实例对象</span></span><br><span class="line">s = requests.Session()</span><br><span class="line"><span class="comment"># 2. 使用上一步创建的对象发起请求</span></span><br><span class="line">r = s.get(url1, headers)</span><br><span class="line">r = s.get(url2, headers)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">s = requests.Session()</span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"><span class="comment"># 发送第一个请求</span></span><br><span class="line">r = s.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第一次请求的请求头为:&quot;</span>, r.request.headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;响应头：&quot;</span>, r.headers)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;设置的cookie为:&quot;</span>, requests.utils.dict_from_cookiejar(r.cookies))</span><br><span class="line"><span class="comment"># 发送第二个请求（）</span></span><br><span class="line">r = s.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;第二次请求的请求头为:&quot;</span>, r.request.headers)</span><br></pre></td></tr></table></figure><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4>爬某个网站的时候，如果对方进行了封锁例如将我们电脑的公网ip封锁了，那么也就意味着只要是这个ip发送的所有请求这个网站都不会进行响应；此时我们就可以使用代理，绕过它的封锁从而实现继续爬取数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># http代理</span></span><br><span class="line">ip = <span class="string">&quot;125.88.82.26&quot;</span></span><br><span class="line">port = <span class="number">4777</span></span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://%s:%d&quot;</span> % (ip, port),</span><br><span class="line">    <span class="string">&quot;https&quot;</span>: <span class="string">&quot;http://%s:%d&quot;</span> % (ip, port)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求头</span></span><br><span class="line">headers = &#123;<span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># URL为通过百度搜索ip，响应内容中包括ip查询信息</span></span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com/s?wd=nginx&quot;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url=url, headers=headers, proxies=proxies, timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./百度查询nginx.html&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.text)</span><br></pre></td></tr></table></figure><h3 id="8-数据提取"><a href="#8-数据提取" class="headerlink" title="8.数据提取"></a>8.数据提取</h3>爬虫爬取的数据中有很多不同类型的数据</li><li>结构化数据：json，xml等，直接转化为python类型</li><li>非结构化数据：HTML，需要正则表达式、xpath、BS4<h4 id="结构数据提取-JSON"><a href="#结构数据提取-JSON" class="headerlink" title="结构数据提取-JSON"></a>结构数据提取-JSON</h4></li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/6.jpg" alt="json模块使用"></p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># json.dumps实现python类型转化为json字符串,indent实现换行和空格,ensure_ascii=False实现让中文写入的时候保持为中文</span></span><br><span class="line">json_str = json.dumps(mydict, indent=<span class="number">2</span>, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># json.loads实现json字符串转化为python的数据类型</span></span><br><span class="line">my_dict = json.loads(json_str)</span><br><span class="line">==============================================</span><br><span class="line"><span class="comment"># 解码,默认为utf-8</span></span><br><span class="line"><span class="comment"># son_str = r.text 浏览器自己header中定义的编码形式</span></span><br><span class="line">json_str = r.content.decode()</span><br><span class="line"><span class="comment"># 把json格式字符串转换成python对象</span></span><br><span class="line">json_dict = json.loads(json_str)</span><br><span class="line"><span class="built_in">print</span>(json_dict)</span><br><span class="line"><span class="comment"># 还可以使用json() print(r.json())</span></span><br></pre></td></tr></table></figure><h5 id="案例：FM排行榜信息"><a href="#案例：FM排行榜信息" class="headerlink" title="案例：FM排行榜信息"></a>案例：FM排行榜信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://webapi.qingting.fm/api/mobile/rank&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url=url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br></pre></td></tr></table></figure><h4 id="非结构数据提取-正则表达式"><a href="#非结构数据提取-正则表达式" class="headerlink" title="非结构数据提取-正则表达式"></a>非结构数据提取-正则表达式</h4><p>正则表达式：<a href="https://www.xczf.asia/2021/06/01/Shell/">https://www.xczf.asia/2021/06/01/Shell/</a></p><h5 id="re模块方法"><a href="#re模块方法" class="headerlink" title="re模块方法"></a>re模块方法</h5><ul><li>pattern.match（从头找一个）</li><li>pattern.search（找一个）</li><li>pattern.findall（找所有）</li><li>pattern.sub（替换）</li><li>re.compile（编译）<br><strong>中文的 unicode 编码范围 主要在 [u4e00-u9fa5]，这里说主要是因为这个范围并不完整，比如没有包括全角（中文）标点，不过，在大部分情况下，应该是够用的</strong><h5 id="爬取36kr首页新闻"><a href="#爬取36kr首页新闻" class="headerlink" title="爬取36kr首页新闻"></a>爬取36kr首页新闻</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://36kr.com&quot;</span></span><br><span class="line"><span class="comment"># 被反爬就headers里加入cookie</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Mobile Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 得到响应的内容</span></span><br><span class="line">html = r.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 通过正则表达式提取需要的数据</span></span><br><span class="line">item_list = re.findall(<span class="string">r&#x27;&lt;a class=&quot;item-info clearfloat&quot; href=&quot;([^&quot;]*).*?ellipsis-2&quot;&gt;(.*?)&lt;/span&gt;.*?&lt;/a&gt;&#x27;</span>, html)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提取到的新闻个数:&quot;</span>, <span class="built_in">len</span>(item_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> temp <span class="keyword">in</span> item_list:</span><br><span class="line">    <span class="built_in">print</span>(url + temp[<span class="number">0</span>], temp[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h4 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h4>Chrome浏览器插件： XPath Helper<br>官方文档：<a href="http://www.w3school.com.cn/xpath/index.asp">http://www.w3school.com.cn/xpath/index.asp</a><br>XPath (XML Path Language) XML路径语言，主要在xml文档中查找需要的信息，现在也适用于HTML文档的搜索<h5 id="XPath语法"><a href="#XPath语法" class="headerlink" title="XPath语法"></a>XPath语法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nodename<span class="comment"># 选中该元素</span></span><br><span class="line">/    <span class="comment"># 从根节点选取、或者是元素和元素间的过渡</span></span><br><span class="line">//    <span class="comment"># 从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</span></span><br><span class="line">.    <span class="comment"># 选取当前节点</span></span><br><span class="line">..    <span class="comment"># 选取当前节点的父节点</span></span><br><span class="line"><span class="meta">@    </span><span class="comment"># 选取属性</span></span><br><span class="line">*       <span class="comment"># 所有元素</span></span><br><span class="line">text()<span class="comment"># 选取文本</span></span><br></pre></td></tr></table></figure></li><li>实例<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bookstore        <span class="comment"># 选择bookstore元素</span></span><br><span class="line">/bookstore        <span class="comment"># 选取根元素bookstore</span></span><br><span class="line">bookstore/book    <span class="comment"># 选取属于bookstore 的子元素的所有book元素</span></span><br><span class="line">//book            <span class="comment"># 选取所有 book 子元素，而不管它们在文档中的位置</span></span><br><span class="line">bookstore//book    <span class="comment"># 选择属于 bookstore 元素的后代的所有book元素</span></span><br><span class="line">//book/title/@lang<span class="comment"># 选择所有的book下面的title中的lang属性的值</span></span><br><span class="line">//book/title/text()<span class="comment"># 选择所有的book下面的title的文本</span></span><br><span class="line">//title[@lang=<span class="string">&quot;eng&quot;</span>]<span class="comment"># 选择lang属性值为eng的所有title元素</span></span><br><span class="line">/bookstore/book[<span class="number">1</span>]<span class="comment"># 选取属于 bookstore 子元素的第1个 book 元素</span></span><br><span class="line">/bookstore/book[last()]<span class="comment"># 选取属于 bookstore 子元素的最后1个 book 元素</span></span><br><span class="line">/bookstore/book[last()-<span class="number">1</span>]<span class="comment"># 选取属于 bookstore 子元素的倒数第2个 book 元素</span></span><br><span class="line">/bookstore/book[position()&gt;<span class="number">1</span>]<span class="comment"># 选择bookstore下面的book元素，从第2个开始选择</span></span><br><span class="line">/bookstore/book[position()&gt;<span class="number">1</span>][postion()&lt;<span class="number">5</span>]<span class="comment"># 选择bookstore下面的book元素，从第2个开始取到第4个元素</span></span><br><span class="line">//book/title[text()=<span class="string">&#x27;Harry Potter&#x27;</span>]<span class="comment"># 选择所有book下的title元素，仅仅选择文本为Harry Potter的title元素</span></span><br></pre></td></tr></table></figure><h5 id="连习：爬取豆瓣电影top250"><a href="#连习：爬取豆瓣电影top250" class="headerlink" title="连习：爬取豆瓣电影top250"></a>连习：爬取豆瓣电影top250</h5>网址：<a href="https://movie.douban.com/top250">https://movie.douban.com/top250</a></li><li>选择所有电影标题</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/7.jpg" alt="电影标题"></p><hr><ul><li>电影信息的href</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/8.jpg" alt="href"></p><hr><ul><li>电影的评分</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/9.jpg" alt="href"></p><hr><h4 id="非结构化数据：lxml模块使用XPath"><a href="#非结构化数据：lxml模块使用XPath" class="headerlink" title="非结构化数据：lxml模块使用XPath"></a>非结构化数据：lxml模块使用XPath</h4><h5 id="lxml模块安装"><a href="#lxml模块安装" class="headerlink" title="lxml模块安装"></a>lxml模块安装</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install lxml</span><br></pre></td></tr></table></figure><h5 id="lxml的使用"><a href="#lxml的使用" class="headerlink" title="lxml的使用"></a>lxml的使用</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;...&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 利用etree.HTML，将字符串转化为Element对象, Element对象具有XPath的方法</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line"><span class="comment"># 将Element对象，转化为字符串</span></span><br><span class="line">handled_html_str = etree.tostring(html).decode()</span><br></pre></td></tr></table></figure><h5 id="XPath语法提取数据"><a href="#XPath语法提取数据" class="headerlink" title="XPath语法提取数据"></a>XPath语法提取数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">href_list = html.xpath(<span class="string">&quot;//li[@class=&#x27;item-1&#x27;]/a/@href&quot;</span>)</span><br><span class="line">title_list = html.xpath(<span class="string">&quot;//li[@class=&#x27;item-1&#x27;]/a/text()&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="XPath分次提取"><a href="#XPath分次提取" class="headerlink" title="XPath分次提取"></a>XPath分次提取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;...&#x27;&#x27;&#x27;</span></span><br><span class="line">html = etree.HTML(text)</span><br><span class="line">li_list = html.xpath(<span class="string">&quot;//li[@class=&#x27;item-1&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># 在每一组中继续进行数据的提取</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    item = <span class="built_in">dict</span>()</span><br><span class="line">    item[<span class="string">&quot;href&quot;</span>] = li.xpath(<span class="string">&quot;./a/@href&quot;</span>)[<span class="number">0</span>] <span class="keyword">if</span> <span class="built_in">len</span>(li.xpath(<span class="string">&quot;./a/@href&quot;</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    item[<span class="string">&quot;title&quot;</span>] = li.xpath(<span class="string">&quot;./a/text()&quot;</span>)[<span class="number">0</span>] <span class="keyword">if</span> <span class="built_in">len</span>(li.xpath(<span class="string">&quot;./a/text()&quot;</span>)) &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h5 id="提取豆瓣电影评论"><a href="#提取豆瓣电影评论" class="headerlink" title="提取豆瓣电影评论"></a>提取豆瓣电影评论</h5><p>URL:<a href="https://movie.douban.com/subject/35738375/comments">https://movie.douban.com/subject/35738375/comments</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">流程分析：</span></span><br><span class="line"><span class="string">1. 通过requests发送请求获取贴吧返回的内容</span></span><br><span class="line"><span class="string">2. 将返回的内容通过etree.HTML转换为Element对象</span></span><br><span class="line"><span class="string">3. 对Element对象使用XPath提取数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/subject/35738375/comments&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 将返回的内容通过etree.HTML转换为Element对象</span></span><br><span class="line">html = etree.HTML(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 对Element对象使用XPath提取数据</span></span><br><span class="line">comment_list = html.xpath(<span class="string">&#x27;//span[@class=&quot;short&quot;]/text()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提取到的个数：&quot;</span>, <span class="built_in">len</span>(comment_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> comment <span class="keyword">in</span> comment_list:</span><br><span class="line">    <span class="built_in">print</span>(comment)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h4 id="jsonpath模块"><a href="#jsonpath模块" class="headerlink" title="jsonpath模块"></a>jsonpath模块</h4><p>JsonPath是一种可以快速解析json数据的方式<br>官网：<a href="https://goessner.net/articles/JsonPath/">https://goessner.net/articles/JsonPath/</a></p><ul><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install jsonpath</span><br></pre></td></tr></table></figure></li><li>常用语法</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/10.jpg" alt="语法"></p><hr><ul><li>案例</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/11.jpg" alt="案例"></p><hr><h4 id="非结构数据提取–BS4"><a href="#非结构数据提取–BS4" class="headerlink" title="非结构数据提取–BS4"></a>非结构数据提取–BS4</h4><p>BeautifulSoup4简称BS4 和 使用lxml模块 一样，Beautiful Soup 也是一个HTML&#x2F;XML的解析器，主要的功能也是如何解析和提取 HTML&#x2F;XML 数据<br>Beautiful Soup是基于HTML DOM的，会载入整个文档，解析整个DOM树，因此时间和内存开销都会大很多，所以性能要低于lxml模块</p><ul><li>官方文档：<a href="http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0">http://beautifulsoup.readthedocs.io/zh_CN/v4.4.0</a></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install beautifulsoup4</span><br></pre></td></tr></table></figure></li><li>基本使用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&quot;&quot;&quot;...&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Beautiful Soup 对象</span></span><br><span class="line">soup = BeautifulSoup(html, features=<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(soup.prettify())</span><br></pre></td></tr></table></figure><h5 id="find-all"><a href="#find-all" class="headerlink" title="find_all"></a>find_all</h5></li><li>name参数（可以搜索标签）</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/12.jpg" alt="name参数"></p><hr><ul><li>keyword 参数（可以搜索属性）</li><li>string参数（可以搜索内容）</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/13.jpg" alt="string参数"></p><hr><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><p>方法是 soup.select()，返回类型是 list</p><ul><li>通过标签选择器查找<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;title&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>通过类选择器查找<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;.sister&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>通过 id 选择器查找 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;#link1&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>层级选择器查找<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;p #link1&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>通过属性选择器查找<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;a[class=&quot;sister&quot;]&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li>获取文本内容get_text()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;title&#x27;</span>)[<span class="number">0</span>].get_text())</span><br></pre></td></tr></table></figure></li><li>获取属性 get(‘属性的名字’)<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(soup.select(<span class="string">&#x27;title&#x27;</span>)[<span class="number">0</span>].get(<span class="string">&#x27;href&#x27;</span>))</span><br></pre></td></tr></table></figure><h5 id="爬取新闻标题"><a href="#爬取新闻标题" class="headerlink" title="爬取新闻标题"></a>爬取新闻标题</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 通过requests发送请求，得到搜狗微信页面内容</span></span><br><span class="line">url = <span class="string">&quot;https://weixin.sogou.com/&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url=url, headers=headers)</span><br><span class="line">r.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line"><span class="comment"># 2. 通过BeautifulSoup调用select获取指定的标签</span></span><br><span class="line">soup = BeautifulSoup(r.text, features=<span class="string">&quot;lxml&quot;</span>)</span><br><span class="line">tag = soup.select(<span class="string">&#x27;ul[class=&quot;news-list&quot;]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = tag[<span class="number">0</span>].select(<span class="string">&quot;h3&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> temp_tag <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    <span class="built_in">print</span>(temp_tag.select(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>].get_text(), temp_tag.select(<span class="string">&quot;a&quot;</span>)[<span class="number">0</span>].get(<span class="string">&quot;href&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h4>逗号分隔值（Comma-Separated Values，CSV，有时也称为字符分隔值，因为分隔字符也可以不是逗号），其文件以纯文本形式存储表格数据（数字和文本）。纯文本意味着该文件是一个字符序列，不含必须像二进制数字那样被解读的数据。CSV文件由任意数目的记录组成，记录间以某种换行符分隔；每条记录由字段组成，字段间的分隔符是其它字符或字符串，最常见的是逗号或制表符。<h5 id="Python对CSV文件操作"><a href="#Python对CSV文件操作" class="headerlink" title="Python对CSV文件操作"></a>Python对CSV文件操作</h5></li><li>写入数据到CSV文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">&#x27;班级&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>, <span class="string">&#x27;手机号&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line">rows = [</span><br><span class="line">    [<span class="string">&quot;18级Python&quot;</span>, <span class="string">&#x27;小z&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;13146060xx1&#x27;</span>, <span class="string">&#x27;123456xx1&#x27;</span>],</span><br><span class="line">    [<span class="string">&quot;18级Python&quot;</span>, <span class="string">&#x27;小q&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;13146060xx2&#x27;</span>, <span class="string">&#x27;123456xx2&#x27;</span>],</span><br><span class="line">    [<span class="string">&quot;19级Python&quot;</span>, <span class="string">&#x27;小s&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;13146060xx3&#x27;</span>, <span class="string">&#x27;123456xx3&#x27;</span>],</span><br><span class="line">    [<span class="string">&quot;19级Python&quot;</span>, <span class="string">&#x27;小l&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;13146060xx4&#x27;</span>, <span class="string">&#x27;123456xx4&#x27;</span>],</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.writer(f)</span><br><span class="line">    <span class="comment"># 写入一行（我们用第一行当做表头）</span></span><br><span class="line">    f_csv.writerow(headers)</span><br><span class="line">    <span class="comment"># 写入多行行（当做数据）</span></span><br><span class="line">    f_csv.writerows(rows)</span><br></pre></td></tr></table></figure></li><li>写入字典数据到CSV<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">headers = [<span class="string">&#x27;班级&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;性别&#x27;</span>, <span class="string">&#x27;手机号&#x27;</span>, <span class="string">&#x27;QQ&#x27;</span>]</span><br><span class="line">rows = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;class_name&quot;</span>: <span class="string">&quot;18Python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&#x27;小王&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&#x27;13146060xx1&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;qq&quot;</span>: <span class="string">&#x27;123456xx1&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;class_name&quot;</span>: <span class="string">&quot;18Python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&#x27;小李&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&#x27;13146060xx2&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;qq&quot;</span>: <span class="string">&#x27;123456xx2&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;class_name&quot;</span>: <span class="string">&quot;19Python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&#x27;小赵&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&#x27;13146060xx3&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;qq&quot;</span>: <span class="string">&#x27;123456xx3&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;class_name&quot;</span>: <span class="string">&quot;19Python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;name&quot;</span>: <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;gender&quot;</span>: <span class="string">&#x27;女&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;phone&quot;</span>: <span class="string">&#x27;13146060xx4&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;qq&quot;</span>: <span class="string">&#x27;123456xx4&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test2.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.DictWriter(f, [<span class="string">&#x27;class_name&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;phone&#x27;</span>, <span class="string">&#x27;qq&#x27;</span>])</span><br><span class="line">    <span class="comment"># 写入一行（我们用第一行当做表头）</span></span><br><span class="line">    f_csv.writeheader()</span><br><span class="line">    <span class="comment"># 写入多行行（当做数据）</span></span><br><span class="line">    f_csv.writerows(rows)</span><br></pre></td></tr></table></figure></li><li>读取CSV文件<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test.csv&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.reader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> f_csv:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">type</span>(row), row)</span><br></pre></td></tr></table></figure></li><li>读取CSV文件封装为字典<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;test2.csv&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f_csv = csv.DictReader(f)</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> f_csv:</span><br><span class="line">        <span class="built_in">print</span>(row.get(<span class="string">&quot;class_name&quot;</span>), row.get(<span class="string">&quot;name&quot;</span>), row.get(<span class="string">&quot;gender&quot;</span>), row.get(<span class="string">&quot;phone&quot;</span>), row.get(<span class="string">&quot;qq&quot;</span>), )</span><br></pre></td></tr></table></figure><h2 id="二-MongoDB"><a href="#二-MongoDB" class="headerlink" title="二.MongoDB"></a>二.MongoDB</h2><h3 id="1-安装和基础使用"><a href="#1-安装和基础使用" class="headerlink" title="1.安装和基础使用"></a>1.安装和基础使用</h3><a href="https://www.xczf.asia/2022/07/01/MongoDB/">https://www.xczf.asia/2022/07/01/MongoDB/</a><h3 id="2-MongoDB和Python交互"><a href="#2-MongoDB和Python交互" class="headerlink" title="2.MongoDB和Python交互"></a>2.MongoDB和Python交互</h3></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure><h4 id="使用pymongo"><a href="#使用pymongo" class="headerlink" title="使用pymongo"></a>使用pymongo</h4></li><li>导入pymongo并选择要操作的集合<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">client = MongoClient(host, port)</span><br><span class="line">collection = client[db名][集合名]</span><br></pre></td></tr></table></figure></li><li>添加数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入一条数据</span></span><br><span class="line">collection.insert(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test10&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">34</span>&#125;)</span><br><span class="line"><span class="comment"># 插入多条数据</span></span><br><span class="line">collection.insert([&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test10&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">34</span>&#125;, &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test11&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">35</span>&#125;])</span><br><span class="line"><span class="comment"># 插入一条数据</span></span><br><span class="line">ret = collection.insert_one(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test10&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">33</span>&#125;)</span><br><span class="line"><span class="comment"># # 插入多条数据</span></span><br><span class="line">item_list = [&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test1000%d&quot;</span> % i&#125; <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"><span class="comment"># insert_many接收一个列表，列表中为所有需要插入的字典</span></span><br><span class="line">t = collection.insert_many(item_list)</span><br></pre></td></tr></table></figure></li><li>查找数据<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># find_one查找并且返回一个结果,接收一个字典形式的条件</span><br><span class="line">t = collection.find_one(&#123;&quot;name&quot;: &quot;test05&quot;&#125;)</span><br><span class="line">print(type(t),t)</span><br><span class="line"># 根据查询条件返回所有满足条件的结果</span><br><span class="line"># find返回所有满足条件的结果，如果条件为空，则返回数据库的所有</span><br><span class="line">t = collection.find()</span><br><span class="line"># 结果是一个Cursor游标对象，是一个可迭代对象，可以类似读文件的指针，</span><br><span class="line">for i in t:</span><br><span class="line">    print(i)</span><br><span class="line">print(&quot;-&quot; * 30)</span><br><span class="line">for i in t:  # 此时t中没有内容</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure></li><li>更新数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># update_one更新一条数据</span></span><br><span class="line">collection.update_one(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test05&quot;</span>&#125;, &#123;<span class="string">&quot;$set&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;new_test05&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="comment"># update_one更新全部数据</span></span><br><span class="line">collection.update_many(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test05&quot;</span>&#125;, &#123;<span class="string">&quot;$set&quot;</span>: &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;new_test05&quot;</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li>删除数据<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># delete_one删除一条数据</span></span><br><span class="line">collection.delete_one(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test10&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># delete_may删除所有满足条件的数据</span></span><br><span class="line">collection.delete_many(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;test10&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="练习：插入文档"><a href="#练习：插入文档" class="headerlink" title="练习：插入文档"></a>练习：插入文档</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用Python操作MongoDB向集合t3中插入1000个文档</span><br><span class="line">文档的属性包括 _id、name</span><br><span class="line">_id的值为0、1、2、3、. . 999</span><br><span class="line">name的值为py0、py1 . . . </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MGINfo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        client = MongoClient(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">27017</span>)</span><br><span class="line">        self.collection = client[<span class="string">&quot;test&quot;</span>][<span class="string">&quot;t3&quot;</span>]</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self</span>):</span><br><span class="line">        info_list = [&#123;<span class="string">&quot;_id&quot;</span>: x, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;py%s&quot;</span> % x&#125; <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>)]</span><br><span class="line">        <span class="comment"># 插入数据</span></span><br><span class="line">        ret = self.collection.insert_many(info_list)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_100</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 查询_id为100的整数倍的文档</span></span><br><span class="line">        ret = self.collection.find(&#123;<span class="string">&quot;$where&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            function() &#123;</span></span><br><span class="line"><span class="string">                return this._id &gt; 0 &amp;&amp; this._id % 100 == 0;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span>&#125;)</span><br><span class="line">        <span class="built_in">print</span>(ret)</span><br><span class="line">        <span class="built_in">print</span>(ret.count())</span><br><span class="line">        <span class="keyword">for</span> temp <span class="keyword">in</span> ret:</span><br><span class="line">            <span class="built_in">print</span>(temp)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">mongo_info = MGINfo()</span><br><span class="line"><span class="comment"># 查询数据</span></span><br><span class="line">mongo_info.find_100()</span><br></pre></td></tr></table></figure><h2 id="三-异步"><a href="#三-异步" class="headerlink" title="三.异步"></a>三.异步</h2>Python3.4版本引入asyncio是到标准库<br>Python3.5又加入了async&#x2F;await特性<br>Python由于<strong>GIL（全局解释器锁）的存在，不能发挥多线程多核的优势</strong>。然而在IO密集型的网络编程里，异步处理比同步处理能提升成百上千倍的效率，弥补了python性能方面的短板<h3 id="1-GIL（全局解释器锁）"><a href="#1-GIL（全局解释器锁）" class="headerlink" title="1.GIL（全局解释器锁）"></a>1.GIL（全局解释器锁）</h3>全局解释器锁（Global Interpreter Lock，GIL）规定<strong>全局范围内任意时候一个进程里只能同时执行一个线程</strong>。每一个线程在执行时，都会锁住GIL，以阻止别的线程执行；执行一段时间后，会释放GIL，以允许别的线程开始利用资源，如果遇到阻塞情况，也会提前释放锁。<br>程序是单线程，该GIL锁并不会对程序造成什么影响。但如果在计算密集型的多线程代码中，GIL就是一个性能瓶颈，使<strong>Python多线程成为伪并行多线程</strong>。</li><li>优点<br>线程是非独立的，所以同一进程里线程是数据共享，当各个线程访问数据资源时会出现“竞争”状态，即数据可能会同时被多个线程占用，造成数据混乱，这就是线程的不安全。所以引进了互斥锁，确保某段关键代码、共享数据只能由一个线程从头到尾完整地执行。</li><li>缺点<br>单个进程下，开启多个线程，无法实现并行，只能实现并发，牺牲执行效率。<br>由于GIL锁的限制，所以多线程不适合计算密集型任务，更适合IO密集型任务<br>常见IO密集型任务：网络IO（抓取网页数据）、磁盘操作（读写文件）、键盘输入<h4 id="GIL解决限制"><a href="#GIL解决限制" class="headerlink" title="GIL解决限制"></a>GIL解决限制</h4></li><li>多进程编程<br>使用多个进程而不是线程。每个 Python 进程都有自己的 Python 解释器和内存空间。Python 有一个多进程multiprocessing 模块</li><li>cython函数<br>cython通常用于处理计算密集型的任务，以加快python程序总体运行速度，在cython函数中，可以指定一部分代码避免GIL, 另一部分使用GIL</li><li>替代Python解释器<br>Python有多个解释器实现。CPython，Jython，IronPython和PyPy，分别用C，Java，C#和Python编写，是最受欢迎的。GIL 只存在于 CPython 的原始 Python 实现中。如果您的程序及其库可用于其他实现之一<h3 id="2-异步、同步"><a href="#2-异步、同步" class="headerlink" title="2.异步、同步"></a>2.异步、同步</h3></li><li>同步<br>是指完成事务的逻辑，先执行第一个事务，如果阻塞了，会一直等待，直到这个事务完成，再执行第二个事务，顺序执行。。。</li><li>异步<br>是和同步相对的，异步是指在处理调用这个事务的之后，不会等待这个事务的处理结果，直接处理第二个事务去了，通过状态、通知、回调来通知调用者处理结果。<br><strong>异步只适用于 I&#x2F;O 操作相关的代码，不适用于非 I&#x2F;O操作</strong><h3 id="3-asyncio-Python-3-7-或更高版本"><a href="#3-asyncio-Python-3-7-或更高版本" class="headerlink" title="3.asyncio Python 3.7 或更高版本"></a>3.asyncio Python 3.7 或更高版本</h3>官方文档：<a href="https://docs.python.org/zh-cn/3/library/asyncio-task.html#">https://docs.python.org/zh-cn/3/library/asyncio-task.html#</a><br>asyncio 是”多任务合作”模式（cooperative multitasking），允许异步任务交出执行权给其他任务，等到其他任务完成，再收回执行权继续往下执行。由于代码的执行权在多个任务之间交换，所以看上去好像多个任务同时运行，其实底层只有一个线程，多个任务分享运行时间。<br>asyncio 模块在单线程上启动一个事件循环（event loop），时刻监听新进入循环的事件，加以处理，并不断重复这个过程，直到异步任务结束。</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/14.jpg" alt="asyncio"></p><hr><h4 id="同步与异步的不同"><a href="#同步与异步的不同" class="headerlink" title="同步与异步的不同"></a>同步与异步的不同</h4><ul><li>同步 间隔约是3s<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        hello()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Time:%s&#x27;</span> % time.time())</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br><span class="line"><span class="comment"># Time:1700985223.8032222</span></span><br><span class="line"><span class="comment"># Time:1700985224.8173962</span></span><br><span class="line"><span class="comment"># Time:1700985225.8218596</span></span><br></pre></td></tr></table></figure></li><li>异步 间隔约是1s<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Time:%s&#x27;</span> % time.time())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        loop.run_until_complete(hello())</span><br><span class="line">        </span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    run()</span><br><span class="line"><span class="comment"># Time:1700985297.4709234</span></span><br><span class="line"><span class="comment"># Time:1700985297.4709234</span></span><br><span class="line"><span class="comment"># Time:1700985297.4709234</span></span><br></pre></td></tr></table></figure><h4 id="定义异步方法"><a href="#定义异步方法" class="headerlink" title="定义异步方法"></a>定义异步方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个异步函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是test&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="启动协程"><a href="#启动协程" class="headerlink" title="启动协程"></a>启动协程</h4><h5 id="asyncio-run（Python3-7新）"><a href="#asyncio-run（Python3-7新）" class="headerlink" title="asyncio.run（Python3.7新）"></a>asyncio.run（Python3.7新）</h5>通过asyncio.run可以调用异步函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test4</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个异步函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是test4&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line"><span class="comment"># 调用异步函数</span></span><br><span class="line"><span class="built_in">print</span>(asyncio.run(test4()))</span><br></pre></td></tr></table></figure><h5 id="事件循环（Python3-6）"><a href="#事件循环（Python3-6）" class="headerlink" title="事件循环（Python3.6）"></a>事件循环（Python3.6）</h5>run_until_complete可以获取协程的返回值，如果没有给定返回值，则像函数一样，默认返回None<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这是一个异步函数(可以认为就是一个协程)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我是test1&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个事件循环</span></span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="comment"># 创建协程（此时test1这个协程中的任务代码并没有真正的开始执行）</span></span><br><span class="line">    t1 = test1()</span><br><span class="line">    <span class="comment"># 进入事件循环</span></span><br><span class="line">    <span class="built_in">print</span>(loop.run_until_complete(t1))</span><br><span class="line">    <span class="comment"># 关闭事件循环</span></span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure><h4 id="并发执行任务"><a href="#并发执行任务" class="headerlink" title="并发执行任务"></a>并发执行任务</h4>并发执行任务，使用asyncio.gather,创建多个协程，当某个协程出现了IO（就是耗时操作），就或asyncio自动切换到其他的协程中执行，从而实现并<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---test1---1&#x27;</span>)</span><br><span class="line">        <span class="comment"># await表示调用协程，sleep 0并不会真的sleep（因为时间为0），却可以把控制权交出去了。</span></span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---test1---2&#x27;</span>)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---test2---1&#x27;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;---test2---2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;test1与test2交替运行，此时就实现了并发）&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># asyncio.gather用来并发运行任务，在这里表示协同的执行test1和test2个协程</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.gather(test1(), test2())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4>Task可以包装协程，可以跟踪协程何时完成。Task是Future（这个类较为底层，我们直接用它的子类Task即可）的子类，每个Task都有一个结果，在它完成之后可以获取这个结果。<br>因为<strong>协程是没有状态</strong>，我们通过使用create_task方法可以将协程包装成有状态的任务。还可以在任务运行的过程中取消任务<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1-开始时间：&quot;</span>, time.time())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----我是test1----&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1-结束时间：&quot;</span>, time.time())</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2-开始时间：&quot;</span>, time.time())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;----我是test2----&quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test2-结束时间：&quot;</span>, time.time())</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line"><span class="comment"># 任务运行的过程中取消任务</span></span><br><span class="line">    task1 = asyncio.create_task(test1())</span><br><span class="line">    task2 = asyncio.create_task(test2())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1结束了吗? &quot;</span>, task1.done())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2结束了吗? &quot;</span>, task2.done())</span><br><span class="line">    tasks = [task1, task2]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task1结束了吗? &quot;</span>, task1.done())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;task2结束了吗? &quot;</span>, task2.done())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    stop_time = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总耗时：&quot;</span>, stop_time - start_time)</span><br></pre></td></tr></table></figure><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5>当特定的事件或条件发生的时候，调用者使用函数返回值作为调用回调函数对事件进行处理<br>Python高阶函数：<a href="https://www.cnblogs.com/littlefivebolg/articles/9094942.html">https://www.cnblogs.com/littlefivebolg/articles/9094942.html</a><br>partial函数：把一个函数的某些参数给固定住，返回一个新的函数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback_after_done</span>(<span class="params">task_obj, num1, num2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    这个函数会在当test任务完成后被自动调用</span></span><br><span class="line"><span class="string">    会自动将完成后的Task对象当做参数进行传递</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---callback_after_done-1-&quot;</span>, task_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---callback_after_done-2-&quot;</span>, task_obj.done())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---callback_after_done-3-&quot;</span>, num1, num2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----test----&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    task = asyncio.create_task(test())</span><br><span class="line">    task.add_done_callback(functools.partial(callback_after_done, num1=<span class="number">100</span>, num2=<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果有多个任务，可以用下面的方式</span></span><br><span class="line">    <span class="comment"># tasks = [task]</span></span><br><span class="line">    <span class="comment"># await asyncio.wait(tasks)</span></span><br><span class="line">    <span class="comment"># 如果只有1个任务，就可以直接用下面的方式</span></span><br><span class="line">    <span class="keyword">await</span> task</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1执行完毕了吗? &quot;</span>, task.done())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test1的返回值是:&quot;</span>, task.result())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h3 id="4-aiohttp"><a href="#4-aiohttp" class="headerlink" title="4.aiohttp"></a>4.aiohttp</h3>aiohttp是一个异步的网络库，可以实现HTTP客户端，也可以实现HTTP服务器<br><strong>requests是同步的库，如果想异步的话需要引入aiohttp</strong><br>官方文档：<a href="https://docs.aiohttp.org/en/stable/client.html#aiohttp-client">https://docs.aiohttp.org/en/stable/client.html#aiohttp-client</a></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiohttp</span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">from aiohttp import ClientSession</span><br><span class="line"></span><br><span class="line">tasks = []</span><br><span class="line">url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line">async def get_baidu(url):</span><br><span class="line">    async with ClientSession() as session:</span><br><span class="line">        async with session.get(url) as response:</span><br><span class="line">            response = await response.text()</span><br><span class="line">            <span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(get_baidu(url))</span><br></pre></td></tr></table></figure><h4 id="并发案例"><a href="#并发案例" class="headerlink" title="并发案例"></a>并发案例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import asyncio</span><br><span class="line">import aiohttp</span><br><span class="line"></span><br><span class="line">def download_completed_callback(task_obj):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;下载的HTML为:&quot;</span>, task_obj.result())</span><br><span class="line"></span><br><span class="line">async def baidu_spider():</span><br><span class="line">    url = <span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">    async with aiohttp.ClientSession() as session:</span><br><span class="line">        async with session.get(url) as r:</span><br><span class="line">            <span class="built_in">return</span> await r.text()</span><br><span class="line"></span><br><span class="line">async def sogou_spider():</span><br><span class="line">    url = <span class="string">&quot;https://www.sogou.com&quot;</span></span><br><span class="line">    async with aiohttp.ClientSession() as session:</span><br><span class="line">        async with session.get(url) as r:</span><br><span class="line">            <span class="built_in">return</span> await r.text()</span><br><span class="line"></span><br><span class="line">async def jingdong_spider():</span><br><span class="line">    url = <span class="string">&quot;https://www.jd.com&quot;</span></span><br><span class="line">    async with aiohttp.ClientSession() as session:</span><br><span class="line">        async with session.get(url) as r:</span><br><span class="line">            <span class="built_in">return</span> await r.text()</span><br><span class="line"></span><br><span class="line">async def main():</span><br><span class="line">    <span class="comment"># 创建多个Task，且添加回调函数</span></span><br><span class="line">    task_baidu = asyncio.create_task(baidu_spider())</span><br><span class="line">    task_baidu.add_done_callback(download_completed_callback)</span><br><span class="line">    task_sogou = asyncio.create_task(sogou_spider())</span><br><span class="line">    task_sogou.add_done_callback(download_completed_callback)</span><br><span class="line">    task_jingdong = asyncio.create_task(jingdong_spider())</span><br><span class="line">    task_jingdong.add_done_callback(download_completed_callback)</span><br><span class="line">    tasks = [task_baidu, task_sogou, task_jingdong]</span><br><span class="line">    <span class="comment"># 等待下载</span></span><br><span class="line">    await asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h2 id="五-反爬"><a href="#五-反爬" class="headerlink" title="五.反爬"></a>五.反爬</h2><h4 id="网站如何识别爬虫"><a href="#网站如何识别爬虫" class="headerlink" title="网站如何识别爬虫"></a>网站如何识别爬虫</h4></li><li>通过请求信息识别<ul><li>Headers<ul><li>UA</li><li>Referer</li></ul></li><li>Cookie<ul><li>登录</li><li>验证码</li></ul></li><li>特定请求参数token，sign等加密参数</li></ul></li><li>基于用户行为识别<ul><li>单位时间客户端的请求频率<ul><li>IP</li><li>UA</li><li>Cookie</li></ul></li><li>鼠标键盘的使用轨迹</li></ul></li><li>频繁更换反爬措施<h3 id="1-Selenium"><a href="#1-Selenium" class="headerlink" title="1.Selenium"></a>1.Selenium</h3>中文网址：<a href="http://www.selenium.org.cn/">http://www.selenium.org.cn/</a><br>网址：<a href="https://selenium-python.readthedocs.io/">https://selenium-python.readthedocs.io/</a><br>很多网站页面的数据是由JavaScript生成的，而不是原始HTML代码，而且还有很多ajax获取的数据，甚至有些数据是加密的，导致，当我们使用普通的requests来处理时，需要分析很多的js代码，此时非常困难，所以我们就用Selenium来解决<h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4></li><li>安装<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure></li><li>驱动<br>ChromeDriver：<a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a><br>GeckoDriver：<a href="https://github.com/mozilla/geckodriver/releases">https://github.com/mozilla/geckodriver/releases</a><br>PhantomJS（基于Webkit的“无界面”(headless)浏览器，很多服务器都对这个无界面的浏览器进行了屏蔽）：<a href="http://phantomjs.org/download.html">http://phantomjs.org/download.html</a><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4></li><li>加载网页<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment"># 获取要操作的浏览器驱动对象（直白点说，这个对象可以控制浏览器）</span></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 加载指定的页面</span></span><br><span class="line">browser.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 截屏</span></span><br><span class="line">browser.save_screenshot(<span class="string">&quot;百度首页.png&quot;</span>)</span><br></pre></td></tr></table></figure></li><li>定位和操作<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 获取指定的元素</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;长城&quot;</span>)</span><br><span class="line"><span class="comment"># 延时，以便看清楚要进行的操作</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 点击 &quot;百度一下&quot;</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br></pre></td></tr></table></figure></li><li>请求信息<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment"># 查看访问的页面的源代码</span></span><br><span class="line"><span class="built_in">print</span>(browser.page_source)</span><br><span class="line"><span class="comment"># 查看cookie</span></span><br><span class="line"><span class="built_in">print</span>(browser.get_cookies())</span><br><span class="line"><span class="comment"># 查看经过处理之后，本页面最后显示的url，如果有302的话，那么就是302之后的url</span></span><br><span class="line"><span class="built_in">print</span>(browser.current_url)</span><br></pre></td></tr></table></figure></li><li>打开新页面<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.get(<span class="string">&quot;https://jd.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></li><li>打开新标签页<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;http://login.taobao.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 打开搜狗</span></span><br><span class="line">js = <span class="string">&quot;window.open(&#x27;http://www.sogou.com&#x27;)&quot;</span></span><br><span class="line">browser.execute_script(js)</span><br></pre></td></tr></table></figure></li><li>切换标签页<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;http://login.taobao.com&quot;</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">js = <span class="string">&quot;window.open(&#x27;http://www.sogou.com&#x27;)&quot;</span></span><br><span class="line">browser.execute_script(js)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 切换到第1个标签页</span></span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>])</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 关闭第2个标签页</span></span><br><span class="line">browser.close()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 切换到第1个标签页</span></span><br><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">0</span>])</span><br><span class="line"><span class="comment"># 关闭第1个标签页</span></span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></li><li>退出<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭当前页面（当浏览器只有1个页面时，此操作会让浏览器退出）</span></span><br><span class="line">browser.close()</span><br><span class="line"><span class="comment"># 让浏览器退出(如果用selenium打开了很多的)</span></span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h4 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h4></li><li>单个节点（返回是一个对象）<br>find_element_by_id<br>find_element_by_name<br>find_element_by_xpath<br>find_element_by_link_text<br>find_element_by_partial_link_text<br>find_element_by_tag_name<br>find_element_by_class_name<br>find_element_by_css_selector</li><li>多个节点（返回是一个列表）<br>find_elements_by_id<br>find_elements_by_name<br>find_elements_by_xpath<br>find_elements_by_link_text<br>find_elements_by_partial_link_text<br>find_elements_by_tag_name<br>find_elements_by_class_name<br>find_elements_by_css_selector<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取单节点</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;http://news.baidu.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位搜索框</span></span><br><span class="line">ret = browser.find_element_by_id(<span class="string">&#x27;ww&#x27;</span>)</span><br><span class="line"><span class="comment"># ret = browser.find_element_by_css_selector(&#x27;#ww&#x27;)  # 查询id为ww</span></span><br><span class="line"><span class="comment"># ret = browser.find_element_by_css_selector(&#x27;.word&#x27;)  # 查询class为word</span></span><br><span class="line"><span class="comment"># ret = browser.find_element_by_xpath(&quot;//input[@class=&#x27;word&#x27;]&quot;)</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取多节点</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;https://movie.douban.com/top250&#x27;</span>)</span><br><span class="line"><span class="comment"># 定位25个电影信息</span></span><br><span class="line">ret = browser.find_elements_by_css_selector(<span class="string">&#x27;.item&#x27;</span>)  <span class="comment"># 查询class为item</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line">ret = browser.find_elements_by_xpath(<span class="string">&quot;//*[@class=&#x27;item&#x27;]&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4></li><li>提取标签内容、属性值<br>获取文本：element.text<br>获取属性值：element.get_attribute(“href”)</li><li>处理cookie<br>browser.get_cookies()能够获取所有的cookie<br>删除一条cookie：browser.delete_cookie(“CookieName”)<br>删除所有的cookie：browser.delete_all_cookies()<br>添加cookie：browser.add_cookie()<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line">cookie_list = browser.get_cookies()</span><br><span class="line"><span class="built_in">print</span>(cookie_list)</span><br><span class="line"><span class="comment"># 整理为requests等需要的字典方式，因为浏览器在发送新请求时 携带的cookie只有name、value</span></span><br><span class="line"><span class="comment"># 所以此时提取的也只有name、value，其他的不需要</span></span><br><span class="line">cookie_dict = &#123;x[<span class="string">&quot;name&quot;</span>]: x[<span class="string">&quot;value&quot;</span>] <span class="keyword">for</span> x <span class="keyword">in</span> cookie_list&#125;</span><br><span class="line"><span class="built_in">print</span>(cookie_dict)</span><br><span class="line">browser.close()</span><br></pre></td></tr></table></figure></li><li>页面前进和后退<br>后退：browser.back()<br>前进：browser.forward()<h3 id="2-字体反爬"><a href="#2-字体反爬" class="headerlink" title="2.字体反爬"></a>2.字体反爬</h3>通过在网站中使用特殊字体来替换文本内容，使得爬虫无法正确解析其中的内容。字体反爬的原理是<strong>将网站中的文本内容转换为特殊的字体格式，然后通过CSS样式来控制字体的显示方式</strong><h4 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h4>Base64是网络上最常见的用于传输8Bit字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法<br>在线编码解码：<a href="https://base64.us/">https://base64.us/</a><h4 id="字体反爬过程"><a href="#字体反爬过程" class="headerlink" title="字体反爬过程"></a>字体反爬过程</h4>URL：<a href="https://sz.58.com/chuzu/">https://sz.58.com/chuzu/</a></li><li>1.查看字体样式</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/15.jpg" alt="字体样式"></p><hr><ul><li>2.style标签中数据</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/16.jpg" alt="Base64"></p><hr><ul><li><ol start="3"><li>将base64编码文件导出为ttf文件<br>百度字体编辑器：<a href="http://fontstore.baidu.com/static/editor/#">http://fontstore.baidu.com/static/editor/#</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">base64</span></span><br><span class="line"></span><br><span class="line">ret = base64.b64decode(<span class="string">&quot;xxxxxxxxxxx&quot;</span>)</span><br><span class="line">with open(<span class="string">&quot;字体.ttf&quot;</span>, <span class="string">&quot;wb&quot;</span>) as f:</span><br><span class="line">    f.write(ret)</span><br></pre></td></tr></table></figure></li></ol></li><li>4.将ttf转换为xml文件<br>安装fontTools模块<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install fontTools</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">font = TTFont(<span class="string">&quot;./字体.ttf&quot;</span>)</span><br><span class="line">font.saveXML(<span class="string">&quot;字体.xml&quot;</span>)</span><br></pre></td></tr></table></figure><strong>xml文件中cmap对应的数据提取出来，然后将数值-1，即可得到真正的数字</strong></li><li>5.解析出数字对应关系表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"></span><br><span class="line">font = TTFont(<span class="string">&quot;./字体.ttf&quot;</span>)</span><br><span class="line">cmap = font.get(<span class="string">&quot;cmap&quot;</span>).getBestCmap()</span><br><span class="line"></span><br><span class="line">ttf_dict = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> cmap.items():</span><br><span class="line">    new_dict_k = <span class="built_in">hex</span>(k)</span><br><span class="line">    new_dict_v = <span class="built_in">int</span>(re.search(<span class="string">r&quot;\d+&quot;</span>, v).group(<span class="number">0</span>))</span><br><span class="line">    ttf_dict[new_dict_k] = new_dict_v</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解析后：&quot;</span>, ttf_dict)</span><br></pre></td></tr></table></figure><h4 id="案例：实习僧"><a href="#案例：实习僧" class="headerlink" title="案例：实习僧"></a>案例：实习僧</h4>URL：<a href="https://www.shixiseng.com/interns?keyword=java&amp;page=1&amp;city=%E5%85%A8%E5%9B%BD&amp;type=intern">https://www.shixiseng.com/interns?keyword=java&amp;page=1&amp;city=%E5%85%A8%E5%9B%BD&amp;type=intern</a></li><li>获取文件</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/17.jpg" alt="字体样式"></p><hr><p>复制上述的地址，在浏览器中打开，此时会下载一个文件名字叫做file<br>编辑工具：FontCreator <a href="http://www.downza.cn/hudsnjkl/257455?module=soft&amp;id=257455&amp;token=dae25a7ec6e3d448176efd7c33b481ae&amp;isxzq=0">http://www.downza.cn/hudsnjkl/257455?module=soft&amp;id=257455&amp;token=dae25a7ec6e3d448176efd7c33b481ae&amp;isxzq=0</a><br>在线工具：<a href="https://font.qqe2.com/">https://font.qqe2.com/</a></p><ul><li>破解字体<br>实习憎返回的HTML页面中有一个连接，这个链接下载的文件名字叫做file，实际就是一个ttf文件，将这个文件转换为xml分析得知，在cmap中code对应的就是HTML中的特殊字符例如&amp;#xf5bb，name对应的是unicode码的值，这个unicode码就是想要的真正的数据<br>在线unicode转换工具：<br><a href="https://www.bejson.com/convert/unicode_chinese/">https://www.bejson.com/convert/unicode_chinese/</a></li><li>代码的实现<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 第1步：获取html，且存为html文件以便后面研究使用</span></span><br><span class="line"><span class="string"># 第2步：下载html配套的ttf文件</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 第3步：提取ttf中的数据</span></span><br><span class="line">font = TTFont(<span class="string">&quot;.\file.ttf&quot;</span>)</span><br><span class="line">cmap = font.get(<span class="string">&quot;cmap&quot;</span>).getBestCmap()</span><br><span class="line">ttf_dict = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> cmap.items():</span><br><span class="line">    <span class="comment"># print(k, v)  # 原样数据</span></span><br><span class="line">    <span class="comment"># print(hex(k), v)  # 转换为十六进制</span></span><br><span class="line">    <span class="keyword">if</span> v[<span class="number">3</span>:]:</span><br><span class="line">        <span class="comment"># 1. 转换为真正的字</span></span><br><span class="line">        content = <span class="string">&quot;\\u00&quot;</span> + v[<span class="number">3</span>:] <span class="keyword">if</span> <span class="built_in">len</span>(v[<span class="number">3</span>:]) == <span class="number">2</span> <span class="keyword">else</span> <span class="string">&quot;\\u&quot;</span> + v[<span class="number">3</span>:]</span><br><span class="line">        real_content = content.encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line">        <span class="comment"># 2. 替换k</span></span><br><span class="line">        k_hex = <span class="built_in">hex</span>(k)</span><br><span class="line">        real_k = k_hex.replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&amp;#x&quot;</span>)</span><br><span class="line">        <span class="comment"># 3. 封装为字典</span></span><br><span class="line">        ttf_dict[real_k] = real_content</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解析后：&quot;</span>, ttf_dict)</span><br></pre></td></tr></table></figure><h3 id="3-js逆向"><a href="#3-js逆向" class="headerlink" title="3.js逆向"></a>3.js逆向</h3><h4 id="案例：百度翻译-sign值提取"><a href="#案例：百度翻译-sign值提取" class="headerlink" title="案例：百度翻译-sign值提取"></a>案例：百度翻译-sign值提取</h4></li><li>URL: <a href="https://fanyi.baidu.com/">https://fanyi.baidu.com</a><h5 id="破解sign"><a href="#破解sign" class="headerlink" title="破解sign"></a>破解sign</h5></li><li>寻找哪里发送翻译请求</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/18.jpg" alt="翻译请求"><br><img src="/image/%E7%88%AC%E8%99%AB/19.jpg" alt="翻译请求"></p><hr><h5 id="sign计算"><a href="#sign计算" class="headerlink" title="sign计算"></a>sign计算</h5><ul><li>sign具体位置，在sign处断点</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/20.jpg" alt="位置"><br><img src="/image/%E7%88%AC%E8%99%AB/21.jpg" alt="位置"></p><hr><h5 id="python执行js"><a href="#python执行js" class="headerlink" title="python执行js"></a>python执行js</h5><ul><li>PyExecJS模块安装，需要JDK<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install PyExecJS -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li>将获取的js存入test.js文件</li><li>执行js代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.js&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js_content = f.read()</span><br><span class="line">    <span class="comment"># python执行js代码</span></span><br><span class="line">    context = execjs.<span class="built_in">compile</span>(js_content)</span><br><span class="line">    <span class="comment"># --------------注意--------------</span></span><br><span class="line">    <span class="comment"># context指向了要执行的js文件，如果想要调用某个函数，可以用下面的call方法</span></span><br><span class="line">    <span class="comment"># 第1个参数，为需要调用的函数名字</span></span><br><span class="line">    <span class="comment"># 第2个参数，为给函数e传递的参数（是否传递要看调用的函数是否需要实参）</span></span><br><span class="line">    ret = context.call(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;l love python&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(ret)</span><br></pre></td></tr></table></figure>执行会报错依次添加变量r，函数n，函数名e的修改</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/22.jpg" alt="js"></p><hr><ul><li>对比sign值是否一样</li><li>变量r（45298.283587）变化<br>requests获取<a href="https://fanyi.baidu.com/">https://fanyi.baidu.com</a><br>从响应的页面中提取这个随机数<br>将这个随机数放到js代码中执行<br>即可得出sign值<h5 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sign</span>(<span class="params">text=<span class="string">&quot;你好&quot;</span></span>):</span><br><span class="line">    url = <span class="string">&quot;https://fanyi.baidu.com&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 整理请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;xxxagent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;xxxcookies&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取请求</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line">    sign_i = re.findall(<span class="string">&quot;;window.gtk = (.*?);&quot;</span>, r.content.decode())[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(sign_i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;test.js&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        js_content = f.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># js中添加一行gtk</span></span><br><span class="line">    js_content = js_content.replace(<span class="string">&#x27;&quot;320305.131321201&quot;&#x27;</span>, sign_i)</span><br><span class="line">    <span class="comment"># print(js_content)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行js</span></span><br><span class="line">    context = execjs.<span class="built_in">compile</span>(js_content)</span><br><span class="line">    sign = context.call(<span class="string">&quot;e&quot;</span>, text)</span><br><span class="line">    <span class="built_in">print</span>(sign)</span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">baidu_translate</span>(<span class="params">text, sign</span>):</span><br><span class="line">    url = <span class="string">&quot;https://fanyi.baidu.com/v2transapi?from=en&amp;to=zh&quot;</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;xxxagent&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;xxxcookies&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;query&quot;</span>: text,</span><br><span class="line">        <span class="string">&quot;from&quot;</span>: <span class="string">&quot;en&quot;</span>,</span><br><span class="line">        <span class="string">&quot;to&quot;</span>: <span class="string">&quot;zh&quot;</span>,</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: <span class="string">&quot;xxxxxxxxxxxxxxxxxx&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sign&quot;</span>: sign</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url=url, data=data, headers=headers)</span><br><span class="line">    <span class="comment"># print(&quot;响应\n\n&quot;, response.content.decode())</span></span><br><span class="line">    ret = json.loads(response.content.decode())</span><br><span class="line">    translate_ret = ret[<span class="string">&quot;trans_result&quot;</span>][<span class="string">&quot;data&quot;</span>][<span class="number">0</span>][<span class="string">&quot;dst&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(translate_ret)</span><br><span class="line">    <span class="keyword">return</span> translate_ret</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 1. 输入要翻译的英文</span></span><br><span class="line">    text = <span class="built_in">input</span>(<span class="string">&quot;请输入要翻译的英文:&quot;</span>)</span><br><span class="line">    <span class="comment"># 2. 计算出sign</span></span><br><span class="line">    sign = get_sign(text)</span><br><span class="line">    <span class="comment"># 3. 发送翻译请求</span></span><br><span class="line">    ret = baidu_translate(text, sign)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;英文:&quot;</span>, text, <span class="string">&quot;翻译为应为：&quot;</span>, ret)</span><br></pre></td></tr></table></figure><h4 id="案例：百度招聘"><a href="#案例：百度招聘" class="headerlink" title="案例：百度招聘"></a>案例：百度招聘</h4>URL：<a href="http://zhaopin.baidu.com/">http://zhaopin.baidu.com/</a><h5 id="破解token"><a href="#破解token" class="headerlink" title="破解token"></a>破解token</h5></li><li>全局搜索token</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/23.jpg" alt="token"></p><hr><ul><li>监控token值，逆序得到token</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/24.jpg" alt="token"></p><hr><ul><li>全局搜索nekot</li></ul><hr><p><img src="/image/%E7%88%AC%E8%99%AB/25.jpg" alt="nekot"></p><hr><p>结论：toekn逆向的正确位置<a href="https://zhaopin.baidu.com/quanzhi?query=%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88&amp;city=%E5%8C%97%E4%BA%AC">https://zhaopin.baidu.com/quanzhi?query=%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88&amp;city=%E5%8C%97%E4%BA%AC</a></p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token_from_js</span>():</span><br><span class="line">    url = <span class="string">&quot;https://zhaopin.baidu.com/quanzhi?query=%E8%BF%90%E7%BB%B4%E5%B7%A5%E7%A8%8B%E5%B8%88&amp;city=%E5%8C%97%E4%BA%AC&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 整理请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;BAIDUID=6E6EFE4CD5BD1B6F422266E7F427E755:FG=1; BIDUPSID=6E6EFE4CD5BD1B6F422266E7F427E755; PSTM=1701613649; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; BAIDUID_BFESS=6E6EFE4CD5BD1B6F422266E7F427E755:FG=1; delPer=0; PSINO=3; BA_HECTOR=ag0hag0k2g8hakag84al25061imqovf1q; ZFY=rUl0ALzpWAhozG4oRl29YfpOqZXrmMqhec17vTya0og:C; Hm_lvt_e3eec7019ba4d61b236c8afa00fd2ca4=1701679831; Hm_lpvt_e3eec7019ba4d61b236c8afa00fd2ca4=1701680362; SECKEY_ABVK=fTAvVB/daOUPIm3i+5BH+tf5QcWsHgRNPqGPSuaRrGE%3D; BMAP_SECKEY=bYnVpXylyf-LggsfIF5yWoCWkAP8uRjdfPFDFMW6wqvPYmREXdTRLhGdH8I-pVvwGal6ej85cyMNJQzOrxEPn_O0Mf6P9ufvfcsbkuOVsx665iLWOADFZ5M6AodHFQ6ca0s4c8zMnhPU49iwCdaFTaVIzFRSq5HNyKCWl8ftNz-z5ehlneLtBCCkKSQuX3Oh; ab_sr=1.0.1_MDI0NTc3YjdkZmM5Nzk2YzUxM2Y4MThlN2YxNGY4Njc1MDM0NWUwNDRmMmQ3MzgzZDYyNTJmZGUxNGJlYjNjYWNmODNlNzk2ZTc5YjVlYmU4MGJkYWZjMDJiNGY1ODhjOTRkZTExMDNjNDkzOTJiZTNhOWE2MDE1NDI2NWMyOGNlZjM5MzQwYzNmZDQyZWVkNGJlNDQxMTA4NThiMzhkYg==&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 获取请求</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># 提取nekot</span></span><br><span class="line">    html = r.content.decode()</span><br><span class="line">    token = re.search(<span class="string">r&#x27;data\[&quot;nekot&quot;\] = &quot;(.*?)&quot;;&#x27;</span>, html).group(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(token)</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token</span>():</span><br><span class="line">    token = get_token_from_js()</span><br><span class="line">    <span class="keyword">return</span> token[::-<span class="number">1</span>]  <span class="comment"># 逆序字符串</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_position</span>(<span class="params">token</span>):</span><br><span class="line">    <span class="comment"># 根据需求修改</span></span><br><span class="line">    url = <span class="string">&quot;http://zhaopin.baidu.com/api/qzasync?query=python&amp;city=北京&amp;is_adq=1&amp;pcmod=1&amp;token=%s&amp;pn=20&amp;rn=20&quot;</span> % token</span><br><span class="line">    <span class="comment"># 整理请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">        <span class="string">&quot;cookie&quot;</span>: <span class="string">&quot;BAIDUID=6E6EFE4CD5BD1B6F422266E7F427E755:FG=1; BIDUPSID=6E6EFE4CD5BD1B6F422266E7F427E755; PSTM=1701613649; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; delPer=0; PSINO=3; BA_HECTOR=ag0hag0k2g8hakag84al25061imqovf1q; Hm_lvt_e3eec7019ba4d61b236c8afa00fd2ca4=1701679831; Hm_lpvt_e3eec7019ba4d61b236c8afa00fd2ca4=1701680756; SECKEY_ABVK=fTAvVB/daOUPIm3i+5BH+qdHwDqK49JpCMFZ+VtvaQ0%3D; BMAP_SECKEY=bYnVpXylyf-LggsfIF5yWnXYeTY3sTFDvqzN2561Yt_16QyRs009ZWunvFqzLDxtiJlBH7oojvUUD9_oIWitPjF1gp54piC89IFUMDGlwGNLIgmX1vyaFZcOtVFz3TcKF_lL29FEtGAbjCanHiik6vQOUNNaDfIz79Oo1ookfMtuyXFtAmIlTaP7ldh0JauK&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 获取请求</span></span><br><span class="line">    r = requests.get(url, headers=headers)</span><br><span class="line">    <span class="comment"># 返回获取到的数据</span></span><br><span class="line">    <span class="keyword">return</span> json.loads(r.content.decode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_info</span>(<span class="params">position_dict</span>):</span><br><span class="line">    position_list = position_dict.get(<span class="string">&quot;data&quot;</span>).get(<span class="string">&quot;disp_data&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> position <span class="keyword">in</span> position_list:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--------------------------&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;岗位名：&quot;</span>, position.get(<span class="string">&quot;@name&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;薪资：&quot;</span>, position.get(<span class="string">&quot;salary&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;公司：&quot;</span>, position.get(<span class="string">&quot;company&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 1. 获取token</span></span><br><span class="line">    token = get_token()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;提取的token为:&quot;</span>, token)</span><br><span class="line">    <span class="comment"># 2. 发送请求获取职位信息</span></span><br><span class="line">    position_dict = get_position(token)</span><br><span class="line">    <span class="comment"># print(&quot;获取的岗位信息是：&quot;, position_dict)</span></span><br><span class="line">    <span class="comment"># 3. 提取数据</span></span><br><span class="line">    get_info(position_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h3 id="4-验证码"><a href="#4-验证码" class="headerlink" title="4.验证码"></a>4.验证码</h3><h4 id="验证码类型"><a href="#验证码类型" class="headerlink" title="验证码类型"></a>验证码类型</h4><p>字符验证码<br>计算型验证码<br>滑动验证码<br>点击验证码<br>视觉验证码</p><h4 id="图片验证码平台"><a href="#图片验证码平台" class="headerlink" title="图片验证码平台"></a>图片验证码平台</h4><p>超级鹰 ：<a href="https://www.chaojiying.com/">https://www.chaojiying.com/</a></p><h4 id="案例：打开蜗牛答题网站并获取cookies"><a href="#案例：打开蜗牛答题网站并获取cookies" class="headerlink" title="案例：打开蜗牛答题网站并获取cookies"></a>案例：打开蜗牛答题网站并获取cookies</h4><ul><li>用到了PIL模块<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install Pillow -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">sys.path.append(os.getcwd() + <span class="string">&quot;/chaojiying_demo&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> chaojiying <span class="keyword">import</span> Chaojiying_Client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用selenium打开谷歌浏览器</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"><span class="comment"># 设置窗口的大小</span></span><br><span class="line">driver.set_window_size(<span class="number">1200</span>, <span class="number">800</span>)</span><br><span class="line"><span class="comment"># 打开一个带有普通验证码的登录页面</span></span><br><span class="line">driver.get(<span class="string">&quot;http://www.woniudati.com/LogonUser.aspx&quot;</span>)</span><br><span class="line"><span class="comment"># 下面解析页面数据</span></span><br><span class="line"><span class="comment"># 输入用户名</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;ctl00_ctl00_ContentPlaceHolder1_Body_U_LoginName&#x27;]&quot;</span>).send_keys(<span class="string">&quot;你的用户名&quot;</span>)</span><br><span class="line"><span class="comment"># 输入密码</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;ctl00_ctl00_ContentPlaceHolder1_Body_U_Password&#x27;]&quot;</span>).send_keys(<span class="string">&quot;你的命名&quot;</span>)</span><br><span class="line"><span class="comment"># 下面截屏整个页面然后单独提取出验证码的部分截屏图片</span></span><br><span class="line"><span class="comment"># 截屏</span></span><br><span class="line">driver.get_screenshot_as_file(<span class="string">&#x27;screenshort.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 提取验证码位置</span></span><br><span class="line">img_element = driver.find_element_by_xpath(<span class="string">&quot;//img[@id=&#x27;code&#x27;]&quot;</span>)</span><br><span class="line"><span class="comment"># 定位位置</span></span><br><span class="line">left = <span class="built_in">int</span>(img_element.location[<span class="string">&#x27;x&#x27;</span>])</span><br><span class="line">top = <span class="built_in">int</span>(img_element.location[<span class="string">&#x27;y&#x27;</span>])</span><br><span class="line">right = <span class="built_in">int</span>(img_element.location[<span class="string">&#x27;x&#x27;</span>] + img_element.size[<span class="string">&#x27;width&#x27;</span>])</span><br><span class="line">bottom = <span class="built_in">int</span>(img_element.location[<span class="string">&#x27;y&#x27;</span>] + img_element.size[<span class="string">&#x27;height&#x27;</span>])</span><br><span class="line"><span class="comment"># 通过Image处理图像</span></span><br><span class="line">im = Image.<span class="built_in">open</span>(<span class="string">&#x27;screenshort.png&#x27;</span>)</span><br><span class="line">im = im.crop((left, top, right, bottom))</span><br><span class="line"><span class="comment"># 保存得到的验证码图片</span></span><br><span class="line">im.save(<span class="string">&#x27;code.png&#x27;</span>)</span><br><span class="line"><span class="comment"># 下面使用打码平台识别出图片验证码然后自动输入</span></span><br><span class="line"><span class="comment"># 使用云打码识别</span></span><br><span class="line">chaojiying = Chaojiying_Client(<span class="string">&#x27;你的用户名&#x27;</span>, <span class="string">&#x27;你的密码&#x27;</span>, <span class="string">&#x27;你的id&#x27;</span>)  <span class="comment"># 用户中心&gt;&gt;软件ID 生成一个替换 96001</span></span><br><span class="line">im = <span class="built_in">open</span>(<span class="string">&#x27;code.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()  <span class="comment"># 本地图片文件路径 来替换 a.jpg 有时WIN系统须要//</span></span><br><span class="line">ret = chaojiying.PostPic(im, <span class="number">1902</span>)  <span class="comment"># 1902 验证码类型  官方网站&gt;&gt;价格体系 3.4+版 print 后要加()</span></span><br><span class="line"><span class="built_in">print</span>(ret)</span><br><span class="line"><span class="comment"># 输入验证码</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;ctl00_ctl00_ContentPlaceHolder1_Body_VerifyCodeControl_verifycode&#x27;]&quot;</span>).send_keys(ret.get(<span class="string">&quot;pic_str&quot;</span>))</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"><span class="comment"># 点击登录</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">&quot;//a[@class=&#x27;buttom2&#x27;]&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"><span class="comment"># 提取出登录之后的cookie</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提取到的cookie是:&quot;</span>, driver.get_cookies())</span><br><span class="line"><span class="comment"># 退出谷歌浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h3 id="5-Pyppeteer"><a href="#5-Pyppeteer" class="headerlink" title="5.Pyppeteer"></a>5.Pyppeteer</h3>官方网址：<a href="https://miyakogi.github.io/pyppeteer/">https://miyakogi.github.io/pyppeteer/</a><br>Pyppeteer源码网址：<a href="https://github.com/miyakogi/pyppeteer">https://github.com/miyakogi/pyppeteer</a></li><li>两大特点：chromium浏览器和asyncio框架<h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4>chromium浏览器，只需要一条pyppeteer-install命令就会自动下载对应的最新版本chromium浏览器到pyppeteer的默认位置。如果不运行pyppeteer-install命令，在第一次使用pyppeteer的时候也会自动下载并安装chromium浏览器，效果是一样的。总的来说，pyppeteer比起selenium省去了driver配置的环节。<br>浏览器安装失败：<a href="https://blog.csdn.net/qq_41688659/article/details/133769663">https://blog.csdn.net/qq_41688659/article/details/133769663</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyppeteer -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><h4 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h4><h5 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    browser = <span class="keyword">await</span> launch()</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> page.screenshot(&#123;<span class="string">&#x27;path&#x27;</span>: <span class="string">&#x27;百度.png&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h5 id="打开界面"><a href="#打开界面" class="headerlink" title="打开界面"></a>打开界面</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    browser = <span class="keyword">await</span> launch(&#123;<span class="string">&quot;headless&quot;</span>:<span class="literal">False</span>&#125;)</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h5 id="取消上方自动测试软件控制"><a href="#取消上方自动测试软件控制" class="headerlink" title="取消上方自动测试软件控制"></a>取消上方自动测试软件控制</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> pyppeteer <span class="keyword">import</span> launch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要设置显示内容的宽度、高度</span></span><br><span class="line">width, height = <span class="number">1366</span>, <span class="number">768</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    browser = <span class="keyword">await</span> launch(headless=<span class="literal">False</span>,args=[<span class="string">&#x27;--disable-infobars&#x27;</span>,<span class="string">f&#x27;--window-size=<span class="subst">&#123;width&#125;</span>,<span class="subst">&#123;height&#125;</span>&#x27;</span>])</span><br><span class="line">    page = <span class="keyword">await</span> browser.newPage()</span><br><span class="line">    <span class="comment"># 爬取网站</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">&#x27;https://www.taobao.com&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置大小</span></span><br><span class="line">    <span class="keyword">await</span> page.setViewport(&#123;<span class="string">&#x27;width&#x27;</span>: width, <span class="string">&#x27;height&#x27;</span>: height&#125;)</span><br><span class="line">    <span class="comment"># 一些网站主要通过 window.navigator.webdriver 来对 webdriver 进行检测，所以我们只需要使用 JavaScript 将它设置为 false 即可</span></span><br><span class="line">    <span class="keyword">await</span> page.evaluate(<span class="string">&#x27;&#x27;&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;&#x27;&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">await</span> browser.close()</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main())</span><br></pre></td></tr></table></figure><h2 id="六-抓包工具"><a href="#六-抓包工具" class="headerlink" title="六.抓包工具"></a>六.抓包工具</h2><h3 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h3>下载地址：<a href="https://www.charlesproxy.com/download/">https://www.charlesproxy.com/download/</a><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registered Name:     https://zhile.io</span><br><span class="line">License Key:         48891cf209c6d32bf4</span><br></pre></td></tr></table></figure></li><li>设置<br><img src="/image/%E7%88%AC%E8%99%AB/26.jpg" alt="Windows Proxy"><br><img src="/image/%E7%88%AC%E8%99%AB/27.jpg" alt="SSL"><h3 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h3>官方网址：<a href="https://www.telerik.com/fiddler">https://www.telerik.com/fiddler</a><h2 id="七-Scrapy"><a href="#七-Scrapy" class="headerlink" title="七.Scrapy"></a>七.Scrapy</h2>Scrapy是一个为了爬取网站数据，提取结构性数据而编写的应用框架，我们只需要实现少量的代码，就能够快速的抓取。<br>V2.3 中文版：<a href="https://www.osgeo.cn/scrapy/intro/install.html">https://www.osgeo.cn/scrapy/intro/install.html</a><br>最新版（英文）：<a href="https://docs.scrapy.org/en/latest/index.html">https://docs.scrapy.org/en/latest/index.html</a></li><li>异步和非阻塞<br>异步：调用在发出之后，这个调用就直接返回，不管有无结果；异步是过程。<br>非阻塞：关注的是程序在等待调用结果（消息，返回值）时的状态，指在不能立刻得到结果之前，该调用不会阻塞当前线程。<br><img src="/image/%E7%88%AC%E8%99%AB/28.jpg" alt="SSL"><h3 id="1-Scrapy的工作流程"><a href="#1-Scrapy的工作流程" class="headerlink" title="1.Scrapy的工作流程"></a>1.Scrapy的工作流程</h3><img src="/image/%E7%88%AC%E8%99%AB/29.jpg" alt="普通爬虫"><br><img src="/image/%E7%88%AC%E8%99%AB/30.jpg" alt="Scrapy"><br>1.爬虫中起始的url构造成request对象–&gt;爬虫中间件–&gt;引擎–&gt;调度器<br>2.调度器把request–&gt;引擎–&gt;下载中间件—&gt;下载器<br>3.下载器发送请求，获取response响应—-&gt;下载中间件—-&gt;引擎—&gt;爬虫中间件—&gt;爬虫<br>4.爬虫提取url地址，组装成request对象—-&gt;爬虫中间件—&gt;引擎—&gt;调度器，重复步骤2<br>5.爬虫提取数据—&gt;引擎—&gt;管道处理和保存数据<h3 id="2-安装Scrapy"><a href="#2-安装Scrapy" class="headerlink" title="2.安装Scrapy"></a>2.安装Scrapy</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><h3 id="3-使用流程"><a href="#3-使用流程" class="headerlink" title="3.使用流程"></a>3.使用流程</h3>创建一个Scrapy项目:scrapy startproject 项目名字<br>进入到刚刚创建的mySpider文件夹: cd 项目名字<br>生成一个爬虫:scrapy genspider 爬虫名 允许爬取的域名<br>运行爬虫:scrapy crawl 爬虫名<br>提取数据:完善spider，使用xpath等方法<br>保存数据:pipeline中保存数据<h3 id="4-提取爬到的数据"><a href="#4-提取爬到的数据" class="headerlink" title="4.提取爬到的数据"></a>4.提取爬到的数据</h3><h4 id="parse函数"><a href="#parse函数" class="headerlink" title="parse函数"></a>parse函数</h4><img src="/image/%E7%88%AC%E8%99%AB/31.jpg" alt="parse"><h4 id="response常用属性"><a href="#response常用属性" class="headerlink" title="response常用属性"></a>response常用属性</h4>response.url：当前响应的url地址<br>response.request.url：当前响应对应的请求的url地址<br>response.headers：响应头<br>response.request.headers：当前响应的请求头<br>response.body：响应体，也就是html代码，byte类型<br>response.status：响应状态码<h4 id="爬取蜻蜓FM排行榜"><a href="#爬取蜻蜓FM排行榜" class="headerlink" title="爬取蜻蜓FM排行榜"></a>爬取蜻蜓FM排行榜</h4></li><li>创建爬虫<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider qingting qingting.fm</span><br></pre></td></tr></table></figure></li><li>代码<br><img src="/image/%E7%88%AC%E8%99%AB/32.jpg" alt="FM"><br><strong>response.xpath方法的返回结果是一个类似list的类型，其中包含的是selector对象，操作和列表一样，但是有一些额外的方法<br>额外方法extract()：返回一个包含有字符串的列表<br>额外方法extract_first()：返回列表中的第一个字符串，列表为空没有返回None</strong><br><img src="/image/%E7%88%AC%E8%99%AB/33.jpg" alt="FM"><h3 id="5-管道"><a href="#5-管道" class="headerlink" title="5.管道"></a>5.管道</h3>目的：对parse函数中提取到的数据进一步处理的操作，例如保存到csv、MongoDB等</li><li>用yield返回数据<br><strong>为什么要使用yield</strong><br>让整个函数变成一个生成器<br>遍历这个函数的返回值的时候，挨个把数据读到内存，不会造成内存的瞬间占用过高<br>Scrapy是异步爬取，所以通过yield能够将运行权限教给其他的协程任务去执行，这样整个程序运行效果会更高<br><img src="/image/%E7%88%AC%E8%99%AB/34.jpg" alt="yield"></li><li>pipelines.py文件 用于对文件进行处理</li><li>在settings.py设置开启管道<br><img src="/image/%E7%88%AC%E8%99%AB/35.jpg" alt="开启管道"><h3 id="6-多次数据的下载"><a href="#6-多次数据的下载" class="headerlink" title="6.多次数据的下载"></a>6.多次数据的下载</h3></li><li>在parse中生成新的request请求对象<br><img src="/image/%E7%88%AC%E8%99%AB/36.jpg" alt="新的request"></li><li>保存img图片<br>parse_img函数中yield图片<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse_img</span>(<span class="params">self, response, img_name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----parse_img函数-1--&gt;&quot;</span>, response)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----parse_img函数-2--&gt;&quot;</span>, response.url)</span><br><span class="line">    <span class="comment"># print(&quot;-----parse_img函数-3--&gt;&quot;, response.body)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----parse_img函数-4--&gt;&quot;</span>, img_name)  <span class="comment"># 这是在parse函数中创建Request请求时设定的给新URL回调函数的参数</span></span><br><span class="line">    <span class="keyword">yield</span> &#123;</span><br><span class="line">        <span class="string">&quot;img_name&quot;</span>: img_name + <span class="string">&quot;.png&quot;</span>,</span><br><span class="line">        <span class="string">&quot;img_byte&quot;</span>: response.body</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>管道中保存图片<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> itemadapter <span class="keyword">import</span> ItemAdapter</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FmPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="comment"># 将图片保存</span></span><br><span class="line">        img_name = item.get(<span class="string">&quot;img_name&quot;</span>)</span><br><span class="line">        img_byte = item.get(<span class="string">&quot;img_byte&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> img_name:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(img_name, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(img_byte)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;保存图片%s完成....ok&quot;</span> % img_name)</span><br></pre></td></tr></table></figure>设置日志的最低级别<br><img src="/image/%E7%88%AC%E8%99%AB/37.jpg" alt="级别"><h3 id="7-中间件"><a href="#7-中间件" class="headerlink" title="7.中间件"></a>7.中间件</h3><strong>两种中间件都在middlewares.py一个文件中</strong></li><li>分类<br>下载中间件，爬虫中间件</li><li>作用<br>预处理request和response对象<br><strong>process_request(self, request, spider)</strong><br>当每个request通过下载中间件时，该方法被调用<br>返回None值：没有return也是返回None，该request对象传递给下载器，或通过引擎传递给其他权重低的process_request方法<br>返回Response对象：不再请求，把response返回给引擎<br>返回Request对象：把request对象通过引擎交给调度器，此时将不通过其他权重低的process_request方法<br><strong>process_response(self, request, response, spider)</strong><br>当下载器完成http请求，传递响应给引擎的时候调用<br>返回Resposne：通过引擎交给爬虫处理或交给权重更低的其他下载中间件的process_response方法<br>返回Request对象：通过引擎交给调取器继续请求，此时将不通过其他权重低的process_request方法<br><strong>在settings.py中配置开启中间件，权重值越小越优先执行</strong><h4 id="案例：爬取豆瓣TOP250"><a href="#案例：爬取豆瓣TOP250" class="headerlink" title="案例：爬取豆瓣TOP250"></a>案例：爬取豆瓣TOP250</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Top250Spider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&quot;top250&quot;</span></span><br><span class="line">    allowed_domains = [<span class="string">&quot;douban.com&quot;</span>,<span class="string">&quot;doubanio.com&quot;</span>] <span class="comment"># 无doubanio.com则会报错</span></span><br><span class="line">    start_urls = [<span class="string">&quot;https://movie.douban.com/top250?start=0&amp;filter=&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="comment"># 对start_urls中的URL对应响应进行处理</span></span><br><span class="line">        li_list = response.xpath(<span class="string">&quot;.//ol[@class=&#x27;grid_view&#x27;]/li&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> li_temp <span class="keyword">in</span> li_list:</span><br><span class="line">            img_src = li_temp.xpath(<span class="string">&quot;.//img/@src&quot;</span>).extract_first()</span><br><span class="line">            title = li_temp.xpath(<span class="string">&quot;.//span[@class=&#x27;title&#x27;][1]/text()&quot;</span>).extract_first()</span><br><span class="line">            rating_num = li_temp.xpath(<span class="string">&quot;.//span[@class=&#x27;rating_num&#x27;]/text()&quot;</span>).extract_first()</span><br><span class="line">            people_num = li_temp.xpath(<span class="string">&quot;.//div[@class=&#x27;star&#x27;]/span[4]/text()&quot;</span>).extract_first()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;--------&gt;&quot;</span>,img_src,title,rating_num,people_num)</span><br><span class="line">            <span class="comment"># 生成信息，传递给管道，让其保存</span></span><br><span class="line">            <span class="keyword">yield</span> &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;info&quot;</span>,</span><br><span class="line">                <span class="string">&quot;img_src&quot;</span>: img_src,</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: title,</span><br><span class="line">                <span class="string">&quot;rating_num&quot;</span>: rating_num,</span><br><span class="line">                <span class="string">&quot;people_num&quot;</span>: people_num</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 生成新的request对象实现下载图片</span></span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=img_src,callback=self.parse_img,cb_kwargs=&#123;<span class="string">&quot;img_name&quot;</span>: title&#125;)</span><br><span class="line">        <span class="comment"># 生成下一页地址URL</span></span><br><span class="line">        self.page += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> self.page &lt;= <span class="number">10</span>:</span><br><span class="line">            next_page_url = <span class="string">&quot;https://movie.douban.com/top250?start=%d&amp;filter=&quot;</span> % ((self.page-<span class="number">1</span>) * <span class="number">25</span>)</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(url=next_page_url,callback=self.parse)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_img</span>(<span class="params">self,reponse,img_name</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----------image-----------&quot;</span>)</span><br><span class="line">        <span class="keyword">yield</span> &#123;</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;img&quot;</span>,</span><br><span class="line">            <span class="string">&quot;img_name&quot;</span>: img_name + <span class="string">&quot;.jpg&quot;</span>,</span><br><span class="line">            <span class="string">&quot;img_bytes&quot;</span>: reponse.body</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><strong>pipelines.py</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DoubanPipeline</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_item</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        <span class="comment"># 判断文件是否存在download文件夹，没有则创建</span></span><br><span class="line">        download_path = os.getcwd() + <span class="string">&#x27;/download&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(download_path):</span><br><span class="line">            os.mkdir(download_path)</span><br><span class="line">        msg_type = item.get(<span class="string">&quot;type&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> msg_type == <span class="string">&quot;info&quot;</span>:</span><br><span class="line">            <span class="comment"># 保存CSV文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(download_path + <span class="string">&quot;TOP250.csv&quot;</span>,<span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f_csv = csv.DictWriter(f,[<span class="string">&#x27;title&#x27;</span>,<span class="string">&#x27;img_src&#x27;</span>,<span class="string">&#x27;rating_num&#x27;</span>,<span class="string">&#x27;people_num&#x27;</span>])</span><br><span class="line">                item.pop(<span class="string">&quot;type&quot;</span>)</span><br><span class="line">                f_csv.writerows([item])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;保存信息到CSV。。。OK&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> msg_type == <span class="string">&quot;img&quot;</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(download_path + item.get(<span class="string">&quot;img_name&quot;</span>),<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(item.get(<span class="string">&quot;img_bytes&quot;</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;保存图片OK&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure></li><li>middlewares.py<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求头类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserAgentMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    USER_AGENTS_LIST = [</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 2.0.50727; Media Center PC 6.0)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; .NET CLR 1.0.3705; .NET CLR 1.1.4322)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.2; .NET CLR 1.1.4322; .NET CLR 2.0.50727; InfoPath.2; .NET CLR 3.0.04506.30)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN) AppleWebKit/523.15 (KHTML, like Gecko, Safari/419.3) Arora/0.3 (Change: 287 c9dfb30)&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; U; Linux; en-US) AppleWebKit/527+ (KHTML, like Gecko, Safari/419.3) Arora/0.6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.2pre) Gecko/20070215 K-Ninja/2.1.1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9) Gecko/20080705 Firefox/3.0 Kapiko/3.0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Mozilla/5.0 (X11; Linux i686; U;) Gecko/20070322 Kazehakase/0.4.5&quot;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;------下载中间件----&quot;</span>)</span><br><span class="line">        <span class="comment"># 随机挑选一个</span></span><br><span class="line">        user_agent = random.choice(self.USER_AGENTS_LIST)</span><br><span class="line">        request.headers[<span class="string">&#x27;User-Agent&#x27;</span>] = user_agent</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="comment"># 代理类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProxyMiddleware</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">self, request, spider</span>):</span><br><span class="line">        <span class="comment"># proxies可以在settings.py中，也可以来源于代理ip的webapi</span></span><br><span class="line">        <span class="comment"># proxy = random.choice(proxies)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 免费的会失效，报 111 connection refused 信息！重找一个代理ip再试</span></span><br><span class="line">        request.meta[<span class="string">&#x27;proxy&#x27;</span>] = <span class="string">&#x27;https://1.71.188.37:3128&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 可以不写return</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-----下载中间件-reponse----&quot;</span>, response.status)</span><br><span class="line">        <span class="keyword">if</span> response.status != <span class="number">200</span>:</span><br><span class="line">            request.dont_filter = <span class="literal">True</span>  <span class="comment"># 重新发送的请求对象能够再次进入队列</span></span><br><span class="line">            <span class="keyword">return</span> request</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure></li><li>settings.py<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">LOG_LEVEL = <span class="string">&quot;WARNING&quot;</span> <span class="comment"># 设置报错日志级别</span></span><br><span class="line">HTTPPERROR_ALLOWED_COODES = [<span class="number">403</span>] <span class="comment"># 允许403状态码</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span> <span class="comment"># 不遵循协议</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">3</span> <span class="comment"># 第一次和第二次间隔3秒</span></span><br><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">    <span class="string">&quot;douban.middlewares.UserAgentMiddleware&quot;</span>: <span class="number">400</span>, <span class="comment"># 数字越小权重越大，先执行</span></span><br><span class="line">    <span class="string">&quot;douban.middlewares.DoubanDownloaderMiddleware&quot;</span>: <span class="number">543</span>,</span><br><span class="line">&#125;</span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&quot;douban.pipelines.DoubanPipeline&quot;</span>: <span class="number">300</span>, <span class="comment"># 开启管道</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-管道的使用"><a href="#8-管道的使用" class="headerlink" title="8.管道的使用"></a>8.管道的使用</h3><h4 id="自定义管道（pipeline"><a href="#自定义管道（pipeline" class="headerlink" title="自定义管道（pipeline)"></a>自定义管道（pipeline)</h4></li><li>process_item(self,item,spider):<br>管道类中必须有的函数<br>实现对item数据的处理<br>一般情况下都会return item，如果没有return，那么相当于将None传递给权重低的process_item</li><li>open_spider(self, spider):<br>在爬虫开启的时候仅执行一次<br>在这里可以连接数据库、打开文件等</li><li>close_spider(self, spider):<br>在爬虫关闭的时候仅执行一次<br>在这里可以关闭数据库，关闭文件等</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一-基础部分&quot;&gt;&lt;a href=&quot;#一-基础部分&quot; class=&quot;headerlink&quot; title=&quot;一.基础部分&quot;&gt;&lt;/a&gt;一.基础部分&lt;/h2&gt;&lt;h3 id=&quot;1-爬虫概念&quot;&gt;&lt;a href=&quot;#1-爬虫概念&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="python" scheme="http://xczf.shop/cate%EF%BC%9Agories/python/"/>
    
    
    <category term="python" scheme="http://xczf.shop/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>C函数</title>
    <link href="http://xczf.shop/2021/06/15/%E5%87%BD%E6%95%B0/"/>
    <id>http://xczf.shop/2021/06/15/%E5%87%BD%E6%95%B0/</id>
    <published>2021-06-15T11:00:41.000Z</published>
    <updated>2023-10-31T06:13:08.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>数据类型 函数名 （数据类型 形参名,数据类型 形参名,….）</p><p>void代表为空</p><p>返回值查看方法<br>echo $?<br><strong>如果没有返回值函数，则会输出有效的字符个数，hello!\n，返回就为7<br>返回状态是给父进程看的</strong></p><p><strong>如果被调函数写在主函数下方，需要在主函数上面声明一下</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span> <span class="comment">// char *argv[]数组指针的起始位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;argc = %d\n&quot;</span>,argc); <span class="comment">// argc = 1 这里跟./后的数据有关</span></span><br><span class="line"><span class="comment">// shell会解析通配符 ./main /etc/a*.conf会显示4而不是2</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; argc;i++) <span class="comment">// ./输入值</span></span><br><span class="line"><span class="comment">// for(i = 0;argv[i] != NULL;i++) </span></span><br><span class="line"><span class="built_in">puts</span>(argv[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数的传参"><a href="#函数的传参" class="headerlink" title="函数的传参"></a>函数的传参</h3><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">print_value</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span> <span class="comment">// 这里ab可以换成ij，这里代表形参</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">3</span>,j = <span class="number">5</span>;</span><br><span class="line">print_value(i,j); <span class="comment">// 这里代表实参</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// exit(0)更好</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="地址传递"><a href="#地址传递" class="headerlink" title="地址传递"></a>地址传递</h4><p>改变其它函数里的值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">swap(<span class="type">int</span> i,<span class="type">int</span> j) <span class="comment">// 这里交换的只是形参，实参在main函数中根本没有改变</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line"></span><br><span class="line">tmp = i;</span><br><span class="line">i = j;</span><br><span class="line">j = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(0)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> *q)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = *p;</span><br><span class="line">*p = *q;</span><br><span class="line">*q = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">3</span>,j = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">swap(i,j); <span class="comment">// true swap(&amp;i,&amp;j);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\nj = %d\n&quot;</span>,i,j);  <span class="comment">// i = 3,j = 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><h4 id="嵌套调用"><a href="#嵌套调用" class="headerlink" title="嵌套调用"></a>嵌套调用</h4><p>最小数与最大数的差</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = a &gt; b ? a : b;</span><br><span class="line"><span class="keyword">return</span> tmp &gt; c ? tmp : c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">min</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> tmp;</span><br><span class="line">tmp = a &lt; b ? a : b;</span><br><span class="line"><span class="keyword">return</span> tmp &lt; c ? tmp : c;</span><br><span class="line">&#125;</span><br><span class="line">dist(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> max(a,b,c)-min(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>,b = <span class="number">5</span>,c = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line">res = dist(a,b,c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;res = %d\n&quot;</span>,res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>一个函数直接或间接调用自己<br>注意压栈会造成栈的破裂 实际生产中慎用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">a</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]begin!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]call b()!\n&quot;</span>,__FUNCYION__);</span><br><span class="line">b();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]b() returned!!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]end!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">b</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]begin!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]call c()!\n&quot;</span>,__FUNCYION__);</span><br><span class="line">c();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]c() returned!!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]end!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">c</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]begin!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]end!\n&quot;</span>,__FUNCYION__);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]begin!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]call a()!\n&quot;</span>,__FUNCYION__);</span><br><span class="line">a();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]a() returned!!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[%s]end!\n&quot;</span>,__FUNCYION__);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="阶乘"><a href="#阶乘" class="headerlink" title="阶乘"></a>阶乘</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 非正常返回</span></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 异常退出，正常返回</span></span><br><span class="line">    <span class="keyword">return</span> n * func(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> res;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    res = func(n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d! = %d\n&quot;</span>,n,res);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// n = (n-1)+(n-2)</span></span><br><span class="line"><span class="comment">// n-1 = (n-1-1)+(n-1-2);</span></span><br><span class="line"><span class="comment">// n-2 = (n-2-1)+(n-2-2);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> fib(n<span class="number">-1</span>) + fib(n<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">res = fib(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;fib[%d] = %d\n&quot;</span>,n,res);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数与数组"><a href="#函数与数组" class="headerlink" title="函数与数组"></a>函数与数组</h3><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><p><strong>注意传给形参的时候一定要传相应的大小，负责函数无法判定</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int a[N] = &#123;1,2,3,4,5,6&#125;;</span></span><br><span class="line"><span class="comment">int *p;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">传参：a       *a    a[0]    &amp;a[3]    p[i]    p     *p     p+1</span></span><br><span class="line"><span class="comment">接收：int *   int   int     int *    int     int * int    int *</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> n)</span> <span class="comment">// int *p传的数组起始位置</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>,__FUNCTION__,<span class="keyword">sizeof</span>(p)); <span class="comment">// 指针大小，不可能知道a的大小</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(p+i); <span class="comment">// p[i] = *(p+i)</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line"><span class="type">void</span> print_arr(<span class="type">int</span> p[],<span class="type">int</span> n) <span class="comment">// int p[]在定义形参时，代表的是一个指针</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>,__FUNCTION__,<span class="keyword">sizeof</span>(p)); <span class="comment">// 指针大小8</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,*(p+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s:%d\n&quot;</span>,__FUNCTION__,<span class="keyword">sizeof</span>(a)); <span class="comment">// int * 5 = 20  20为结果值</span></span><br><span class="line">print_arr(a,<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a));  <span class="comment">// 数组的开始地址和数组的大小</span></span><br><span class="line">    <span class="comment">// 实现的功能是for循环打印数组</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(i = 0;i &lt; sizeof(a)/sizeof(*a);i++)</span></span><br><span class="line"><span class="comment">    printf(&quot;%d&quot;,a[i]);</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="数组逆序"><a href="#数组逆序" class="headerlink" title="数组逆序"></a>数组逆序</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> n)</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j,m,tmp;</span><br><span class="line">m = (n<span class="number">-1</span>)/<span class="number">2</span>;  <span class="comment">// m代表中间的值</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt;= m;i++)</span><br><span class="line">&#123;</span><br><span class="line">j = n<span class="number">-1</span>-i;</span><br><span class="line">tmp = p[i];</span><br><span class="line">p[i] = p[j];</span><br><span class="line">p[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> **argv)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a);i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">func(a,<span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a)); <span class="comment">// 逆序</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a);i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> M 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 4</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> n)</span> <span class="comment">// 用*a把二维数组当成一个大一维数组</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,p[i]);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_arr1</span><span class="params">(<span class="type">int</span> (*p)[N],<span class="type">int</span> m,<span class="type">int</span> n)</span> <span class="comment">//区分行列，第一个行的大小</span></span><br><span class="line"><span class="comment">// void print_arr1(int p[][N],int m,int n)     // 很详细</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(p) = %d&quot;</span>,<span class="keyword">sizeof</span>(p));  <span class="comment">// 8</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;4d &quot;</span>,*(*(p+i)+j));</span><br><span class="line">        <span class="comment">// printf(&quot;4d &quot;,p[i][j]);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">average_score</span><span class="params">(<span class="type">int</span> *p,<span class="type">int</span> n)</span>  <span class="comment">// 不用很严格的区分行列</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">        sum += p[i];</span><br><span class="line">    <span class="keyword">return</span> sum/n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">find_num</span><span class="params">(<span class="type">int</span> (*p)[N],<span class="type">int</span> num)</span> <span class="comment">// 查找对应行的值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;&amp;d &quot;</span>,*(*(p + num)+i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">int</span> a[M][N] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line">    </span><br><span class="line">print_arr(a[<span class="number">0</span>][<span class="number">0</span>],M*N); <span class="comment">//*a = a[0] = *(a+0) = a[0][0]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*二维数组的打印</span></span><br><span class="line"><span class="comment">    for(i = 0;i &lt; M;i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    for(j = 0;j &lt; N;j++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">    printf(&quot;%d &quot;,a[i][j])</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(a) = %d\n&quot;</span>,<span class="keyword">sizeof</span>(a));  <span class="comment">// 4 * 12 = 48</span></span><br><span class="line">    print_arr1(a,M,N);</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> ave;</span><br><span class="line">    ave = average_score(*a,M*N); <span class="comment">// 平均值函数</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ave = %f\n&quot;</span>,ave);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> num = <span class="number">1</span>;</span><br><span class="line">    find_num(a,num);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">int a[M][N] = &#123;...&#125;</span></span><br><span class="line"><span class="comment">int *p = *a;</span></span><br><span class="line"><span class="comment">int (*q)[N] = a;</span></span><br><span class="line"><span class="comment">**************************************************************</span></span><br><span class="line"><span class="comment">a[i][j] = int</span></span><br><span class="line"><span class="comment">*(a+i)+j = int *</span></span><br><span class="line"><span class="comment">a[i]+j = int *</span></span><br><span class="line"><span class="comment">p[i] = int</span></span><br><span class="line"><span class="comment">*p = int</span></span><br><span class="line"><span class="comment">q[i][j] = int</span></span><br><span class="line"><span class="comment">*q = int *</span></span><br><span class="line"><span class="comment">q = int(*)[N]</span></span><br><span class="line"><span class="comment">p+3 = int *</span></span><br><span class="line"><span class="comment">q+2 = int(*)[N]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="comment">// 字符数组拷贝</span></span><br><span class="line"><span class="type">char</span> *<span class="title function_">mystrcpy</span><span class="params">(<span class="type">char</span> *dest,<span class="type">const</span> <span class="type">char</span> *src)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *ret = dest;</span><br><span class="line"><span class="keyword">if</span>(dest != <span class="literal">NULL</span> &amp;&amp; src != <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">while</span>((*dest++ = *src++) != <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mystrncpy(<span class="type">char</span> *dest,<span class="type">const</span> <span class="type">char</span> *src,<span class="type">size_t</span> n)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n &amp;&amp; (*dest[i] = *src[i]);i++);</span><br><span class="line"><span class="keyword">for</span>(;i &lt; n;i++)</span><br><span class="line">dest[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str1[] = <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="type">char</span> str2[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">mystrcpy(str2,str1);</span><br><span class="line">mystrncpy(str2,str1,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">puts</span>(str2);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数与指针"><a href="#函数与指针" class="headerlink" title="函数与指针"></a>函数与指针</h3><h4 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h4><p>返回值 * 函数名（形参）<br>int * fun(int);<br>返回是指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">find_num(a,num);</span><br><span class="line"><span class="type">int</span> * <span class="title function_">find_num</span><span class="params">(<span class="type">int</span> (*p)[N],<span class="type">int</span> num)</span> <span class="comment">// int (*)[N] find_num(int (*p)[N],int num)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(num &gt; M<span class="number">-1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;    <span class="comment">//非法返回空指针</span></span><br><span class="line"><span class="keyword">return</span> *(p + num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j,num = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> *res;</span><br><span class="line"><span class="type">int</span> a[M][N] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line">res = find_num(a,num);</span><br><span class="line"><span class="keyword">if</span>(res != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; N；i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,res[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Can not find!\n&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h4><p>类型 （ * 指针名）（形参）<br>int ( * p) (int)<br>返回的是值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加法</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>,b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="type">int</span> (*p)(<span class="type">int</span>,<span class="type">int</span>); <span class="comment">// 指针指向函数</span></span><br><span class="line">p = add;</span><br><span class="line"><span class="comment">// ret = add(a,b); // 不使用指针函数的方法</span></span><br><span class="line">ret = p(a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数指针数组"><a href="#函数指针数组" class="headerlink" title="函数指针数组"></a>函数指针数组</h4><p>类型 （ *  数组名 [下标]）(形参)<br>int ( * arr[N]) (int)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> a = <span class="number">3</span>,b = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"><span class="type">int</span> (*funcp[<span class="number">2</span>])(<span class="type">int</span>,<span class="type">int</span>); <span class="comment">//  函数指针数组</span></span><br><span class="line">funcp[<span class="number">0</span>] = add;</span><br><span class="line">funcp[i] = sub;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">ret = funcp[i](a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ret);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指向指针函数的函数指针数组"><a href="#指向指针函数的函数指针数组" class="headerlink" title="指向指针函数的函数指针数组"></a>指向指针函数的函数指针数组</h4><p>int * ( * funcp[N])(int)<br>后续 进进阶版 请看 回调函数与数据结构</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数的定义&quot;&gt;&lt;a href=&quot;#函数的定义&quot; class=&quot;headerlink&quot; title=&quot;函数的定义&quot;&gt;&lt;/a&gt;函数的定</summary>
      
    
    
    
    <category term="C" scheme="http://xczf.shop/cate%EF%BC%9Agories/C/"/>
    
    
    <category term="C" scheme="http://xczf.shop/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>指针(懵)</title>
    <link href="http://xczf.shop/2021/06/15/%E6%8C%87%E9%92%88/"/>
    <id>http://xczf.shop/2021/06/15/%E6%8C%87%E9%92%88/</id>
    <published>2021-06-15T11:00:41.000Z</published>
    <updated>2023-10-31T06:14:44.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="变量与地址"><a href="#变量与地址" class="headerlink" title="变量与地址"></a>变量与地址</h3><p>指针就是内存地址，指针变量是用来存放内存地址的变量<br>变量名就是抽象的某块空间别名 </p><p><strong>普通变量，只允许修改它的内容<br>对于指针，可以修改指针变量的指向地址和该地址的内容</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>; <span class="comment">// 意思就是定义并且初始化</span></span><br><span class="line">&amp;i --&gt; <span class="number">0</span>x...</span><br><span class="line">i  --&gt; <span class="number">1</span>   <span class="comment">// 以补码的方式存放到&amp;i的空间里</span></span><br></pre></td></tr></table></figure><h3 id="指针与指针变量"><a href="#指针与指针变量" class="headerlink" title="指针与指针变量"></a>指针与指针变量</h3><p><strong>指针不管什么类型，在平台下都是固定的</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>；    <span class="comment">// TYPE NAME = VALUE;</span></span><br><span class="line"><span class="comment">// int *p;</span></span><br><span class="line"><span class="comment">// p = &amp;i;    // 指向数据类型一定要相同</span></span><br><span class="line"><span class="type">int</span> *p = &amp;i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(i));     <span class="comment">// 4   </span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="keyword">sizeof</span>(p));     <span class="comment">// 8   固定大小 机器环境相关</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>,i);    <span class="comment">// i = 1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;i = %p\n&quot;</span>,&amp;i);  <span class="comment">// &amp;i = 0x7fff50d903b4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %p\n&quot;</span>,p);    <span class="comment">// p = 0x7fff50d903b4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;p = %p\n&quot;</span>,&amp;p);  <span class="comment">// &amp;p = 0x7fff50d903a8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p = %d\n&quot;</span>,*p);   <span class="comment">// *p = *(0x7fff50d903b4) = 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="直接访问与间接访问"><a href="#直接访问与间接访问" class="headerlink" title="直接访问与间接访问"></a>直接访问与间接访问</h3><p>直接访问:直接通过定义的变量来获取变量的数值<br>间接访问:通过指针的形式，指向原来变量存储的值，同样也可以进行修改</p><h3 id="空指针与野指针"><a href="#空指针与野指针" class="headerlink" title="空指针与野指针"></a>空指针与野指针</h3><p>空指针就是预防野指针的产生<br>野指针：没有发生指向，就直接使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p; <span class="comment">// int *p = NULL; 写成空指针就不会出现问题</span></span><br><span class="line">*p = <span class="number">1</span>; <span class="comment">// 非法赋值,因为没有给那块地址赋值</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p); <span class="comment">// 段错误</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h3><p>可以赋给任意指针，在不确定数据类型的时候使用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *q = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="定义与初始化的书写规则"><a href="#定义与初始化的书写规则" class="headerlink" title="定义与初始化的书写规则"></a>定义与初始化的书写规则</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> *p = &amp;i;</span><br><span class="line"><span class="type">int</span> **q = &amp;p;</span><br><span class="line">q = &amp;p;</span><br><span class="line"><span class="type">int</span> **q = &amp;p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;q = %p\n&quot;</span>,q); <span class="comment">// q = 0x7fff50d903a8</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*q = %p\n&quot;</span>,*q); <span class="comment">// *q = *(&amp;p) = p = 0x7fff50d903b4</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**q = %p\n&quot;</span>,**q); <span class="comment">// **q = *p = *(&amp;i) = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// i的三种访问方式</span></span><br><span class="line">i = *p = **q</span><br><span class="line">&amp;i = p = *q</span><br></pre></td></tr></table></figure><h3 id="指针运算"><a href="#指针运算" class="headerlink" title="指针运算"></a>指针运算</h3><p>&amp;   *  关系运算   ++  –</p><h3 id="指针与数组"><a href="#指针与数组" class="headerlink" title="指针与数组"></a>指针与数组</h3><h4 id="指针与一维数组"><a href="#指针与一维数组" class="headerlink" title="指针与一维数组"></a>指针与一维数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p = a;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">    </span><br><span class="line">    a++; <span class="comment">// 一定会报错，a常量，p++可以</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,%p\n&quot;</span>,a,a+<span class="number">1</span>); <span class="comment">// 0x7fff62220340,0x7fff62220344</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p,%p\n&quot;</span>,p,p+<span class="number">1</span>); <span class="comment">// 0x7fff62220340,0x7fff62220344</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(a[<span class="number">0</span>]);i++)</span><br><span class="line"><span class="comment">// sizeof(a)/sizeof(a[0]) = sizeof(a)/sizeof(*a) 一维可以用</span></span><br><span class="line"><span class="comment">// printf(&quot;%d&quot;,a[i]);</span></span><br><span class="line"> <span class="comment">// printf(&quot;%p -&gt; %d\n&quot;,a+i,a[i]);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p -&gt; %d\n&quot;</span>,p+i,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p -&gt; %d\n&quot;</span>,p+i,*(p+i)); <span class="comment">// 效果一样 </span></span><br><span class="line"><span class="comment">// value:a[i] = *(a+i) = *(p+i) = p[i]</span></span><br><span class="line"><span class="comment">// &amp;a[i] = a+i = p+i = &amp;p[i]</span></span><br><span class="line"><span class="comment">// 最大区别 a是常量 p是变量,但是一维数组中互换a和p并没有太大差别</span></span><br><span class="line"> </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组取值原理：a[i] = *(a+i) 取得是地址，数组是一个连续的地址</span></span><br></pre></td></tr></table></figure><p>p++的特殊之处，指针常量和变量的区别</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> *p = a;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">    <span class="comment">// for(i = 0;i &lt; sizeof(a)/sizeof(*a);i++)</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]); <span class="comment">// &amp;p[i]</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a);i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p-&gt;%d\n&quot;</span>,&amp;a[i],a[i]);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a);i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,p++);</span><br><span class="line"><span class="comment">// p = a 是重新指向，不然p++结束后是4的地址</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="keyword">sizeof</span>(a)/<span class="keyword">sizeof</span>(*a);i++,p++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%%p-&gt;d\n&quot;</span>,p,*p);</span><br><span class="line"><span class="comment">// 结果会出现乱码,其实是456的地址</span></span><br><span class="line"> <span class="built_in">exit</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p = (<span class="type">int</span> [<span class="number">3</span>])&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;; <span class="comment">// 正确写法</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">3</span>;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p-&gt;%d\n&quot;</span>,&amp;p[i],p[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[] = &#123;<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">8.9</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line"><span class="type">int</span> *p = &amp;a[<span class="number">1</span>];</span><br><span class="line">y = (*--p)++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;y = %d\n&quot;</span>,y);      <span class="comment">// y = 5</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[0] = %d\n&quot;</span>,a[<span class="number">0</span>]);<span class="comment">// a[0] = 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针与二维数组"><a href="#指针与二维数组" class="headerlink" title="指针与二维数组"></a>指针与二维数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a[i][j] = *(*(a+i)+j)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p %p&quot;</span>,a,a+<span class="number">1</span>); <span class="comment">// 列指针</span></span><br><span class="line"><span class="type">int</span> *p = *a;</span><br><span class="line"><span class="comment">// warning p = a; 因为p+1会是行指针，而a+1是列指针,*就等于降级</span></span><br><span class="line"><span class="comment">// p = *a; // p = *(a+0),p = &amp;a[0][0]</span></span><br><span class="line"><span class="comment">// 0x7ffe038d0db0 0x7ffe038d0dbc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">p = &amp;a[0][0];</span></span><br><span class="line"><span class="comment">for(i = 0;i &lt; 6;i++,p++)</span></span><br><span class="line"><span class="comment">printf(&quot;%d&quot;),*p);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">for(i = 0;i &lt; 6;i++)</span></span><br><span class="line"><span class="comment">printf(&quot;%d&quot;),p[i]);</span></span><br><span class="line"><span class="comment">printf(&quot;\n&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">2</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p-&gt;%d&quot;</span>,&amp;a[i][j],a[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%p-&gt;%d&quot;</span>,*(a+i)+j,*(*(a+i)+j)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 0x7ffe038d0db0-&gt;1</span></span><br><span class="line"><span class="comment">// 0x7ffe038d0db4-&gt;2</span></span><br><span class="line"><span class="comment">// 0x7ffe038d0db8-&gt;3</span></span><br><span class="line"><span class="comment">// 0x7ffe038d0dbc-&gt;4</span></span><br><span class="line"><span class="comment">// 0x7ffe038d0dc0-&gt;5</span></span><br><span class="line"><span class="comment">// 0x7ffe038d0dc4-&gt;6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> (*q)[<span class="number">3</span>] = a; <span class="comment">// 指针数组：这个时候a就等于q ，区别只有一个常量一个变量</span></span><br></pre></td></tr></table></figure><h4 id="指针与字符数组"><a href="#指针与字符数组" class="headerlink" title="指针与字符数组"></a>指针与字符数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(0)</span></span><br><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;I love china!&quot;</span>;</span><br><span class="line"><span class="type">char</span> *p = str + <span class="number">7</span>;</span><br><span class="line"><span class="built_in">puts</span>(str);</span><br><span class="line"><span class="built_in">puts</span>(p);    <span class="comment">// china!</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *str = <span class="string">&quot;hello&quot;</span>; <span class="comment">// strcpy(str,“world&quot;);不可以用 用str = &quot;world&quot;;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,<span class="keyword">sizeof</span>(str),<span class="built_in">strlen</span>(str)); <span class="comment">// 8 5 8是一个指针大小</span></span><br><span class="line"><span class="comment">// False strcpy(str,&quot;world&quot;);</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const与指针"><a href="#const与指针" class="headerlink" title="const与指针"></a>const与指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const int a;</span></span><br><span class="line"><span class="comment">int const a;</span></span><br><span class="line"><span class="comment">const int *p;</span></span><br><span class="line"><span class="comment">int const *p;</span></span><br><span class="line"><span class="comment">int *const p;</span></span><br><span class="line"><span class="comment">const int *const p;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> pi = <span class="number">3.14</span>; <span class="comment">// 变量给常量化了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针常量和常量指针</span></span><br><span class="line"><span class="comment">// 先看到const为常量 先看到*为指针</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">conset <span class="type">float</span> pi = <span class="number">3.14</span>;</span><br><span class="line"><span class="comment">// False pi = 3.14159 直接报错</span></span><br><span class="line"><span class="type">float</span> *p = &amp;pi; <span class="comment">// 加上const不然会warning</span></span><br><span class="line">*p = <span class="number">3.14159</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;f\n&quot;</span>,pi);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i =  <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *p = &amp;i;</span><br><span class="line"><span class="comment">// i = 10; 可以</span></span><br><span class="line">*p = <span class="number">10</span>; 只读报错</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"><span class="comment">// const锁定的是名字而不是空间，也可以换指向</span></span><br><span class="line"><span class="comment">// 整型变量用指向整型的指针来指向，整型的常量用常量化的指针来解释</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i =  <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> j = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> * <span class="type">const</span> p = &amp;i;</span><br><span class="line">*p = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// F p = &amp;j;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> *<span class="type">const</span> p = &amp;i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p);</span><br><span class="line"><span class="comment">// 锁死 都不能改 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指针数组与数组指针"><a href="#指针数组与数组指针" class="headerlink" title="指针数组与数组指针"></a>指针数组与数组指针</h3><p>数组指针：[存储类型] 数据类型 （*指针名） [下标] &#x3D; 值<br>int ( * p)[3]; –&gt; type name; –&gt; int[3]  * p;<br>指针数组：[存储类型] 数据类型 * 数组名 长度<br>int * arr[3]; -&gt; TYPE NAME;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j,k;</span><br><span class="line"><span class="type">char</span> *name[<span class="number">5</span>] = &#123;<span class="string">&quot;follow me&quot;</span>,<span class="string">&quot;Basic&quot;</span>,<span class="string">&quot;Great&quot;</span>,<span class="string">&quot;Fortran&quot;</span>,<span class="string">&quot;Computer&quot;</span>&#125;;</span><br><span class="line"><span class="type">char</span> *tmp;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span><span class="number">-1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">k = i;</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>;j &lt; <span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(name[k],name[j] &gt; <span class="number">0</span>))</span><br><span class="line">k = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k != i)</span><br><span class="line">&#123;</span><br><span class="line">tmp = name[i];</span><br><span class="line">name[i] = name[k];</span><br><span class="line">name[k] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">5</span>;i++)</span><br><span class="line"><span class="built_in">puts</span>(name[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;指针&quot;&gt;&lt;a href=&quot;#指针&quot; class=&quot;headerlink&quot; title=&quot;指针&quot;&gt;&lt;/a&gt;指针&lt;/h2&gt;&lt;h3 id=&quot;变量与地址&quot;&gt;&lt;a href=&quot;#变量与地址&quot; class=&quot;headerlink&quot; title=&quot;变量与地址&quot;&gt;&lt;/a&gt;变量与地</summary>
      
    
    
    
    <category term="C" scheme="http://xczf.shop/cate%EF%BC%9Agories/C/"/>
    
    
    <category term="C" scheme="http://xczf.shop/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Shell</title>
    <link href="http://xczf.shop/2021/06/01/Shell/"/>
    <id>http://xczf.shop/2021/06/01/Shell/</id>
    <published>2021-06-01T11:00:41.000Z</published>
    <updated>2023-12-12T02:57:38.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>测试网站：<a href="https://tool.chinaz.com/regex">https://tool.chinaz.com/regex</a></p><ul><li>字符匹配<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.：匹配任意单个字符</span><br><span class="line">[]：匹配指定范围内任意单个字符 [a-z] [0-9]</span><br><span class="line">[^]：匹配指定范围外任意单个字符 [^a-z] [^0-9]</span><br><span class="line">[:alnum:]：字母与数字字符</span><br><span class="line">[:alpha:]：字母</span><br><span class="line">[:ascii:]：ASCII字符</span><br><span class="line">[:blank:]：空格或制表符</span><br><span class="line">[:cntrl:]：ASCII控制字符</span><br><span class="line">[:digit:]：数字</span><br><span class="line">[:graph:]：非控制、非空格字符</span><br><span class="line">[:lower:]：小写字母</span><br><span class="line">[:print:]：可打印字符</span><br><span class="line">[:punct:]：标点符号字符</span><br><span class="line">[:space:]：空白字符，包括垂直制表符</span><br><span class="line">[:upper:]：大写字母</span><br><span class="line">[:xdigit:]：十六进制数字</span><br></pre></td></tr></table></figure></li><li>匹配次数<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">*：匹配前面的字符任意次数</span><br><span class="line">.*：匹配任意长度的字符</span><br><span class="line">\?：匹配其前面字符0或1次，即前面的可有可无 &#x27;a\?b&#x27;</span><br><span class="line">\+：匹配其前面的字符至少1次 &#x27;a\+b&#x27;</span><br><span class="line">\&#123;m\&#125;：匹配前面的字符m次</span><br><span class="line">\&#123;m,n\&#125;：匹配前面的字符至少m次，至多n次</span><br><span class="line">\&#123;0,n\&#125;：匹配前面的字符至多n次</span><br><span class="line">\&#123;m,\&#125;：匹配前面的字符至少m次</span><br></pre></td></tr></table></figure></li><li>位置锚定<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">^：行首锚定，用于模式的最左侧</span><br><span class="line">$：行末锚定，用于模式的最右侧</span><br><span class="line">^PATTERN$：用于模式匹配整行；</span><br><span class="line">^$：空行</span><br><span class="line">\&lt; 或 \b：词首锚定，用于单词模式的左侧</span><br><span class="line">\&gt; 或 \b：词尾锚定，用于单词模式的右侧</span><br><span class="line">\&lt;PATTERN\&gt;：匹配整个单词 &#x27;\&lt;hello\&gt;&#x27;</span><br></pre></td></tr></table></figure></li><li>分组<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\(\):将一个或多个字符捆绑在一起；当作一个字符</span><br><span class="line">\(xy\)*ab</span><br><span class="line">Note：分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命令</span><br></pre></td></tr></table></figure><h2 id="过滤文本–grep"><a href="#过滤文本–grep" class="headerlink" title="过滤文本–grep"></a>过滤文本–grep</h2><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-E :--extended--regexp <span class="comment"># 模式是扩展正则表达式（ERE）</span></span><br><span class="line">-i :--ignore--case <span class="comment"># 忽略大小写</span></span><br><span class="line">-n: --line--number <span class="comment"># 打印行号</span></span><br><span class="line">-o:--only--matching <span class="comment"># 只打印匹配的内容</span></span><br><span class="line">-c:--count <span class="comment"># 只打印每个文件匹配的行数</span></span><br><span class="line">-B:--before--context=NUM <span class="comment"># 打印匹配的前几行</span></span><br><span class="line">-A:--after--context=NUM <span class="comment"># 打印匹配的后几行</span></span><br><span class="line">-C:--context=NUM <span class="comment"># 打印匹配的前后几行</span></span><br><span class="line">--color[=WHEN] <span class="comment"># 匹配的字体颜色，别名已定义了</span></span><br><span class="line">-v:--invert--match <span class="comment"># 打印不匹配的行</span></span><br><span class="line">-e <span class="comment"># 多点操作eg：grep -e &quot;^s&quot; -e &quot;s$&quot;</span></span><br></pre></td></tr></table></figure><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3></li><li>打印出所有的a无论大小写<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -i <span class="string">&quot;a&quot;</span> test.txt</span><br></pre></td></tr></table></figure></li><li>打印出所有的a无论大小写，并且显示该字符串所在的行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -<span class="keyword">in</span> <span class="string">&quot;a&quot;</span> test.txt</span><br></pre></td></tr></table></figure></li><li>仅仅打印出所有匹配的字符串<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -io <span class="string">&quot;a&quot;</span> test.txt</span><br></pre></td></tr></table></figure></li><li>打印出匹配的字符串有多少行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -ic <span class="string">&quot;a&quot;</span> <span class="built_in">test</span></span><br></pre></td></tr></table></figure></li><li>打印出不包含大小s的所有行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -iv <span class="string">&quot;S&quot;</span> test.txt</span><br></pre></td></tr></table></figure></li><li><strong>查看配置文件时去除所有的注释和空行</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -Ev <span class="string">&quot;^#|^$&quot;</span> /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件中包含root关键字</span></span><br><span class="line">grep <span class="string">&quot;root&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 文件中不包含root关键字</span></span><br><span class="line">grep -v <span class="string">&quot;root&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 文件中不论大小root关键字</span></span><br><span class="line">grep -i <span class="string">&quot;root&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 过滤nologin或root单词</span></span><br><span class="line">egrep <span class="string">&quot;nologin|root&quot;</span> /etc/passwd</span><br><span class="line">grep -E <span class="string">&quot;nologin|root&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 过滤oo的字节前面有g的</span></span><br><span class="line">grep -E <span class="string">&quot;[^g]oo&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 过滤oo的字节前面是小写的</span></span><br><span class="line">grep -E <span class="string">&quot;[^a-z]oo&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 过滤有数字的行</span></span><br><span class="line">grep -E <span class="string">&quot;[^0-9]&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 过滤以root开头的</span></span><br><span class="line">grep -E <span class="string">&quot;^root&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 过滤g后面有2-5个o，跟一个g的字串</span></span><br><span class="line">grep -E <span class="string">&quot;go&#123;2,5&#125;&quot;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 过滤g后面接俩个以上o的</span></span><br><span class="line">grep -E <span class="string">&quot;go&#123;2,&#125;&quot;</span> /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="处理文本–sed"><a href="#处理文本–sed" class="headerlink" title="处理文本–sed"></a>处理文本–sed</h2></li><li>常用选项<br>‐n ：只打印模式匹配的行<br>‐e ：直接在命令行模式上进行sed动作编辑，此为<strong>默认选项</strong><br>‐f ：将sed的动作写在一个文件内，用–f filename 执行filename内的sed动作<br>‐r ：支持扩展表达式<br>‐i ：直接修改文件内容</li><li>动作<br>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)<br>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！<br>d ：删除，因为是删除啊，所以 d 后面通常不接任何东西；<br>i ：插入， i的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；<br>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行<br>s ：取代，可以直接进行取代的工作，通常这个 s 的动作可以搭配正规表示法</li><li>动作选项<br>常用选项：<br>p：打印匹配的行(‐n)<br>&#x3D;：显示文件行号<br>a\：指定行号后添加新文本<br>i\：指定行号前添加新文本<br>d：删除定位行<br>c\：用新文本替换定位文本<br>w filename：写文本到一个文件<br>r filename：从另一个文件读文本<br>s&#x2F;&#x2F;&#x2F;：替换</li><li>替换标记：<br>g：行内全局替换<br>p：显示替换成功的行<br>w：将替换成功的结果保存至指定文件<br>q：第一个模式匹配后立即退出<br>{}：在定位行执行的命令组，用逗号分隔<br>g：将模式2粘贴到&#x2F;pattern n&#x2F;<h3 id="以行为单位的新增-x2F-删除"><a href="#以行为单位的新增-x2F-删除" class="headerlink" title="以行为单位的新增&#x2F;删除"></a>以行为单位的新增&#x2F;删除</h3></li><li>将 &#x2F;etc&#x2F;passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2,5d&#x27;</span></span><br></pre></td></tr></table></figure></li><li>只删除第 2 行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2d&#x27;</span></span><br></pre></td></tr></table></figure></li><li>删除第 3 到最后一行 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;3,$d&#x27;</span></span><br></pre></td></tr></table></figure></li><li>在第二行后加上『shell』字样<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2a\shell&#x27;</span></span><br></pre></td></tr></table></figure></li><li>加在第二行前面<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2i\shell&#x27;</span></span><br></pre></td></tr></table></figure></li><li>增加多行文字<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2a\hello world\</span></span><br><span class="line"><span class="string">shell&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="以行为单位的替换与显示"><a href="#以行为单位的替换与显示" class="headerlink" title="以行为单位的替换与显示"></a>以行为单位的替换与显示</h3></li><li>将第2-5行的内容取代成为No 2-5 number<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;2,5c\No 2-5 number</span></span><br></pre></td></tr></table></figure></li><li>列出 &#x2F;etc&#x2F;passwd 文件内的第 5-7 行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed -n <span class="string">&#x27;5,7p&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据的搜寻并显示"><a href="#数据的搜寻并显示" class="headerlink" title="数据的搜寻并显示"></a>数据的搜寻并显示</h3></li><li>搜索 &#x2F;etc&#x2F;passwd有root关键字的行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed -n <span class="string">&#x27;/root/p&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据的搜寻并删除"><a href="#数据的搜寻并删除" class="headerlink" title="数据的搜寻并删除"></a>数据的搜寻并删除</h3></li><li>删除&#x2F;etc&#x2F;passwd所有包含root的行，其他行输出<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;/root/d&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据的搜寻并执行命令"><a href="#数据的搜寻并执行命令" class="headerlink" title="数据的搜寻并执行命令"></a>数据的搜寻并执行命令</h3></li><li>搜索&#x2F;etc&#x2F;passwd,找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，bash替换为blueshell<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed -n <span class="string">&#x27;/root/&#123;s/bash/blueshell/p;q&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="数据的搜寻并替换"><a href="#数据的搜寻并替换" class="headerlink" title="数据的搜寻并替换"></a>数据的搜寻并替换</h3></li><li>删除IP地址前面和后面的东西<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig | sed -n <span class="string">&#x27;/netmask/p&#x27;</span> | sed <span class="string">&#x27;s/^.*inet //g&#x27;</span> | sed <span class="string">&#x27;s/ netmask.*$//g&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="多点编辑"><a href="#多点编辑" class="headerlink" title="多点编辑"></a>多点编辑</h3></li><li>删除&#x2F;etc&#x2F;passwd第三行到末尾的数据，并把bash替换为blueshell<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nl</span> /etc/passwd | sed -e <span class="string">&#x27;3,$d&#x27;</span> -e <span class="string">&#x27;s/bash/blueshell/&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示test.txt文件的3-9行</span></span><br><span class="line">sed -n <span class="string">&quot;3,9p&quot;</span> test.txt</span><br><span class="line"><span class="comment"># 在文件第一行添加haha,文件结尾一行替换为yesyes</span></span><br><span class="line">sed -e <span class="string">&#x27;la\haha&#x27;</span> -e <span class="string">&#x27;$c\yes&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 用hahaha替换oo，打印前20行</span></span><br><span class="line">sed <span class="string">&#x27;s/hah/oo/g&#x27;</span> | sed -n <span class="string">&#x27;1,20p&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 删除空行和以#开头的行</span></span><br><span class="line">sed <span class="string">&quot;/^#/d&quot;</span> | sed <span class="string">&quot;/^$/d&quot;</span> test.txt</span><br><span class="line"><span class="comment"># 在第2行下面插入hahaha第5行上面插入lalala</span></span><br><span class="line">sed -e <span class="string">&#x27;2a\hahaha&#x27;</span> -e <span class="string">&#x27;5i\lalala&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 删除1到5行的最后一个字符</span></span><br><span class="line">sed <span class="string">&#x27;1,5s/.$//&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 为文件中每个大写字母添加括号</span></span><br><span class="line">sed -r <span class="string">&#x27;s/&#123;([A-Z])/(\1)/g&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 文件中出现所有sbin都被替换成hahah</span></span><br><span class="line">sed <span class="string">&#x27;s/sbin/haha/g&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 解除文件注释，并删除4-6行</span></span><br><span class="line">sed -e <span class="string">&#x27;s/^#//g&#x27;</span> -e <span class="string">&#x27;4,6d&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 删除所有包含mail的行</span></span><br><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;/mail/d&#x27;</span></span><br><span class="line"><span class="comment"># 把20行以后所有行的末尾加上awr</span></span><br><span class="line"><span class="built_in">nl</span> /etc/passwd | sed <span class="string">&#x27;10,$s/.$/&amp;awr&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="数据查找–awk"><a href="#数据查找–awk" class="headerlink" title="数据查找–awk"></a>数据查找–awk</h2></li><li>方法<br> pattern 表示 AWK 在数据中查找的内容，而 action 是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。 pattern就是要表示的正则表达式，用斜杠括起来。<br>awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来格式化文本文件中的信息。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123;pattern + action&#125;&#x27;</span> &#123;filenames&#125;</span><br></pre></td></tr></table></figure></li><li>原理</li></ul><hr><p><img src="/image/shell/1.jpg" alt="awk原理"></p><hr><h4 id="查看test-txt文件（100行）内第20到第30行的内容"><a href="#查看test-txt文件（100行）内第20到第30行的内容" class="headerlink" title="查看test.txt文件（100行）内第20到第30行的内容"></a>查看test.txt文件（100行）内第20到第30行的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">seq</span> 100 &gt; test.txt</span><br><span class="line">awk <span class="string">&#x27;&#123;if(NR&gt;=20 &amp;&amp; NR&lt;=30) PRINT $1&#125;&#x27;</span> test.txt</span><br></pre></td></tr></table></figure><h4 id="过滤想得到内容"><a href="#过滤想得到内容" class="headerlink" title="过滤想得到内容"></a>过滤想得到内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;I am aaron, my qq is 1234567&quot;</span> &gt; test.txt</span><br><span class="line">awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $1&quot; &quot;$2&#125;&#x27;</span> test.txt | awk <span class="string">&#x27;&#123;print $3&quot; &quot;$7&#125;&#x27;</span></span><br><span class="line">awk -F <span class="string">&#x27;[ ,]+&#x27;</span> <span class="string">&#x27;&#123;print $3&quot; &quot;$8&#125;&#x27;</span> test.txt </span><br></pre></td></tr></table></figure><h3 id="BEGIN-和-END-模块"><a href="#BEGIN-和-END-模块" class="headerlink" title="BEGIN 和 END 模块"></a>BEGIN 和 END 模块</h3><h4 id="统计-x2F-etc-x2F-passwd的账户人数"><a href="#统计-x2F-etc-x2F-passwd的账户人数" class="headerlink" title="统计&#x2F;etc&#x2F;passwd的账户人数"></a>统计&#x2F;etc&#x2F;passwd的账户人数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk <span class="string">&#x27;BEGIN &#123;count=0;print &quot;[start] user count is &quot;,count&#125;&#123;count++;print $0&#125; END&#123;print &quot;[end] user count is &quot;,count&#125;&#x27;</span> /etc/passwd</span><br></pre></td></tr></table></figure><h4 id="统计某个文件夹下的文件占用的字节数"><a href="#统计某个文件夹下的文件占用的字节数" class="headerlink" title="统计某个文件夹下的文件占用的字节数"></a>统计某个文件夹下的文件占用的字节数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ll | awk <span class="string">&#x27;BEGIN &#123;size=0&#125; &#123;size=size+$5&#125; END&#123;print &quot;size is &quot;,size&#125;&#x27;</span></span><br><span class="line">ll | awk <span class="string">&#x27;BEGIN &#123;size=0&#125; &#123;size=size+$5&#125; END&#123;print &quot;size is &quot;,size/1024/1024,&quot;M&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="awk运算符"><a href="#awk运算符" class="headerlink" title="awk运算符"></a>awk运算符</h3><hr><p><img src="/image/shell/2.jpg" alt="awk运算符"></p><hr><h3 id="awk-内置变量"><a href="#awk-内置变量" class="headerlink" title="awk 内置变量"></a>awk 内置变量</h3><hr><p><img src="/image/shell/3.jpg" alt="awk内置变量"></p><hr><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出/etc/passwd文件中以nologin结尾的行</span></span><br><span class="line">awk <span class="string">&#x27;/nologin$/&#123;print $0&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 判断服务器上所有用户类型(超级管理员，系统用户，普通用户)</span></span><br><span class="line">awk -F:<span class="string">&#x27;&#123;if($3==0)print&quot;超级管理员&quot;$1&#125;&#123;if($3&lt;1000 &amp;&amp; $3&gt;0)print&quot;系统用户&quot;$1&#125;&#123;if($3&gt;=1000)print&quot;普通用户&quot;$1&#125;&#x27;</span> /etc/passwd</span><br><span class="line"><span class="comment"># 显示出包含Lee和包含kevin的行</span></span><br><span class="line">awk <span class="string">&#x27;/Lee|Kevin/&#123;print $0&#125;&#x27;</span> test.txt</span><br><span class="line"><span class="comment"># 统计/etc/fstab文件中每个文件系统类型出现的次数</span></span><br><span class="line">awk <span class="string">&#x27;!/^#|^$/&#123;fs[$3]++&#125; END &#123;for(i in fs)&#123;print &quot;文件系统:&quot;i*&quot;出现次数:&quot;fs[i]&#125;&#125;&#x27;</span> /etc/fstab</span><br></pre></td></tr></table></figure><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><p><strong>shell是一种解释型语言（逐行解释）</strong><br>Shell 是一个用 C 语言编写的程序。Shell 既是一种命令语言，又是一<br>种程序设计语言。<br>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><ul><li>Shell 种类<br>Bourne Shell（&#x2F;usr&#x2F;bin&#x2F;sh或&#x2F;bin&#x2F;sh）<br>Bourne Again Shell（&#x2F;bin&#x2F;bash）<br>C Shell（&#x2F;usr&#x2F;bin&#x2F;csh）<br>K Shell（&#x2F;usr&#x2F;bin&#x2F;ksh）<br>Shell for Root（&#x2F;sbin&#x2F;sh）<h3 id="调试脚本"><a href="#调试脚本" class="headerlink" title="调试脚本"></a>调试脚本</h3>-x : 在执行时显示参数和命令；<br>+x：禁止调试<br>-v：当命令行进行读取时显示输入；<br>+v：禁止打印输入。</li></ul><ul><li>n：检测脚本中的语法错误<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3></li></ul><ul><li>全局配置<br>&#x2F;etc&#x2F;bashrc<br>&#x2F;etc&#x2F;profile<br>&#x2F;etc&#x2F;profile.d&#x2F; * .sh</li><li>个人配置<br>~&#x2F;.bash_profile<br>~&#x2F;.bashrc<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3></li><li>变量命名<br>命名只能使用<strong>英文字母，数字和下划线，首字母不能以数字开头</strong><br>中间不能够有<strong>特殊字符，可以使用 _ 下划线</strong><br>不能使用标点符号<br>不能使用bash中的关键字<h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义变量</span></span><br><span class="line">name=<span class="string">&quot;httpd&quot;</span></span><br><span class="line"><span class="comment"># 使用变量(最好使用括号)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name&#125;</span></span><br></pre></td></tr></table></figure></li><li>只读变量 readonly<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行脚本后，显示只读变量无法修改</span></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">myUrl=<span class="string">&quot;http://www.google.com&quot;</span></span><br><span class="line"><span class="built_in">readonly</span> myUrl</span><br><span class="line">myUrl=<span class="string">&quot;http://www.baidu.com&quot;</span></span><br></pre></td></tr></table></figure></li><li>删除变量 unset<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">myUrl=<span class="string">&quot;http://www.runoob.com&quot;</span></span><br><span class="line"><span class="built_in">unset</span> myUrl</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$myUrl</span></span><br></pre></td></tr></table></figure><h4 id="变量种类"><a href="#变量种类" class="headerlink" title="变量种类"></a>变量种类</h4></li><li>本地变量：生效范围仅为当前shell进程；（其他shell，当前的子shell进程均无效）<br>变量赋值：name &#x3D; “value”</li><li>环境变量：生效范围为当前shell进程及子进程<br>变量声明：export name &#x3D; “value”<br>变量声明：declare -x name &#x3D; “value”<br>bash中有许多内建的变量环境：SHELL,PATH等等</li><li>局部变量：生效范围为当前shell进程中某代码片断（通常指函数）</li><li>位置变量： 2…来表示，让脚本在脚本代码中调用通过命令行传递给它的参数；</li><li>特殊变量<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">1,<span class="variable">$2</span>,…：对应调用第1，第2等参数</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">0：命令本身</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">*：传递给脚本的所有参数（把所有参数当作整体）</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">@：传递给脚本的所有参数</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="comment">#：传递给脚本的参数的个数</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例1：</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;命令本身是：$0&quot;</span><br><span class="line">echo &quot;第一个参数是：$1&quot;</span><br><span class="line">echo &quot;第二个参数是：$2&quot;</span><br><span class="line">echo &quot;一共有$#个参数&quot;</span><br><span class="line">echo &quot;所有参数是：$@&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">案例2：判断所给文件的行数</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">linecount=&quot;$(wc -l $1|cut -d&#x27; &#x27; -f1)&quot;</span><br><span class="line">echo &quot;This file have $&#123;linecount&#125; lines&quot;</span><br></pre></td></tr></table></figure><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3></li></ul><hr><p><img src="/image/shell/4.jpg" alt="文件描述符"></p><hr><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ul><li>语法格式<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">语法格式：array_name=(value1 ... valuen)</span></span><br><span class="line">my_array=(A B C D)</span><br></pre></td></tr></table></figure></li><li>读取数组<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">读取数组：<span class="variable">$&#123;array_name[index]&#125;</span></span></span><br><span class="line">my_array[0]=A</span><br><span class="line">my_array[1]=B</span><br><span class="line">my_array[2]=C</span><br><span class="line">my_array[3]=D</span><br><span class="line">echo &quot;数组的元素为: $&#123;my_array[*]&#125;&quot;</span><br><span class="line">echo &quot;数组的元素为: $&#123;my_array[@]&#125;&quot;</span><br></pre></td></tr></table></figure><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3></li><li>运算符<figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+ ‐ * / % ** ...</span><br><span class="line">增强赋值：+=，‐=，*=，/=，%=</span><br><span class="line">乘法符号有些场景中需要转义 : *\</span><br><span class="line">bash有内建随机数生成器：$RANDOM</span><br></pre></td></tr></table></figure></li><li>算数运算 expr<br>expr本身是一个命令，可以直接进行运算(expr a + b注意要空格才可以进行运算)<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var=$(expr 1 + 2)</span><br></pre></td></tr></table></figure><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><h4 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h4>‐gt：是否大于<br>‐ge：是否大于等于<br>‐eq：是否等于<br>‐ne：是否不等于<br>‐lt：是否小于<br>‐le：是否小于等于<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">比较两个数的大小</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">read -p &quot;请输入两个整数&quot; num1 num2</span><br><span class="line">if [ $num1 -gt $num2 ];then</span><br><span class="line">  echo &quot;$num1 &gt; $num2&quot;</span><br><span class="line">elif [ $num1 -lt $num2 ];then</span><br><span class="line">  echo &quot;$num1 &lt; $num2&quot;</span><br><span class="line">else</span><br><span class="line">  echo &quot;$num1 = $num2&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h4><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">==：是否等于</span><br><span class="line">&gt;：是否大于</span><br><span class="line">&lt;：是否小于</span><br><span class="line">！=：是否不等于</span><br><span class="line">=~：左侧字符串是否能够被右侧的PATTERN所匹配</span><br><span class="line">Note：此表达式一般用于[[ ]]中</span><br><span class="line">‐z “STRING”:测试字符串是否为空，空则为真，不空则为假</span><br><span class="line">‐n “STRING”:测试字符串是否不空，不空则为真，空则为假</span><br></pre></td></tr></table></figure><h4 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h4></li><li>简单的存在性测试：<br>‐a FILE ：文件存在性测试，存在为真，否则为假</li><li>存在性及类型测试：<br>‐b FLIE：是否存在且为块设备文件；<br>‐c FILE：是否存在且为字符设备文件；<br>‐d FILE：是否存在且为目录文件；<br>‐f FILE：是否存在且为普通文件；<br>‐h FILE 或 ‐L FILE : 存在且为符号链接文件；<br>‐p FIEL ：是否存在且为命名管道文件；<br>‐S FILE：是否存在且为套接文件；</li><li>文件权限测试：<br>‐r FILE：是否存在且可读<br>‐w FILE：是否存在且可写<br>‐x FILE：是否存在可执行</li><li>文件特殊权限测试：<br>‐u FILE：是否存在且拥有suid权限；<br>‐g FILE：是否存在且拥有sgid权限；<br>‐k FILE：是否存在且拥有sticky权限；</li><li>文件大小测试：<br>‐s FILE：是否存在且非空</li><li>文件是否打开：<br>‐fd：fd表示文件描述符是否已经打开且与某终端相关<br>‐N FILE：文件自动上一次读取之后是否被修改过；<br>‐O FILE：当前用户是否为文件的属主；<br>‐G FILE：当前有效用户是否为文件数组；</li><li>双目测试：<br>FILE1 ‐ef FILE2 ：FILE1与FILE2是否指向同一个设备上的相同inode<br>FILE1 ‐nt FILE2：FILE1是否新于FILE2<br>FILE1 ‐ot FILE2：FILE1是否旧于FILE2</li><li>组合测试条件<br>&amp;&amp;代表的意思是当前一个命令执行成功时会继续执行后续的命令，当前一个命令执行失败的时候不会执行后续的命令(-a)<br>||代表的意思是当前一个命令执行成功时不会继续执行后续的命令，当前一个命令执行失败的时候会执行后续的命令(-o)<h3 id="用户交互-read"><a href="#用户交互-read" class="headerlink" title="用户交互 read"></a>用户交互 read</h3>‐a：将内容读入到数组中<br>‐d ： 表示delimiter，即定界符<br>‐e ：只用于互相交互的脚本<br>‐n ： 用于限定最多可以有多少字符可以作为有效读入<br>‐p ：用于给出提示符<br>‐r ：特殊字符生效(&#x2F;n等)，也应采用‐r选项。<br>‐s ： 对于一些特殊的符号不打印的情况<br>‐t ：用于表示等待输入的时间(s),等待时间超过，将继续执行后面的脚本<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断用户是否存在，不存在就创建及增加密码 sh user.sh xw</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;arg not less than 1&quot;</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line">id $1 &amp;&gt; /dev/null</span><br><span class="line">if [ $? -eq 0 ]</span><br><span class="line">then</span><br><span class="line">echo &quot;$1 exists!&quot;</span><br><span class="line">exit 2</span><br><span class="line">else</span><br><span class="line">useradd $1 &amp;&amp; echo &quot;$1&quot; | passed --stdin $1 &amp;&gt; /dev/null</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3></li><li>for循环<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for 变量名 in 列表;do</span><br><span class="line">循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li>while循环<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 测试条件;do</span><br><span class="line">循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li>until循环<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">until 条件测试;do</span><br><span class="line">循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function FUNNAME()&#123;</span><br><span class="line">函数体</span><br><span class="line">返回值</span><br><span class="line">&#125;</span><br><span class="line">FUNNME #调用函数</span><br></pre></td></tr></table></figure><h3 id="shell案例"><a href="#shell案例" class="headerlink" title="shell案例"></a>shell案例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># win下可能存在行尾有^M的问题 # dos2unix x.sh</span></span><br><span class="line">yum install dos2unix -y</span><br></pre></td></tr></table></figure><h4 id="0-用户登陆成功时输出系统的相关信息"><a href="#0-用户登陆成功时输出系统的相关信息" class="headerlink" title="0.用户登陆成功时输出系统的相关信息"></a>0.用户登陆成功时输出系统的相关信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">yum install -y net-tools &amp;&gt; /dev/null</span><br><span class="line">System=$(hostnamectl | grep System | awk &#x27;&#123;print $3,$4,$5&#125;&#x27;)</span><br><span class="line">echo &quot;当前系统版本是：$&#123;System&#125;&quot;</span><br><span class="line"></span><br><span class="line">Kernel=$(hostnamectl | grep Kernel | awk -F: &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">echo &quot;当前系统内核是：$&#123;Kernel&#125;&quot;</span><br><span class="line"></span><br><span class="line">Virtualization=$(hostnamectl | grep Virtualization| awk &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">echo &quot;当前虚拟平台是：$&#123;Virtualization&#125;&quot;</span><br><span class="line"></span><br><span class="line">Statichostname=$(hostnamectl | grep Static|awk -F: &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">echo &quot;当前主机名是：$&#123;Statichostname&#125;&quot;</span><br><span class="line"></span><br><span class="line">wangka=(ip a | grep ens | head -1 | cut -d: -f2)</span><br><span class="line">Ens=$(ifconfig $&#123;wangka&#125; | awk &#x27;NR==2 &#123;print $2&#125;&#x27;)</span><br><span class="line">echo &quot;当前网卡$&#123;wangka&#125;的地址是：$&#123;Ens&#125;&quot;</span><br><span class="line"></span><br><span class="line">Lo=$(ifconfig lo0 | awk &#x27;NR==2 &#123;print $2&#125;&#x27;)</span><br><span class="line">echo &quot;当前lo0接口的地址是：$&#123;Lo&#125;&quot;</span><br><span class="line"></span><br><span class="line">NetworkIp=$(curl -s icanhazip.com)</span><br><span class="line">echo &quot;当前公网地址是：$&#123;NetworkIp&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="1-服务器系统的配置初始化"><a href="#1-服务器系统的配置初始化" class="headerlink" title="1.服务器系统的配置初始化"></a>1.服务器系统的配置初始化</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置时区并同步时间</span></span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">if ! crontab -l |grep ntpdate &amp;&gt;/dev/null ; then</span><br><span class="line">    (echo &quot;* 1 * * * ntpdate time.windows.com &gt;/dev/null 2&gt;&amp;1&quot;;crontab -l) |crontab</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁用selinux</span></span><br><span class="line">sed -i &#x27;/SELINUX/&#123;s/permissive/disabled/&#125;&#x27; /etc/selinux/config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">if egrep &quot;7.[0-9]&quot; /etc/redhat-release &amp;&gt;/dev/null; then</span><br><span class="line">    systemctl stop firewalld</span><br><span class="line">    systemctl disable firewalld</span><br><span class="line">elif egrep &quot;6.[0-9]&quot; /etc/redhat-release &amp;&gt;/dev/null; then</span><br><span class="line">    service iptables stop</span><br><span class="line">    chkconfig iptables off</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">历史命令显示操作时间</span></span><br><span class="line">if ! grep HISTTIMEFORMAT /etc/bashrc; then</span><br><span class="line">echo &#x27;export HISTTIMEFORMAT=&quot;%F %T `whoami` &quot;&#x27; &gt;&gt;/etc/bashrc</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SSH超时断开</span></span><br><span class="line">if ! grep &quot;TMOUT=600&quot; /etc/profile &amp;&gt;/dev/null; then</span><br><span class="line">    echo &quot;export TMOUT=600&quot; &gt;&gt; /etc/profile</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止root远程登录</span></span><br><span class="line">sed -i &#x27;s/#PermitRootLogin yes/PermitRootLogin no/&#x27; /etc/ssh/sshd_config</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">禁止定时任务发送邮件</span></span><br><span class="line">sed -i &#x27;s/^MAILTO=root/MAILTO=&quot;&quot;/&#x27; /etc/crontab</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置最大打开文件数</span></span><br><span class="line">if ! grep &quot;&#x27; soft nofile 65535&quot; /etc/security/limits.conf &amp;&gt;/dev/null; then</span><br><span class="line">    cat &gt;&gt; /etc/security/limits.conf &lt;&lt; EOF</span><br><span class="line">    * soft nofile 65535</span><br><span class="line">    * hard nofile 65535</span><br><span class="line">EOF</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内核优化</span></span><br><span class="line">cat &gt;&gt; /etc/sysctl.conf &lt;&lt; EOF</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20480</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 20480</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.ipv4.tcp_fin_timeout = 20</span><br><span class="line">EOF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">SWAP使用减少</span></span><br><span class="line">echo &quot;0&quot; &gt; /proc/sys/vm/swappiness</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装阿里yum源</span></span><br><span class="line">yum -y install wget</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum repolist &amp;&amp; yum makecache fast</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装系统性能分析工具</span></span><br><span class="line">yum install -y gcc make autoconf vim sysstat net-tools iostat iftop iotp lrzsz</span><br></pre></td></tr></table></figure><h4 id="2-发送告警邮件"><a href="#2-发送告警邮件" class="headerlink" title="2.发送告警邮件"></a>2.发送告警邮件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">yum install mailx -y</span><br><span class="line">cat &gt;&gt; /etc/mail.rc &lt;&lt; EOF</span><br><span class="line">set from=邮箱 smtp=smtp.qq.com</span><br><span class="line">set smtp-auth-user=邮箱 smtp-auth-password=授权码</span><br><span class="line">set smtp-auth=login</span><br><span class="line">EOF</span><br><span class="line">echo &quot;this is test mail.&quot; |mail -s &quot;monitor&quot; 发送邮箱</span><br></pre></td></tr></table></figure><h4 id="3-批量创建100用户并设置密码"><a href="#3-批量创建100用户并设置密码" class="headerlink" title="3.批量创建100用户并设置密码"></a>3.批量创建100用户并设置密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">！/bin/bash</span></span><br><span class="line">for USER in user&#123;1..100&#125;; do</span><br><span class="line">  if ! id $&#123;USER&#125; &amp;&gt; /dev/null; then</span><br><span class="line">    PASS=$(echo $RANDOM | md5sum | cut -c 1-8)</span><br><span class="line">    useradd $&#123;USER&#125;</span><br><span class="line">    echo $&#123;PASS&#125; | passwd --stdin $&#123;USER&#125;</span><br><span class="line">    echo &quot;$&#123;USER&#125; $&#123;PASS&#125;&quot; &gt;&gt; ./user.info</span><br><span class="line">    echo &quot;$&#123;USER&#125; User create successful&quot;</span><br><span class="line">  else</span><br><span class="line">    echo &quot;$&#123;USER&#125; User already exists&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="4-查看服务器利用率"><a href="#4-查看服务器利用率" class="headerlink" title="4.查看服务器利用率"></a>4.查看服务器利用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">CPU使用率</span></span><br><span class="line">function cpu() &#123;</span><br><span class="line">    util=$(vmstat | awk &#x27;&#123;if(NR==3)print $13+$14&#125;&#x27;)</span><br><span class="line">    iowait=$(vmstat |awk &#x27;&#123;if(NR==3)print $16&#125;&#x27;)</span><br><span class="line">    echo  &quot;CPU - 使用率: $&#123;util&#125;% , 等待磁盘IO响应使用率: $&#123;iowait&#125;%&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内存使用率</span></span><br><span class="line">function memory() &#123;</span><br><span class="line">    total=$(free -m | awk &#x27;&#123;if(NR==2)printf &quot;%1.f&quot;,$2/1024&#125;&#x27;)</span><br><span class="line">    used=$(free -m | awk &#x27;&#123;if(NR==2)printf &quot;%1.f&quot;,($2-$NF)/1024&#125;&#x27;)</span><br><span class="line">    available=$(free -m | awk &#x27;&#123;if(NR==2)printf &quot;%1.f&quot;,$NF/1024&#125;&#x27;)</span><br><span class="line">    echo &quot;内存 - 总大小: $&#123;total&#125;G , 已使用: $&#123;used&#125;G , 剩余: $&#123;available&#125;G&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件系统</span></span><br><span class="line">function disk() &#123;</span><br><span class="line">    fs=$(df -h | awk &#x27;/^\/dev/&#123;print $1&#125;&#x27;)</span><br><span class="line">    for p in $&#123;fs&#125;;do</span><br><span class="line">      mounted=$(df -h | awk -v p=$p &#x27;$1==p&#123;print $NF&#125;&#x27;)</span><br><span class="line">      size=$(df -h | awk -v p=$p &#x27;$1==p&#123;print $2&#125;&#x27;)</span><br><span class="line">      used=$(df -h | awk -v p=$p &#x27;$1==p&#123;print $3&#125;&#x27;)</span><br><span class="line">      used_percent=$(df -h | awk -v p=$p &#x27;$1==p&#123;print $5&#125;&#x27;)</span><br><span class="line">      echo &quot;硬盘 - 挂载点: $&#123;mounted&#125; , 总大小: $&#123;size&#125; , 已使用: $&#123;used&#125; , 使用率: $&#123;used_percent&#125;&quot;</span><br><span class="line">    done</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">TCP状态</span></span><br><span class="line">function tcp_status() &#123;</span><br><span class="line">    yum install net-tools -y</span><br><span class="line">    summary=$(netstat -antp | awk &#x27;&#123;a[$6]++&#125;END&#123;for(i in a)printf i&quot;:&quot;a[i]&quot; &quot;&#125;&#x27;)</span><br><span class="line">    echo &quot;TCP连接状态 - $&#123;summary&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">cpu</span><br><span class="line">memory</span><br><span class="line">disk</span><br><span class="line">tcp_status</span><br></pre></td></tr></table></figure><h4 id="5-找出占用CPU-x2F-内存过高的进程"><a href="#5-找出占用CPU-x2F-内存过高的进程" class="headerlink" title="5.找出占用CPU&#x2F;内存过高的进程"></a>5.找出占用CPU&#x2F;内存过高的进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">echo &quot;-----------------cpu top 10----------------------&quot;</span><br><span class="line">ps -eo pid,pcpu,pmem,args --sort=-pcpu | head -n 10</span><br><span class="line">echo &quot;-----------------memory top 10----------------------&quot;</span><br><span class="line">ps -eo pid,pcpu,pmem,args --sort=-pmem | head -n 10</span><br></pre></td></tr></table></figure><h4 id="6-查看网卡实时流量"><a href="#6-查看网卡实时流量" class="headerlink" title="6.查看网卡实时流量"></a>6.查看网卡实时流量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">NIC=<span class="variable">$1</span> ens33</span></span><br><span class="line">NIC=$1</span><br><span class="line">echo -e &quot;In ------ Out&quot;</span><br><span class="line">while true; do</span><br><span class="line">    OLD_IN=$(awk &#x27;$0~&quot;&#x27;$&#123;NIC&#125;&#x27;&quot;&#123;print $2&#125;&#x27; /proc/net/dev)</span><br><span class="line">    OLD_OUT=$(awk &#x27;$0~&quot;&#x27;$&#123;NIC&#125;&#x27;&quot;&#123;print $10&#125;&#x27; /proc/net/dev)</span><br><span class="line">    sleep 1</span><br><span class="line">    NEW_IN=$(awk &#x27;$0~&quot;&#x27;$&#123;NIC&#125;&#x27;&quot;&#123;print $2&#125;&#x27; /proc/net/dev)</span><br><span class="line">    NEW_OUT=$(awk &#x27;$0~&quot;&#x27;$&#123;NIC&#125;&#x27;&quot;&#123;print $10&#125;&#x27; /proc/net/dev)</span><br><span class="line">    IN=$(printf &quot;%.1f%s&quot; &quot;$((($&#123;NEW_IN&#125;-$&#123;OLD_IN&#125;)/1024))&quot; &quot;KB/s&quot;)</span><br><span class="line">    OUT=$(printf &quot;%.1f%s&quot; &quot;$((($&#123;NEW_OUT&#125;-$&#123;OLD_OUT&#125;)/1024))&quot; &quot;KB/s&quot;)</span><br><span class="line">    echo &quot;$&#123;IN&#125; $&#123;OUT&#125;&quot;</span><br><span class="line">    sleep 1</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="7-远程查看服务器磁盘占用率"><a href="#7-远程查看服务器磁盘占用率" class="headerlink" title="7.远程查看服务器磁盘占用率"></a>7.远程查看服务器磁盘占用率</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">IP存放的文件</span></span><br><span class="line">HOST_INFO=host.info</span><br><span class="line">for IP in $(awk &#x27;/^[^#]/&#123;print $1&#125;&#x27; $HOST_INFO); do</span><br><span class="line">    USER=$(awk -v ip=$&#123;IP&#125; &#x27;ip==$1&#123;print $2&#125;&#x27; $HOST_INFO)</span><br><span class="line">    PORT=$(awk -v ip=$&#123;IP&#125; &#x27;ip==$1&#123;print $3&#125;&#x27; $HOST_INFO)</span><br><span class="line">    TMP_FILE=/tmp/disk.tmp</span><br><span class="line">    ssh -p $PORT $USER@IP &#x27;df -h&#x27; &gt; $&#123;TMP_FILE&#125;</span><br><span class="line">    USER_RATE_LIST=$(awk &#x27;BEGIN&#123;OFS=&quot;=&quot;&#125;/^\/dev/&#123;print $NF,int($5)&#125;&#x27; $&#123;TMP_FILE&#125;)</span><br><span class="line">    for USER_RATE in USER_RATE_LIST; do</span><br><span class="line">        PART_NAME=$&#123;USER_RATE%=*&#125;</span><br><span class="line">        USE_RATE=$&#123;USER_RATE%=*&#125;</span><br><span class="line">        if [ $&#123;USE_RATE&#125; -ge 80]; then</span><br><span class="line">            echo &quot;Warning: $PART_NAME Partition usage $&#123;USE_PATE&#125;%!&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="8-网站是否异常"><a href="#8-网站是否异常" class="headerlink" title="8.网站是否异常"></a>8.网站是否异常</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">URL_LIST=&quot;www.baidu.com www.sougou.com&quot;</span><br><span class="line">for URL in $&#123;URL_LIST&#125;; do</span><br><span class="line">    FAIL_COUNT=0</span><br><span class="line">    for ((i=1;i&lt;=3;i++)); do</span><br><span class="line">        HTTP_CODE=$(curl -o /dev/null --connect-timeout 3 -s -w &quot;%&#123;http_code&#125;&quot; $&#123;URL&#125;)</span><br><span class="line">        if [ $&#123;HTTP_CODE&#125; -eq 200 ]; then</span><br><span class="line">            echo &quot;$&#123;URL&#125; ok&quot;</span><br><span class="line">            break</span><br><span class="line">        else</span><br><span class="line">            echo &quot;$&#123;URL&#125; retry $&#123;FAIL_COUNT&#125;&quot;</span><br><span class="line">            let FAIL_COUNT++</span><br><span class="line">        fi</span><br><span class="line">    done</span><br><span class="line">    if [ $&#123;FAIL_COUNT&#125; -eq 3 ]; then</span><br><span class="line">        echo &quot;Warning: $&#123;URL&#125; Access failure!&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="9-主机远程执行命令脚本"><a href="#9-主机远程执行命令脚本" class="headerlink" title="9.主机远程执行命令脚本"></a>9.主机远程执行命令脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">COMMAND=$*</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件里输入IP 用户 端口 密码</span></span><br><span class="line">HOST_INFO=host.info</span><br><span class="line">for IP in $(awk &#x27;/^[^#]/&#123;print $1&#125;&#x27; $HOST_INFO); do</span><br><span class="line">    USER=$(awk -v ip=$IP &#x27;ip==$1&#123;print $2&#125;&#x27; $HOST_INFO)</span><br><span class="line">    PORT=$(awk -v ip=$IP &#x27;ip==$1&#123;print $3&#125;&#x27; $HOST_INFO)</span><br><span class="line">    PASS=$(awk -v ip=$IP &#x27;ip==$1&#123;print $4&#125;&#x27; $HOST_INFO)</span><br><span class="line">    expect -c &quot;</span><br><span class="line">       spawn ssh -p $PORT $USER@$IP</span><br><span class="line">       expect &#123;</span><br><span class="line">          \&quot;(yes/no)\&quot; &#123;send \&quot;yes\r\&quot;; exp_continue&#125;</span><br><span class="line">          \&quot;password:\&quot; &#123;send \&quot;$PASS\r\&quot;; exp_continue&#125;</span><br><span class="line">          \&quot;$USER@*\&quot; &#123;send \&quot;$COMMAND\r exit\r\&quot;; exp_continue&#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &quot;</span><br><span class="line">    echo &quot;-------------------&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="10-一键部署LNMP"><a href="#10-一键部署LNMP" class="headerlink" title="10.一键部署LNMP"></a>10.一键部署LNMP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line">NGINX_V=nginx-1.18.0</span><br><span class="line">PHP_V=5.6.36</span><br><span class="line">TMP_DIR=/tmp</span><br><span class="line">INSTALL_DIR=/usr/local</span><br><span class="line"></span><br><span class="line">echo</span><br><span class="line">echo -e &quot;\tMenu\n&quot;</span><br><span class="line">echo -e &quot;1. Install Nginx&quot;</span><br><span class="line">echo -e &quot;2. Install PHP&quot;</span><br><span class="line">echo -e &quot;3. Install MySQL&quot;</span><br><span class="line">echo -e &quot;4. Deploy LNMP&quot;</span><br><span class="line">echo -e &quot;9. Quit&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">判断上一条命令的执行状态</span></span><br><span class="line">function command_status_check() &#123;</span><br><span class="line">    if [ $? -ne 0 ]; then</span><br><span class="line">        echo $1</span><br><span class="line">        exit</span><br><span class="line">    fi </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装nginx</span></span><br><span class="line">function install_nginx() &#123;</span><br><span class="line">    cd $&#123;TMP_DIR&#125;</span><br><span class="line">    yum install -y gcc gcc-c++ make openssl-devel pcre-devel wget</span><br><span class="line">    wget http://nginx.org/download/nginx-$&#123;NGINX_V&#125;.tar.gz</span><br><span class="line">    tar zxf $&#123;NGINX_V&#125;.tar.gz</span><br><span class="line">    cd $&#123;NGINX_V&#125;</span><br><span class="line">    useradd -r -s /sbin/nologin nginx</span><br><span class="line">    ./configure --prefix=$&#123;INSTALL_DIR&#125;/nginx \</span><br><span class="line">    --user=nginx \</span><br><span class="line">    --group=nginx \</span><br><span class="line">    --with-http_ssl_module \</span><br><span class="line">    --with-http_v2_module \</span><br><span class="line">    --with-http_realip_module \</span><br><span class="line">    --with-http_stub_status_module \</span><br><span class="line">    --with-http_gzip_static_module \</span><br><span class="line">    --with-pcre \</span><br><span class="line">    --with-stream \</span><br><span class="line">    --with-stream_ssl_module \</span><br><span class="line">    --with-stream_realip_module</span><br><span class="line">    command_status_check &quot;Nginx - 平台环境检查失败！&quot;</span><br><span class="line">    make -j 4</span><br><span class="line">    command_status_check &quot;Nginx - 编译失败！&quot;</span><br><span class="line">    make install</span><br><span class="line">    command_status_check &quot;Nginx - 安装失败！&quot;</span><br><span class="line">    chown -R nginx.nginx $&#123;INSTALL_DIR&#125;/nginx</span><br><span class="line">    mkdir -p $&#123;INSTALL_DIR&#125;/nginx/conf/vhost</span><br><span class="line">    alias cp=cp ; cp -rf $&#123;TMP_DIR&#125;/$&#123;NGINX_V&#125;/conf/nginx.conf $&#123;INSTALL_DIR&#125;/nginx/conf</span><br><span class="line">    rm -rf $&#123;INSTALL_DIR&#125;/nginx/html/*</span><br><span class="line">    echo &quot;ok&quot; &gt; $&#123;INSTALL_DIR&#125;/nginx/html/status.html</span><br><span class="line">    echo &#x27;&lt;?php echo &quot;ok&quot;?&gt;&#x27; &gt; $&#123;INSTALL_DIR&#125;/nginx/html/status.php</span><br><span class="line">    ln -s $&#123;INSTALL_DIR&#125;/nginx/sbin/nginx /usr/bin/</span><br><span class="line">    nginx -v</span><br><span class="line">    nginx</span><br><span class="line">    command_status_check &quot;Nginx - 启动失败！&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装PHP</span></span><br><span class="line">function install_php() &#123;</span><br><span class="line">    cd $&#123;TMP_DIR&#125;</span><br><span class="line">    yum install -y gcc gcc-c++ make gd-devel libxml2-devel \</span><br><span class="line">        libcurl-devel libjpeg-devel libpng-devel openssl-devel \</span><br><span class="line">        libmcrypt-devel libxslt-devel libtidy-devel</span><br><span class="line">    wget http://docs.php.net/distributions/php-$&#123;PHP_V&#125;.tar.gz</span><br><span class="line">    tar zxf php-$&#123;PHP_V&#125;.tar.gz</span><br><span class="line">    cd php-$&#123;PHP_V&#125;</span><br><span class="line">    ./configure --prefix=$&#123;INSTALL_DIR&#125;/php \</span><br><span class="line">    --with-config-file-path=$&#123;INSTALL_DIR&#125;/php/etc \</span><br><span class="line">    --enable-fpm --enable-opcache \</span><br><span class="line">    --with-mysql --with-mysqli --with-pdo-mysql \</span><br><span class="line">    --with-openssl --with-zlib --with-curl --with-gd \</span><br><span class="line">    --with-jpeg-dir --with-png-dir --with-freetype-dir \</span><br><span class="line">    --enable-mbstring --enable-hash</span><br><span class="line">    command_status_check &quot;PHP - 平台环境检查失败！&quot;</span><br><span class="line">    make -j 4 </span><br><span class="line">    command_status_check &quot;PHP - 编译失败！&quot;</span><br><span class="line">    make install</span><br><span class="line">    command_status_check &quot;PHP - 安装失败！&quot;</span><br><span class="line">    cp php.ini-production $&#123;INSTALL_DIR&#125;/php/etc/php.ini</span><br><span class="line">    cp sapi/fpm/php-fpm.conf $&#123;INSTALL_DIR&#125;/php/etc/php-fpm.conf</span><br><span class="line">    cp sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm</span><br><span class="line">    chmod +x /etc/init.d/php-fpm</span><br><span class="line">    /etc/init.d/php-fpm start</span><br><span class="line">    command_status_check &quot;PHP - 启动失败！&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装MySQL</span></span><br><span class="line">function install_mysql() &#123;</span><br><span class="line">    . /etc/init.d/functions</span><br><span class="line">    mkdir /application</span><br><span class="line">    wget https://downloads.mysql.com/archives/get/p/23/file/mysql-5.6.40-linux-glibc2.12-x86_64.tar.gz &amp;&gt; /dev/null&amp;&amp; action &quot;安装成功&quot; || &#123; action &quot;安装所需包失败，请检测包或网络配置&quot; false;exit;&#125;</span><br><span class="line">    tar xzvf mysql-5.6.40-linux-glibc2.12-x86_64.tar.gz &amp;&gt; /dev/null</span><br><span class="line">    mv mysql-5.6.40-linux-glibc2.12-x86_64 /application/mysql-5.6.40</span><br><span class="line">    ln -s /application/mysql-5.6.40 /application/mysql</span><br><span class="line">    cd /application/mysql/support-files</span><br><span class="line">    \cp my-default.cnf /etc/my.cnf &amp;&gt;/dev/null</span><br><span class="line">    cp mysql.server /etc/init.d/mysqld &amp;&gt;/dev/null</span><br><span class="line">    cd /application/mysql/scripts</span><br><span class="line"></span><br><span class="line">    if id mysql &amp;&gt; /dev/null;then</span><br><span class="line">       action &quot;mysql 用户已经存在&quot; false</span><br><span class="line">    else</span><br><span class="line">       useradd mysql -s /sbin/nologin -M</span><br><span class="line">       action &quot;mysql 用户创建成功&quot;</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    yum -y install autoconf &amp;&gt; /dev/null</span><br><span class="line">    /application/mysql/scripts/mysql_install_db --user=mysql --basedir=/application/mysql --data=/application/mysql/data &amp;&gt;/dev/null &amp;&amp; action &quot;初始化成功&quot; || &#123; action &quot;初始化失败，请检测初始化配置&quot; false;exit;&#125;</span><br><span class="line">    echo &#x27;export PATH=&quot;/application/mysql/bin:$PATH&quot;&#x27; &gt; /etc/profile.d/mysql.sh</span><br><span class="line">    source /etc/profile &amp;&amp; action &quot;环境变量添加成功&quot; || &#123; action &quot;环境变量添加失败&quot; false;exit;&#125;</span><br><span class="line">    sed -i &#x27;s#/usr/local#/application#g&#x27; /etc/init.d/mysqld /application/mysql/bin/mysqld_safe</span><br><span class="line">    cat &gt; /usr/lib/systemd/system/mysqld.service &lt;&lt;EOF</span><br><span class="line">        [Unit]</span><br><span class="line">        Description=MySQL Server</span><br><span class="line">        Documentation=man:mysqld(8)</span><br><span class="line">        Documentation=https://dev.mysql.com/doc/refman/en/using-systemd.html</span><br><span class="line">        After=network.target</span><br><span class="line">        After=syslog.target</span><br><span class="line">        [Install]</span><br><span class="line">        WantedBy=multi-user.target</span><br><span class="line">        [Service]</span><br><span class="line">        User=mysql</span><br><span class="line">        Group=mysql</span><br><span class="line">        ExecStart=/application/mysql/bin/mysqld --defaults-file=/etc/my.cnf</span><br><span class="line">        LimitNOFILE = 5000</span><br><span class="line">EOF</span><br><span class="line">    cat &gt;&gt; /etc/my.cnf &lt;&lt;EOF</span><br><span class="line">        basedir = /application/mysql/</span><br><span class="line">        datadir = /application/mysql/data</span><br><span class="line">EOF</span><br><span class="line">    systemctl daemon-reload</span><br><span class="line">    /etc/init.d/mysqld start  &amp;&gt; /dev/null &amp;&amp; action &quot;mysql 服务启动成功&quot; || &#123; action &quot;mysql 服务启动失败&quot; false;exit; &#125;</span><br><span class="line">    systemctl enable mysqld &amp;&amp; systemctl stop firewalld &amp;&amp; systemctl disable firewalld</span><br><span class="line">    /application/mysql/bin/mysqladmin -uroot password &#x27;123456&#x27; &amp;&amp; action &quot;mysql 密码设置成功&quot; || &#123; action &quot;mysql 密码设置失败&quot; false;exit; &#125;</span><br><span class="line">    /application/mysql/bin/mysql -uroot -p123456</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">交互菜单</span></span><br><span class="line">read -p &quot;请输入编号：&quot; number</span><br><span class="line">case $&#123;number&#125; in</span><br><span class="line">    1)</span><br><span class="line">        install_nginx;;</span><br><span class="line">    2)</span><br><span class="line">        install_php;;</span><br><span class="line">    3)</span><br><span class="line">        install_mysql;;</span><br><span class="line">    4)</span><br><span class="line">        install_nginx</span><br><span class="line">        install_php</span><br><span class="line">        ;;</span><br><span class="line">    9)</span><br><span class="line">        exit;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h4 id="11-MySQL主从是否正常"><a href="#11-MySQL主从是否正常" class="headerlink" title="11.MySQL主从是否正常"></a>11.MySQL主从是否正常</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span>  </span><br><span class="line">HOST=localhost</span><br><span class="line">USER=root</span><br><span class="line">PASSWD=123456</span><br><span class="line">IO_SQL_STATUS=$(mysql -h$HOST -u$USER -p$PASSWD -e &#x27;show slave status\G&#x27; 2&gt;/dev/null |awk &#x27;/Slave_.*_Running:/&#123;print $1$2&#125;&#x27;)</span><br><span class="line">for i in $&#123;IO_SQL_STATUS&#125;; do</span><br><span class="line">    THREAD_STATUS_NAME=$&#123;i%:*&#125;</span><br><span class="line">    THREAD_STATUS=$&#123;i#*:&#125;</span><br><span class="line">    if [ &quot;$&#123;THREAD_STATUS&#125;&quot; != &quot;Yes&quot; ]; then</span><br><span class="line">        echo &quot;Error: MySQL Master-Slave $&#123;THREAD_STATUS_NAME&#125; status is $&#123;THREAD_STATUS&#125;!&quot; |mail -s &quot;Master-Slave Staus&quot; 邮箱</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="12-MySql数据库备份"><a href="#12-MySql数据库备份" class="headerlink" title="12.MySql数据库备份"></a>12.MySql数据库备份</h4></li><li>分库备份<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -pxxx -B A &gt; A.sql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">DATE=$(date +%F_%H-%M-%S)</span><br><span class="line">HOST=localhost</span><br><span class="line">USER=backup</span><br><span class="line">PASS=123456</span><br><span class="line">BACKUP_DIR=/data/db_backup</span><br><span class="line">DB_LIST=$(mysql -h$&#123;HOST&#125; -u$&#123;USER&#125; -p$&#123;PASS&#125; -s -e &quot;show databases;&quot; 2&gt;/dev/null |egrep -v &quot;Database|information_schema|mysql|performance_schema|sys&quot;)</span><br><span class="line"> </span><br><span class="line">for DB in $&#123;DB_LIST&#125;; do</span><br><span class="line">    BACKUP_NAME=$&#123;BACKUP_DIR&#125;/$&#123;DB&#125;_$&#123;DATE&#125;.sql</span><br><span class="line">    if ! mysqldump -h$&#123;HOST&#125; -u$&#123;USER&#125; -p$&#123;PASS&#125; -B $&#123;DB&#125; &gt; $&#123;BACKUP_NAME&#125; 2&gt;/dev/null; then</span><br><span class="line">        echo &quot;$BACKUP_NAME 备份失败!&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li>分表备份<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -pxxx -A t &gt; t.sql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">DATE=$(date +%F_%H-%M-%S)</span><br><span class="line">HOST=localhost</span><br><span class="line">USER=backup</span><br><span class="line">PASS=123456</span><br><span class="line">BACKUP_DIR=/data/db_backup</span><br><span class="line">DB_LIST=$(mysql -h$&#123;HOST&#125; -u$&#123;USER&#125; -p$&#123;PASS&#125; -s -e &quot;show databases;&quot; 2&gt;/dev/null |egrep -v &quot;Database|information_schema|mysql|performance_schema|sys&quot;)</span><br><span class="line"> </span><br><span class="line">for DB in $&#123;DB_LIST&#125;; do</span><br><span class="line">    BACKUP_DB_DIR=$&#123;BACKUP_DIR&#125;/$&#123;DB&#125;_$&#123;DATE&#125;</span><br><span class="line">    [ ! -d $&#123;BACKUP_DB_DIR&#125; ] &amp;&amp; mkdir -p $&#123;BACKUP_DB_DIR&#125; &amp;&gt;/dev/null</span><br><span class="line">    TABLE_LIST=$(mysql -h$&#123;HOST&#125; -u$&#123;USER&#125; -p$&#123;PASS&#125; -s -e &quot;use $&#123;DB&#125;;show tables;&quot; 2&gt;/dev/null)</span><br><span class="line">    for TABLE in $&#123;TABLE_LIST&#125;; do</span><br><span class="line">        BACKUP_NAME=$&#123;BACKUP_DB_DIR&#125;/$&#123;TABLE&#125;.sql </span><br><span class="line">        if ! mysqldump -h$&#123;HOST&#125; -u$&#123;USER&#125; -p$&#123;PASS&#125; $&#123;DB&#125; $&#123;TABLE&#125; &gt; $&#123;BACKUP_NAME&#125; 2&gt;/dev/null; then</span><br><span class="line">            echo &quot;$BACKUP_NAME 备份失败!&quot;</span><br><span class="line">        fi</span><br><span class="line">    done</span><br></pre></td></tr></table></figure><h4 id="13-Nginx访问日志分析"><a href="#13-Nginx访问日志分析" class="headerlink" title="13.Nginx访问日志分析"></a>13.Nginx访问日志分析</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">LOG_FILE=$1</span><br><span class="line">echo &quot;统计访问最多的10个IP&quot;</span><br><span class="line">awk &#x27;&#123;a[$1]++&#125;END&#123;print &quot;UV:&quot;,length(a);for(v in a)print v,a[v]&#125;&#x27; $&#123;LOG_FILE&#125; |sort -k2 -nr |head -10</span><br><span class="line">echo &quot;----------------------&quot;</span><br><span class="line">echo &quot;统计时间段访问最多的IP&quot;</span><br><span class="line">awk &#x27;$4&gt;=&quot;[01/Dec/2021:14:25:54&quot; &amp;&amp; $4&lt;=&quot;[27/Nov/2021:17:25:34&quot;&#123;a[$1]++&#125;END&#123;for(v in a)print v,a[v]&#125;&#x27; $&#123;LOG_FILE&#125; |sort -k2 -nr|head -10</span><br><span class="line">echo &quot;----------------------&quot;</span><br><span class="line">echo &quot;统计访问最多的10个页面&quot;</span><br><span class="line">awk &#x27;&#123;a[$7]++&#125;END&#123;print &quot;PV:&quot;,length(a);for(v in a)&#123;if(a[v]&gt;10)print v,a[v]&#125;&#125;&#x27; $&#123;LOG_FILE&#125; |sort -k2 -nr</span><br><span class="line">echo &quot;----------------------&quot;</span><br><span class="line">echo &quot;统计访问页面状态码数量&quot;</span><br><span class="line">awk &#x27;&#123;a[$7&quot; &quot;$9]++&#125;END&#123;for(v in a)&#123;if(a[v]&gt;5)print v,a[v]&#125;&#125;&#x27; $&#123;LOG_FILE&#125; |sort -k3 -nr</span><br></pre></td></tr></table></figure><h4 id="14-Nginx访问日志自动按天（周、月）切割"><a href="#14-Nginx访问日志自动按天（周、月）切割" class="headerlink" title="14.Nginx访问日志自动按天（周、月）切割"></a>14.Nginx访问日志自动按天（周、月）切割</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">nginx日志目录</span></span><br><span class="line">LOG_DIR=/www/server/nginx/logs</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取到上一天的时间</span></span><br><span class="line">YESTERDAY_TIME=$(date -d &quot;yesterday&quot; +%F)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">归档日志取时间</span></span><br><span class="line">LOG_MONTH_DIR=$&#123;LOG_DIR&#125;/$(date +&quot;%Y-%m&quot;)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">归档日志的名称</span></span><br><span class="line">LOG_FILE_LIST=&quot;access.log&quot;</span><br><span class="line"> </span><br><span class="line">for LOG_FILE in $&#123;LOG_FILE_LIST&#125;; do</span><br><span class="line">    [ ! -d $&#123;LOG_MONTH_DIR&#125; ] &amp;&amp; mkdir -p $&#123;LOG_MONTH_DIR&#125;</span><br><span class="line">    mv $&#123;LOG_DIR&#125;/$&#123;LOG_FILE&#125; $&#123;LOG_MONTH_DIR&#125;/$&#123;LOG_FILE&#125;_$&#123;YESTERDAY_TIME&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">kill -USR1 $(cat $&#123;LOG_DIR&#125;/nginx.pid)</span><br></pre></td></tr></table></figure><h4 id="15-一键编译安装Redis脚本"><a href="#15-一键编译安装Redis脚本" class="headerlink" title="15.一键编译安装Redis脚本"></a>15.一键编译安装Redis脚本</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">. /etc/init.d/functions</span><br><span class="line">VERSION=redis-5.0.9</span><br><span class="line">DIR1=/apps/redis</span><br><span class="line">PASSWORD=centos</span><br><span class="line">install() &#123;</span><br><span class="line">    yum -y install make wget gcc tcl &amp;&gt; /dev/null || &#123; action &quot;安装所需包失败，请检测包或网络配置&quot; false;exit;&#125;</span><br><span class="line">    wget http://download.redis.io/releases/$&#123;VERSION&#125;.tar.gz &amp;&gt; /dev/null || &#123;</span><br><span class="line">    action &quot;Redis 源码下载失败&quot; false; exit; &#125;</span><br><span class="line">    tar xf $VERSION.tar.gz</span><br><span class="line">    cd $VERSION/</span><br><span class="line">    make -j 2 &amp;&gt; /dev/null &amp;&amp; make PREFIX=$&#123;DIR1&#125; install &amp;&gt; /dev/null &amp;&amp; action &quot;Redis 编译安装成功&quot; || &#123; action &quot;Redis 编译安装失败&quot; false;exit; &#125;</span><br><span class="line">    ln -s $&#123;DIR1&#125;/bin/* /usr/bin/</span><br><span class="line">    mkdir -p $&#123;DIR1&#125;/&#123;etc,data,log,run&#125;</span><br><span class="line">    cd</span><br><span class="line">    cp $&#123;VERSION&#125;/redis.conf $&#123;DIR1&#125;/etc</span><br><span class="line">    sed -i -e &quot;s/bind 127.0.0.1/bind 0.0.0.0/&quot; -e &quot;/# requirepass/a requirepass $&#123;PASSWORD&#125;&quot; -e &quot;/^dir .*/c dir $&#123;DIR1&#125;/data/&quot; -e &quot;/logfile .*/c logfile $&#123;DIR1&#125;/log/redis_6379.log&quot; -e &quot;/^pidfile .*/c pidfile $&#123;DIR1&#125;/run/redis_6379.pid&quot; $&#123;DIR1&#125;/etc/redis.conf</span><br><span class="line">    if id redis &amp;&gt; /dev/null;then</span><br><span class="line">        action &quot;redis 用户已经存在&quot; false</span><br><span class="line">    else</span><br><span class="line">        useradd -r -s /sbin/nologin redis</span><br><span class="line">        action &quot;redis 用户创建成功&quot;</span><br><span class="line">    fi</span><br><span class="line">    chown -R redis.redis $&#123;DIR1&#125;</span><br><span class="line">    cat &gt;&gt; /etc/sysctl.conf &lt;&lt;EOF</span><br><span class="line">        net.core.somaxconn = 1024</span><br><span class="line">        vm.overcommit_memory = 1</span><br><span class="line">    EOF</span><br><span class="line">    sysctl -p</span><br><span class="line">    echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">    echo &quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot; &gt;&gt; /etc/rc.d/rc.local</span><br><span class="line">    chmod +x /etc/rc.d/rc.local /etc/rc.d/rc.local</span><br><span class="line">    cat &gt; /lib/systemd/system/redis.service &lt;&lt;EOF</span><br><span class="line">        [Unit]</span><br><span class="line">        Description=Redis persistent key-value database</span><br><span class="line">        After=network.target</span><br><span class="line">        [Service]</span><br><span class="line">        ExecStart=$&#123;DIR1&#125;/bin/redis-server $&#123;DIR1&#125;/etc/redis.conf --supervised</span><br><span class="line">        systemd</span><br><span class="line">        ExecStop=/bin/kill -s QUIT \$MAINPID</span><br><span class="line">        Type=notify</span><br><span class="line">        User=redis</span><br><span class="line">        Group=redis</span><br><span class="line">        RuntimeDirectory=redis</span><br><span class="line">        RuntimeDirectoryMode=0755</span><br><span class="line">        [Install]</span><br><span class="line">        WantedBy=multi-user.target</span><br><span class="line">    EOF</span><br><span class="line">    systemctl daemon-reload</span><br><span class="line">    systemctl enable --now redis &amp;&gt; /dev/null &amp;&amp; action &quot;redis 服务启动成功&quot; || &#123; action &quot;redis 服务启动失败&quot; false;exit; &#125;</span><br><span class="line">&#125;</span><br><span class="line">install</span><br></pre></td></tr></table></figure><h4 id="16-自动发布Java"><a href="#16-自动发布Java" class="headerlink" title="16.自动发布Java"></a>16.自动发布Java</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">DATE=$(date +%F_%T)</span><br><span class="line">TOMCAT_NAME=$1</span><br><span class="line">TOMCAT_DIR=/usr/local/$TOMCAT_NAME</span><br><span class="line">ROOT=$TOMCAT_DIR/webapps/ROOT</span><br><span class="line">BACKUP_DIR=/data/backup</span><br><span class="line">WORK_DIR=/tmp</span><br><span class="line">PROJECT_NAME=tomcat-java-demo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取代码</span></span><br><span class="line">cd $&#123;WORK_DIR&#125;</span><br><span class="line">if [ ! -d $&#123;PROJECT_NAME&#125; ]; then</span><br><span class="line">   git clone https://github.com/lizhenliang/tomcat-java-demo</span><br><span class="line">   cd $&#123;PROJECT_NAME&#125;</span><br><span class="line">else</span><br><span class="line">   cd $&#123;PROJECT_NAME&#125;</span><br><span class="line">   git pull</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建</span></span><br><span class="line">mvn clean package -Dmaven.test.skip=true</span><br><span class="line">if [ $? -ne 0 ]; then</span><br><span class="line">   echo &quot;maven build failure!&quot;</span><br><span class="line">   exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署</span></span><br><span class="line">TOMCAT_PID=$(ps -ef |grep &quot;$&#123;TOMCAT_NAME&#125;&quot; |egrep -v &quot;grep|$$&quot; |awk &#x27;NR==1&#123;print $2&#125;&#x27;)</span><br><span class="line">[ -n &quot;$&#123;TOMCAT_PID&#125;&quot; ] &amp;&amp; kill -9 $&#123;TOMCAT_PID&#125;</span><br><span class="line">[ -d $&#123;ROOT&#125; ] &amp;&amp; mv $&#123;ROOT&#125; $&#123;BACKUP_DIR&#125;/$&#123;&#123;TOMCAT_NAME&#125;&#125;_ROOT$&#123;DATE&#125;</span><br><span class="line">unzip $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/target/*.war -d $&#123;ROOT&#125;</span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;TOMCAT_DIR&#125;/bin/startup.sh</span></span><br></pre></td></tr></table></figure><h4 id="17-自动发布PHP项目"><a href="#17-自动发布PHP项目" class="headerlink" title="17.自动发布PHP项目"></a>17.自动发布PHP项目</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">DATE=$(date +%F_%T)</span><br><span class="line">WWWROOT=/usr/local/nginx/html/$1</span><br><span class="line">BACKUP_DIR=/data/backup</span><br><span class="line">WORK_DIR=/tmp</span><br><span class="line">PROJECT_NAME=php-demo</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取代码</span></span><br><span class="line">cd $&#123;WORK_DIR&#125;</span><br><span class="line">if [ ! -d $&#123;PROJECT_NAME&#125; ]; then</span><br><span class="line">   git clone https://github.com/lizhenliang/php-demo</span><br><span class="line">   cd $&#123;PROJECT_NAME&#125;</span><br><span class="line">else</span><br><span class="line">   cd $&#123;PROJECT_NAME&#125;</span><br><span class="line">   git pull</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署</span></span><br><span class="line">if [ ! -d $&#123;WWWROOT&#125; ]; then</span><br><span class="line">   mkdir -p $&#123;WWWROOT&#125;</span><br><span class="line">   rsync -avz --exclude=.git $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/* $&#123;WWWROOT&#125;</span><br><span class="line">else</span><br><span class="line">   rsync -avz --exclude=.git $&#123;WORK_DIR&#125;/$&#123;PROJECT_NAME&#125;/* $&#123;WWWROOT&#125;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="18-自动屏蔽攻击IP"><a href="#18-自动屏蔽攻击IP" class="headerlink" title="18.自动屏蔽攻击IP"></a>18.自动屏蔽攻击IP</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">DATE=$(date +%d/%b/%Y:%H:%M)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">nginx日志</span></span><br><span class="line">LOG_FILE=/usr/local/nginx/logs/demo2.access.log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">分析ip的访问情况</span></span><br><span class="line">ABNORMAL_IP=$(tail -n5000 $LOG_FILE |grep $DATE |awk &#x27;&#123;a[$1]++&#125;END&#123;for(i in a)if(a[i]&gt;10)print i&#125;&#x27;)</span><br><span class="line">for IP in $ABNORMAL_IP; do</span><br><span class="line">    if [ $(iptables -vnL |grep -c &quot;$IP&quot;) -eq 0 ]; then</span><br><span class="line">        iptables -I INPUT -s $IP -j DROP</span><br><span class="line">        echo &quot;$(date +&#x27;%F_%T&#x27;) $IP&quot; &gt;&gt; /tmp/drop_ip.log</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="19-目录入侵检测与告警"><a href="#19-目录入侵检测与告警" class="headerlink" title="19.目录入侵检测与告警"></a>19.目录入侵检测与告警</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">MON_DIR=/opt</span><br><span class="line">inotifywait -mqr --format %f -e create $MON_DIR |\</span><br><span class="line">while read files; do</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash">同步文件</span></span><br><span class="line">   rsync -avz /opt /tmp/opt</span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash">检测文件是否被修改</span></span><br><span class="line"><span class="meta prompt_">   #</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(date +&#x27;%F %T&#x27;)</span> create <span class="variable">$files</span>&quot;</span> | mail -s <span class="string">&quot;dir monitor&quot;</span> xxx@163.com</span></span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;测试网站：&lt;a href=&quot;https://tool.chinaz.com/regex&quot;&gt;https://tool.</summary>
      
    
    
    
    <category term="linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/linux/"/>
    
    
    <category term="linux" scheme="http://xczf.shop/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker</title>
    <link href="http://xczf.shop/2021/04/01/Docker/"/>
    <id>http://xczf.shop/2021/04/01/Docker/</id>
    <published>2021-04-01T11:00:41.000Z</published>
    <updated>2023-10-31T06:07:22.248Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>官网：<a href="https://docs.docker.com/get-started/overview/">https://docs.docker.com/get-started/overview/</a></p><h2 id="docker的组成"><a href="#docker的组成" class="headerlink" title="docker的组成"></a>docker的组成</h2><p>Docker主机 host：物理机或者虚拟机，运行docker服务进程和容器<br>Docker服务端 Server：守护进程，运行docker容器<br>Docker客户端 client：客户端使用docker命令或其他工具调用docker api<br>Docker仓库 registry：保存镜像的仓库，类似于git或svn这样的版本控制器<br>Docker镜像 images：镜像可以理解为创建实例使用的模板<br>Docker容器 container：容器是从镜像生成对外提供服务的一个或一组服务</p><hr><p><img src="/image/docker/1.png" alt="1"></p><hr><p><strong>docker的默认存储引擎为overlay2</strong></p><h2 id="docker安装和命令"><a href="#docker安装和命令" class="headerlink" title="docker安装和命令"></a>docker安装和命令</h2><h3 id="镜像加速配置"><a href="#镜像加速配置" class="headerlink" title="镜像加速配置"></a>镜像加速配置</h3><p><a href="http://cr.console.aliyun.com/">http://cr.console.aliyun.com/</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://c8il3sds.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装docker-ce以及客户端"><a href="#安装docker-ce以及客户端" class="headerlink" title="安装docker-ce以及客户端"></a>安装docker-ce以及客户端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install wget -y</span><br><span class="line"><span class="built_in">rm</span> -rf /etc/yum.repos.d/*</span><br><span class="line">wget -O /etc/yum.repos.d/Centos-7.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo </span><br><span class="line">yum install -y docker-ce -y</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker.service</span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><h3 id="开始：拉取一个nginx"><a href="#开始：拉取一个nginx" class="headerlink" title="开始：拉取一个nginx"></a>开始：拉取一个nginx</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line">docker images</span><br><span class="line">docker run -d -p 80:80 nginx <span class="comment"># 执行完后可以返回一个ID</span></span><br><span class="line">docker ps <span class="comment"># 查看当前运行的容器</span></span><br><span class="line">docker info <span class="comment"># 查看容器的详细信息</span></span><br><span class="line">docker <span class="built_in">exec</span> -it b6548 bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;docker nginx test&#x27;</span> &gt; index.html</span><br><span class="line">curl 192.168.3.10</span><br></pre></td></tr></table></figure><h2 id="Linux-namespace"><a href="#Linux-namespace" class="headerlink" title="Linux namespace"></a>Linux namespace</h2><p>  namespace是linux的底层概念，每个docker容器运行在同一个docker主进程并且共用同一个宿主机系统内核，各个docker容器运行在宿主机的用户空间，但是容器技术是在一个进程内实现运行指定服务的运行环境，并且还可以保护宿主机内核不受其他进程的干扰和影响。</p><h3 id="MNT-Namespace-mount-供磁盘挂载点和文件系统的隔离"><a href="#MNT-Namespace-mount-供磁盘挂载点和文件系统的隔离" class="headerlink" title="MNT Namespace(mount)  供磁盘挂载点和文件系统的隔离"></a>MNT Namespace(mount)  供磁盘挂载点和文件系统的隔离</h3><p>  容器的根文件系统都有独立的用户空间</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动俩个容器</span></span><br><span class="line">docker run -d --name nginx-1 -p 80:80 nginx</span><br><span class="line">docker run -d --name nginx-2 -p 80:80 nginx</span><br><span class="line">docker ps <span class="comment"># 查看进程</span></span><br><span class="line"><span class="comment"># 进入容器并创建文件</span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx-1 bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello nginx-1&#x27;</span> &gt; /opt/test1</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">docker <span class="built_in">exec</span> -it nginx-2 bash</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;hello nginx-2&#x27;</span> &gt; /opt/test1</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">find / -name test1 <span class="comment"># 会发现有四个文件，所以不同容器的相同文件并不会冲突</span></span><br></pre></td></tr></table></figure><h3 id="IPC-Namespace-通信的隔离"><a href="#IPC-Namespace-通信的隔离" class="headerlink" title="IPC Namespace  通信的隔离"></a>IPC Namespace  通信的隔离</h3><p>  包含了运行内核的名称、版本、底层体系结构类型等信息用于系统表示，其中包含了hostname和域名，它使得一个容器拥有属于自己hostname标识，这个主机名标识独立于宿主机系统和其上的其他容器。</p><h3 id="PID-Namespace-进程间通信的隔离"><a href="#PID-Namespace-进程间通信的隔离" class="headerlink" title="PID Namespace 进程间通信的隔离"></a>PID Namespace 进程间通信的隔离</h3><p>  每个容器内有一个父进程来管理其下属的进程，多个容器的进程通PID namespace进程隔离</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it nginx-1 bash</span><br><span class="line">apt update</span><br><span class="line">apt install iputils-ping <span class="comment"># ps命令</span></span><br><span class="line">ps -ef</span><br><span class="line"><span class="comment"># 返回宿主机</span></span><br><span class="line">yum install psmic</span><br><span class="line">pstree -s <span class="comment"># 查看进程树</span></span><br></pre></td></tr></table></figure><h3 id="Net-Namespace-网络的隔离"><a href="#Net-Namespace-网络的隔离" class="headerlink" title="Net Namespace 网络的隔离"></a>Net Namespace 网络的隔离</h3><p>  容器都类似于虚拟机一样有自己的网卡、监听端口、TCP&#x2F;IP协议栈，可以直接访问网络</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install bridge-utils -y</span><br><span class="line">brctl show</span><br><span class="line">ifconfig <span class="comment"># 查看宿主机的网络信息</span></span><br></pre></td></tr></table></figure><h3 id="User-Namespace"><a href="#User-Namespace" class="headerlink" title="User Namespace"></a>User Namespace</h3><p>  允许在各个宿主机的各个容器空间内创建相同的用户名以及相同的uid和gid</p><h2 id="Linux-control-groups"><a href="#Linux-control-groups" class="headerlink" title="Linux control groups"></a>Linux control groups</h2><p>  容器内部，如果不对其做任何资源限制，则宿主机会允许其占用无限大的内存空间，有时候会因<br>为代码bug程序会一直申请内存，直到把宿主机内存占完，为了避免此类的问题出现，宿主机有必要对容器进行资源分配限制，Linux Cgroups的全称是Linux control Groups，它最重要的作用就是限制一个进程组能够使用的资源上线。<br>** 默认开启 **</p><h3 id="配置文件位置"><a href="#配置文件位置" class="headerlink" title="配置文件位置"></a>配置文件位置</h3><pre><code>/boot/config-3.10.0-957.el7.x86_64</code></pre><h4 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h4><p><a href="https://blog.csdn.net/qyf158236/article/details/110475457">https://blog.csdn.net/qyf158236/article/details/110475457</a></p><h2 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker search NAME <span class="comment"># 搜索镜像</span></span><br><span class="line">docker pull NAME:TAG <span class="comment"># 下载镜像 # 不输入TAG默认为最新</span></span><br><span class="line">docker images <span class="comment"># 查看本地所有镜像</span></span><br><span class="line"><span class="comment"># REPOSITORY：镜像仓库名称</span></span><br><span class="line"><span class="comment"># TAG：镜像的标签信息</span></span><br><span class="line"><span class="comment"># 镜像ID：唯一用来标识镜像，如果两个镜像的ID相同，说明他们实际上指向了同一个镜像，只是具有不同标签名称而已</span></span><br><span class="line"><span class="comment"># CREATED：创建时间，镜像的最后更新时间</span></span><br><span class="line"><span class="comment"># SIZE：镜像大小，镜像往往体积都较小</span></span><br><span class="line">docker tag centos:latest mycentos:latest <span class="comment"># 为本地镜像任意添加新的标签</span></span><br><span class="line">docker inspect <span class="comment"># 获取镜像的详细信息</span></span><br><span class="line">docker <span class="built_in">history</span> <span class="comment"># 列出各层创建信息</span></span><br><span class="line">docker rmi NAME:TAG/ID <span class="comment"># 删除镜像</span></span><br></pre></td></tr></table></figure><h3 id="镜像导入导出"><a href="#镜像导入导出" class="headerlink" title="镜像导入导出"></a>镜像导入导出</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>将镜像从本地导出为一个压缩文件，然后复制到其他服务器进行导入使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one</span></span><br><span class="line">docker save centos:latest -o /opt/centos.tar.gz</span><br><span class="line"><span class="built_in">ls</span> -a /opt/centos.tar.gz</span><br><span class="line"><span class="comment"># two</span></span><br><span class="line">docker save centos:latest &gt; /opt/centos-1.tar.gz</span><br></pre></td></tr></table></figure><p>导出容器是指，导出一个已经创建的容器到一个文件，不管此时这个容器是否处于运行状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">export</span> -o /opt/centos.tar ID</span><br></pre></td></tr></table></figure><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>导出的镜像发到需要导入的docker服务器中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># one </span></span><br><span class="line">docker load -i /opt/centos.tar.gz</span><br><span class="line"><span class="comment"># two</span></span><br><span class="line">docker load &lt; /opt/centos.tar.gz</span><br></pre></td></tr></table></figure><p>导出的文件可以使用docker import命令导入变成镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import /opt/centos.tar NAME:VERSION</span><br></pre></td></tr></table></figure><h3 id="docker-create"><a href="#docker-create" class="headerlink" title="docker create"></a>docker create</h3><p>期处于停滞状态，使用docker start命令启动它</p><p><strong>-d 是否在后台运行容器，默认为否<br>-i 保持标准输入打开<br>-p 指定如何映射到本地主机端口<br>-t 分配一个终端<br>–rm 容器推出后是否自动删除，不能跟-d同时使用<br>–name 指定容器的别名</strong></p><h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><p>创建容器后通过start命令来启动也可以通过docker run直接新建并启动容器</p><h3 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式1，本地端口80映射到容器80端口</span></span><br><span class="line">docker run -p 80:80 --name nginx-1 nginx:latest</span><br><span class="line"><span class="comment"># 方式2，本地ip：本地端口：容器端口</span></span><br><span class="line">docker run -p 192.168.175.10:80:80 --name nginx-1 nginx:latest</span><br><span class="line"><span class="comment"># 方式3，本地ip：本地随机端口：容器端口</span></span><br><span class="line">docker run -p 192.168.175.10::80 --name nginx-1 nginx:latest</span><br><span class="line"><span class="comment"># 方式4，本地ip：本地端口：容器端口/协议默认为tcp协议</span></span><br><span class="line">docker run -p 192.168.175.10:80:80/tcp --name nginx-1 nginx:latest</span><br><span class="line">docker port nginx-1 <span class="comment"># docker port nginx-1</span></span><br></pre></td></tr></table></figure><h3 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h3><h4 id="暂停容器"><a href="#暂停容器" class="headerlink" title="暂停容器"></a>暂停容器</h4><pre><code>docker pause NAME   # 挂起docker unpause NAME # 取消挂起</code></pre><h4 id="终止容器"><a href="#终止容器" class="headerlink" title="终止容器"></a>终止容器</h4><pre><code>docker stop NAME # 终止容器</code></pre><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> -f ID <span class="comment"># 删除正在运行的容器</span></span><br><span class="line"><span class="comment"># 批量删除容器</span></span><br><span class="line">docker <span class="built_in">rm</span> -f `docker ps -a -q`</span><br></pre></td></tr></table></figure><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><p>attach方式进入容器的操作都是同步显示的且exit容器将被关闭，且使用exit退出后容器关闭，不推<br>荐使用<br><strong>exec执行单次命令与进入容器，退出容器后容器还在运行<br>nsenter命令需要通过pid进入到容器内部，不过可以使用docker inspect获取到容器的pid</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nsenter</span></span><br><span class="line">vim docker_in.sh</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">docker_in</span></span>()&#123;</span><br><span class="line">DOCKER_ID=<span class="variable">$1</span></span><br><span class="line">PID=`docker inspect -f <span class="string">&quot;&#123;&#123;.State.Pid&#125;&#125;&quot;</span> <span class="variable">$&#123;DOCKER_ID&#125;</span>`</span><br><span class="line">nsenter -t <span class="variable">$&#123;PID&#125;</span> -m -u -i -n -p</span><br><span class="line">&#125;</span><br><span class="line">docker_in <span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x docker_in.sh</span><br><span class="line">./docker_in.sh 129d518869d5</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="docker镜像制作"><a href="#docker镜像制作" class="headerlink" title="docker镜像制作"></a>docker镜像制作</h2><p>docker commit适用场景：主要作用是将配置好的一些容器复用，再生成新的镜像。</p><h3 id="手动制作yum版nginx镜像"><a href="#手动制作yum版nginx镜像" class="headerlink" title="手动制作yum版nginx镜像"></a>手动制作yum版nginx镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker run -it centos bash</span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install nginx -y</span><br><span class="line">yum install vim wget pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop -y</span><br><span class="line">vim /etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">user nginx;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log /var/log/nginx/error.log;</span><br><span class="line">pid /run/nginx.pid;</span><br><span class="line">daemon off; <span class="comment"># 关闭nginx后台运行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;xc nginx&#x27;</span> &gt; /usr/share/nginx/html/index.html</span><br><span class="line"><span class="comment"># 提交镜像</span></span><br><span class="line">docker commit --<span class="built_in">help</span> <span class="comment"># 查看帮助</span></span><br><span class="line">docker commit -a <span class="string">&quot;author&quot;</span> -m <span class="string">&quot;my nginximage v1&quot;</span> ID centos_nginx:v1</span><br><span class="line">docker run -d -p 80:80 --name my_centos_nginx centos_nginx:v1 /usr/sbin/nginx</span><br></pre></td></tr></table></figure><h3 id="DockerFile制作镜像"><a href="#DockerFile制作镜像" class="headerlink" title="DockerFile制作镜像"></a>DockerFile制作镜像</h3><p>  DockerFile可以说是一种可以被Docker程序解释的脚本，DockerFile是由一条条的命令组成的，每条命令对应linux下面的一条命令，Docker程序将这些DockerFile指令再翻译成真正的linux命令，其有自己的书写方式和支持的命令，Docker程序读取DockerFile并根据指令生成Docker镜像，相比手动制作镜像的方式，DockerFile更能直观地展示镜像是怎么产生的，有了写好的各种各样的DockerFIle文件，当后期某个镜像有额外的需求时，只要在之前的DockerFile添加或者修改相应的操作即可重新生成新的Docker镜像，避免了重复手动制作镜像的麻烦。</p><h4 id="操作指令"><a href="#操作指令" class="headerlink" title="操作指令"></a>操作指令</h4><p>RUN 运行指定命令 每条RUN指令将在当前镜像基础上执行指定命令，并提交为新的镜像层<br>CMD指令用来指定启动容器时默认执行的命令（每个Dockerfile 只能有一条 CMD 命令。如果指定了多条命令，只有最后一条会被执行）<br>ADD添加内容到镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 制作nginx镜像</span></span><br><span class="line">docker pull centos:7</span><br><span class="line"><span class="built_in">mkdir</span> -pv dockerfile/&#123;web/&#123;nginx,apache&#125;,system/&#123;centos,ubuntu&#125;&#125;</span><br><span class="line"><span class="built_in">cd</span>  dockerfile/web/nginx/</span><br><span class="line">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line">vim Dockerfile</span><br><span class="line">***</span><br><span class="line"><span class="comment"># 第一行先定义基础镜像，后面的本地有效的镜像名，如果本地有会从远程仓库下载</span></span><br><span class="line">FROM centos:7</span><br><span class="line"><span class="comment"># 镜像维护者的信息,可以省略</span></span><br><span class="line">MAINTAINER xc 123456@qq.com</span><br><span class="line"><span class="comment"># 将编译安装nginx的步骤执行一遍</span></span><br><span class="line">RUN yum install -y vim wget tree lrzsz gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop</span><br><span class="line"><span class="comment"># 上传nginx压缩包</span></span><br><span class="line">ADD nginx-1.20.1.tar.gz /usr/local/src/</span><br><span class="line">RUN <span class="built_in">cd</span> /usr/local/src/nginx-1.20.1 \</span><br><span class="line">&amp;&amp; ./configure --prefix=/usr/local/nginx --with-http_sub_module \</span><br><span class="line">&amp;&amp; make \</span><br><span class="line">&amp;&amp; make install \</span><br><span class="line">&amp;&amp; <span class="built_in">cd</span> /usr/local/nginx</span><br><span class="line"><span class="comment"># 可以添加自己事先准备的配置文件</span></span><br><span class="line"><span class="comment"># ADD nginx.conf /usr/local/nginx/conf/nginx.conf</span></span><br><span class="line">RUN useradd -s /sbin/nologin nginx \</span><br><span class="line">&amp;&amp; <span class="built_in">ln</span> -sv /usr/local/nginx/sbin/nginx /usr/sbin/nginx \</span><br><span class="line">&amp;&amp; <span class="built_in">echo</span> <span class="string">&#x27;test nginx !&#x27;</span> &gt; /usr/local/nginx/html/index.html</span><br><span class="line"><span class="comment"># 声明端口号</span></span><br><span class="line">EXPOSE 80 443</span><br><span class="line">CMD [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-g&quot;</span>, <span class="string">&quot;daemon off;&quot;</span>]</span><br><span class="line">***</span><br><span class="line">docker bulid nginx:v1 .</span><br><span class="line">docker -ps</span><br><span class="line">docker run -d -it -p 80:80 nginx:v1</span><br></pre></td></tr></table></figure><h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><p>  Docker服务安装完成之后，默认在每个宿主机会生成一个名称为docker0的网卡，其ip地址都是172.17.0.1&#x2F;16，并且会生成三种不同类型的网络<br>  <strong>使用–network参数去指定网络类型，默认使用的是bridge网络类型</strong></p><h3 id="none网络类型"><a href="#none网络类型" class="headerlink" title="none网络类型"></a>none网络类型</h3><p>  在使用none模式后，docker容器不会进行任何网络配置，其没有网卡、没有ip也没有路由，因此默认无法与外界进行通信，需要手动添加网卡配置ip等，所以极少使用</p><h3 id="container网络类型"><a href="#container网络类型" class="headerlink" title="container网络类型"></a>container网络类型</h3><p>  不和宿主机共享,新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过io 网卡设备通信。</p><h3 id="host网络类型"><a href="#host网络类型" class="headerlink" title="host网络类型"></a>host网络类型</h3><p>  容器将不会获得一个独立的Network Namespace，而是和宿主机共用一个Network Namespace。容器将不会虚拟出自己的网卡，配置自己的IP等，而是使用宿主机的IP和端口。</p><h3 id="bridge网络类型"><a href="#bridge网络类型" class="headerlink" title="bridge网络类型"></a>bridge网络类型</h3><p>  会在主机上创建一个名为docker0的虚拟网桥，此主机上启动的Docker容器会连<br>接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。</p><h3 id="容器之间的互联"><a href="#容器之间的互联" class="headerlink" title="容器之间的互联"></a>容器之间的互联</h3><p>同一个宿主机上的容器之间可以通过端口映射的方式，经过宿主机中转进行互相访问呢，或者通过docker0网桥互相访问</p><h4 id="直接互联"><a href="#直接互联" class="headerlink" title="直接互联"></a>直接互联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d centos:1.8</span><br><span class="line">docker run -d -it centos:1.8</span><br><span class="line"><span class="comment"># 相互ping检查连通性</span></span><br></pre></td></tr></table></figure><h4 id="名称互联"><a href="#名称互联" class="headerlink" title="名称互联"></a>名称互联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name web1 nginx</span><br><span class="line">docker run -d -it --name web2 --<span class="built_in">link</span> web1 nginx</span><br><span class="line"><span class="comment"># 相互ping检查连通性</span></span><br></pre></td></tr></table></figure><h4 id="别名互联"><a href="#别名互联" class="headerlink" title="别名互联"></a>别名互联</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it --name web3 --<span class="built_in">link</span> web1:nginx-web1 nginx</span><br><span class="line">ping nginx-web1</span><br></pre></td></tr></table></figure><h4 id="创建自定义网络"><a href="#创建自定义网络" class="headerlink" title="创建自定义网络"></a>创建自定义网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network creare -d bridge --subnet 10.10.0.0/16 --gateway 10.10.0.1 xc-net</span><br><span class="line">docker run -d -it --name xc1 --network xc-net nginx</span><br><span class="line">docker <span class="built_in">exec</span> -it xc1 bash</span><br></pre></td></tr></table></figure><h4 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h4><p>docker单机编排工具docker-compose，docker-compose是docker容器的一种单机编排服务，docker-compose是一个管理多个容器的工具,适用于个人服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release.noarch -y</span><br><span class="line">yum install docker-compose.noarch -y</span><br><span class="line">docker-compose version <span class="comment"># 查看版本</span></span><br><span class="line">docker-compose --<span class="built_in">help</span> <span class="comment"># 相关参数</span></span><br></pre></td></tr></table></figure><p>启动单个容器,并定义数据卷挂载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /opt/docker</span><br><span class="line"><span class="built_in">cd</span> /opt/docker/</span><br><span class="line">vim docker-compose.yml</span><br><span class="line">service-nginx:</span><br><span class="line">  image: nginx</span><br><span class="line">  container_name: nginx_web1</span><br><span class="line">  volumes:</span><br><span class="line">    -/data/nginx/:/usr/share/nginx/html</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">&quot;80:80&quot;</span></span><br></pre></td></tr></table></figure><p>启动多个容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br><span class="line">service-nginx:</span><br><span class="line">  image: nginx</span><br><span class="line">  container_name: nginx_web1</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">&quot;80:80&quot;</span></span><br><span class="line"></span><br><span class="line">service-tomcat:</span><br><span class="line">  image: tomcat</span><br><span class="line">  container_name: tomcat_web1</span><br><span class="line">  ports:</span><br><span class="line">    - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h2><p>Docker Register作为Docker的核心组件之一负责镜像内容的存储与分发</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br><span class="line"><span class="built_in">mkdir</span> /docker/auth -p</span><br><span class="line">yum install httpd-tools -y</span><br><span class="line">htpasswd -Bbn xc 123456 &gt; auth/htpasswd</span><br><span class="line">docker run -d -p 5000:5000 -v /docker/auth/:/auth -e \</span><br><span class="line"><span class="string">&quot;REGISTRY_AUTH=htpasswd&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot;</span> registry</span><br><span class="line"></span><br><span class="line">docker login xc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h1&gt;&lt;p&gt;官网：&lt;a href=&quot;https://docs.docker.com/get-started/overvi</summary>
      
    
    
    
    <category term="linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/linux/"/>
    
    
    <category term="linux" scheme="http://xczf.shop/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="http://xczf.shop/2021/02/15/Redis/"/>
    <id>http://xczf.shop/2021/02/15/Redis/</id>
    <published>2021-02-15T11:00:41.000Z</published>
    <updated>2023-12-21T12:58:32.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>缓存是为了<strong>调节速度不一致的两个或多个不同的物质的速度，在中间对速度较快的一方起到一个加速访问速度较慢的一方的作用</strong><br>比如 CPU 的一级、二级缓存是保存了 CPU 最近经常访问的数据，内存是保存 CPU 经常访问硬盘的数据，而且硬盘也有大小不一的缓存，甚至是物理服务器的 raid 卡有也缓存为了起到加速 CPU 访问硬盘数据的目的，因为 CPU 的速度太快了， CPU 需要的数据硬盘往往不能在短时间内满足 CPU 的需求。<br><img src="/image/redis/1.jpg" alt="CPU"></p><h3 id="硬件缓存"><a href="#硬件缓存" class="headerlink" title="硬件缓存"></a>硬件缓存</h3><ul><li>CPU缓存<br>CPU缓存(L1的数据缓存和L1的指令缓存)、二级缓存、三级缓存</li><li>磁盘相关缓存<br>磁盘缓存：Disk Cache<br><strong>磁盘阵列缓存</strong>：Raid Cache，可使用电池防止断电丢失数据<h3 id="系统缓存"><a href="#系统缓存" class="headerlink" title="系统缓存"></a>系统缓存</h3><h4 id="buffer-与-cache"><a href="#buffer-与-cache" class="headerlink" title="buffer 与 cache"></a>buffer 与 cache</h4>buffer：缓冲也叫写<strong>缓冲</strong>，一般用于<strong>写</strong>操作，可以将数据先写入内存再写入磁盘，buffer 一般用于写缓冲，用于解决不同介质的速度不一致的缓冲，先将数据临时写入到里自己最近的地方，以提高写入速度，CPU 会把数据先写到内存的磁盘缓冲区，然后就认为数据已经写入完成，然后由内核在后续的时间再写入磁盘，所以服务器突然断电会丢失内存中的部分数据。<br>cache：缓存也叫读<strong>缓存</strong>，一般用于<strong>读</strong>操作，CPU 读文件从内存读，如果内存没有就先从硬盘读到内存再读到 CPU，将需要频繁读取的数据放在里自己最近的缓存区域，下次读取的时候即可快速读取。<h3 id="用户层缓存"><a href="#用户层缓存" class="headerlink" title="用户层缓存"></a>用户层缓存</h3><h4 id="DNS-缓存"><a href="#DNS-缓存" class="headerlink" title="DNS 缓存"></a>DNS 缓存</h4>默认为 60 秒，即 60 秒之内在访问同一个域名就不再进行 DNS 解析<br><strong>查看 chrome 浏览器的 DNS 缓存：chrome:&#x2F;&#x2F;net-internals&#x2F;#dns</strong><br>DNS 预获取，仅在HTML5中支持，当一个页面中包含多个域名的时候浏览器会先尝试解析域名并进行缓存，之后再使用的时候即可直接使用不需要再进行DNS 解析<h4 id="浏览器缓存过期机制"><a href="#浏览器缓存过期机制" class="headerlink" title="浏览器缓存过期机制"></a>浏览器缓存过期机制</h4><a href="https://www.cnblogs.com/struggle-1216/p/12116090.html">https://www.cnblogs.com/struggle-1216/p/12116090.html</a><h4 id="cookie-和-session"><a href="#cookie-和-session" class="headerlink" title="cookie 和 session"></a>cookie 和 session</h4>Cookie是访问某些网站以后在本地存储的一些网站相关的信息，下次再访问的时候减少一些步骤,比如加密后的账户名密码等信息<br>Cookies是服务器在客户端浏览器上存储的小段文本并随每一个请求发送至同一个服务器，是一种实现客户端保持状态的方案。<br>session称为会话信息，位于web服务器上，主要负责访问者与网站之间的交互，当浏览器请求http地址时，可以基于之前的session实现会话保持、session共享等。<h3 id="CDN缓存"><a href="#CDN缓存" class="headerlink" title="CDN缓存"></a>CDN缓存</h3>内容分发网络（Content Delivery Network，CDN）是建立并覆盖在承载网上，由不同区域的服务器组成的分布式网络。将源站资源缓存到全国各地的边缘服务器，利用全球调度系统使用户能够就近获取，有效降低访问延迟，降低源站压力,提升服务可用性。<h4 id="302实现转发请求重定向至最优服务器集群"><a href="#302实现转发请求重定向至最优服务器集群" class="headerlink" title="302实现转发请求重定向至最优服务器集群"></a>302实现转发请求重定向至最优服务器集群</h4>中国网络较为复杂，依赖DNS就近解析的调度，仍然会存在部分请求调度失效、调度生效慢等问题。<br>例：腾讯云利用在全国部署的302重定向服务器集群，能够为每一个请求实时决策最优的服务器资源，精准解决小运营商的调度问题，提升用户访问质量, 能最快地把用户引导到最优的服务器节点上，避开性能差或者异常的节点。<h4 id="CDN流程"><a href="#CDN流程" class="headerlink" title="CDN流程"></a>CDN流程</h4><img src="/image/redis/2.jpg" alt="CDN流程"><br>1.用户向<a href="http://www.test.com/">www.test.com</a> 下的某图片资源（如：1.jpg）发起请求，会先向 Local DNS 发起域名解析请求。</li></ul><ol start="2"><li>当 Local DNS 解析<a href="http://www.test.com/">www.test.com</a> 时，会发现已经配置了<br>CNAME<a href="http://www.test.com.cdn.dnsv1.com/">www.test.com.cdn.dnsv1.com</a> ，解析请求会发送至 Tencent DNS（GSLB），GSLB 为腾讯云自主研发的调度体系，会为请求分配最佳节点 IP。</li><li>Local DNS 获取 Tencent DNS 返回的解析 IP。</li><li>用户获取解析 IP。</li><li>用户向获取的 IP 发起对资源 1.jpg 的访问请求。</li><li>若该 IP 对应的节点缓存有 1.jpg，则会将数据直接返回给用户（10），此时请求结束。若该节点未缓存 1.jpg，则节点会向业务源站发起对 1.jpg 的请求（6、7、8），获取资源后，结合用户自定义配置的缓存策略，将资源缓存至节点（9），并返回给用户（10），此时请求结束。<h3 id="应用层缓存"><a href="#应用层缓存" class="headerlink" title="应用层缓存"></a>应用层缓存</h3>Nginx、PHP等web服务可以设置应用缓存以加速响应用户请求，另外有些解释性语言，比如：PHP&#x2F;Python&#x2F;Java不能直接运行，需要先编译成字节码，但字节码需要解释器解释为机器码之后才能执行，因此字节码也是一种缓存，有时候还会出现程序代码上线后字节码没有更新的现象。<h3 id="数据层缓存"><a href="#数据层缓存" class="headerlink" title="数据层缓存"></a>数据层缓存</h3></li></ol><ul><li>分布式缓存服务<br>Redis<br>Memcached</li><li>数据库<br>MySQL 查询缓存<br>innodb缓存、MyISAM缓存</li></ul><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><p>官网：<a href="https://redis.io/">https://redis.io/</a><br>Redis是一个开源的、遵循BSD协议的、基于内存的而且目前比较流行的键值数据库(key-value<br>database)，是一个非关系型数据库，redis 提供将内存通过网络远程共享的一种服务。<br>久性等功能。<br><strong>Redis 在高并发、低延迟环境要求比较高的环境使用量非常广泛</strong><br><img src="/image/redis/3.jpg" alt="数据操作"></p><ul><li>应用场景<br>Session 共享：常见于web集群中的Tomcat或者PHP中多web服务器session共享<br>缓存：数据查询、电商网站商品信息、新闻内容<br>计数器：访问排行榜、商品浏览数等和次数相关的数值统计场景 不蒜子<br>微博&#x2F;微信社交场合：共同好友,粉丝数,关注,点赞评论等<br>消息队列：ELK的日志缓存、部分业务的订阅发布系统<br>地理位置: 基于GEO(地理信息定位),实现摇一摇,附近的人,外卖等功能<h3 id="Redis部署"><a href="#Redis部署" class="headerlink" title="Redis部署"></a>Redis部署</h3>下载地址：<a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a><h4 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release &amp;&amp; yum info redis</span><br><span class="line">yum -y install redis psmisc</span><br><span class="line">systemctl <span class="built_in">enable</span> --now redis &amp;&amp; pstree -p | grep redis</span><br><span class="line">redis-cli</span><br></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4>redis源码包：<a href="http://download.redis.io/releases/">http://download.redis.io/releases/</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make gcc tcl</span><br><span class="line">wget https://download.redis.io/releases/redis-5.0.9.tar.gz</span><br><span class="line">tar xf redis-5.0.9.tar.gz</span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="built_in">cd</span> redis-5.0.9/</span><br><span class="line"><span class="built_in">cd</span> src/</span><br><span class="line">make</span><br><span class="line">make PREFIX=/apps/redis install</span><br><span class="line"><span class="comment"># 配置变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;PATH=/apps/redis/bin:<span class="variable">$PATH</span>&quot;</span> &gt; /etc/profile.d/redis.sh</span><br><span class="line">. /etc/profile.d/redis.sh</span><br><span class="line"><span class="comment"># 准备相关目录和文件</span></span><br><span class="line"><span class="built_in">mkdir</span> /apps/redis/&#123;etc,<span class="built_in">log</span>,data,run&#125;</span><br><span class="line"><span class="built_in">cp</span> ~/redis-5.0.9/redis.conf /apps/redis/etc/</span><br></pre></td></tr></table></figure><h4 id="命令软链接"><a href="#命令软链接" class="headerlink" title="命令软链接"></a>命令软链接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /apps/redis/bin/ /usr/bin/</span><br></pre></td></tr></table></figure><h4 id="前台启动"><a href="#前台启动" class="headerlink" title="前台启动"></a>前台启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server /apps/redis/etc/redis.conf <span class="comment"># 6379</span></span><br></pre></td></tr></table></figure><h4 id="启动多实例"><a href="#启动多实例" class="headerlink" title="启动多实例"></a>启动多实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /apps/redis/6380</span><br><span class="line"><span class="built_in">cp</span> -ar /apps/redis/* /apps/redis/6380/</span><br><span class="line">vim /apps/redis/6380/etc/redis.conf</span><br><span class="line">******************************</span><br><span class="line">port 6380</span><br><span class="line">******************************</span><br><span class="line">redis-server --port 6380</span><br><span class="line">redis-cli -p 6380</span><br></pre></td></tr></table></figure><h4 id="解决启动时三个告警"><a href="#解决启动时三个告警" class="headerlink" title="解决启动时三个告警"></a>解决启动时三个告警</h4>redis配置文件的参数和内核参数不匹配, 因此还需要修改配置参数, 否则启动时会有警告, 但是<br>并不影响使用<h5 id="tcp-backlog"><a href="#tcp-backlog" class="headerlink" title="tcp-backlog"></a>tcp-backlog</h5>backlog参数控制的是三次握手的时候server端收到client.ack确认号之后的队列值，即全连接<br>队列<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.core.somaxconn = 1024&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h5 id="vm-overcommit-memory"><a href="#vm-overcommit-memory" class="headerlink" title="vm.overcommit_memory"></a>vm.overcommit_memory</h5>0 表示内核将检查是否有足够的可用内存供应用进程使用；如果有足够的可用内存，内存申请<br>允许；否则，内存申请失败，并把错误返回给应用进程。<br>1 表示内核允许分配所有的物理内存，而不管当前的内存状态如何<br>2 表示内核允许分配超过所有物理内存和交换空间总和的内存<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;vm.overcommit_memory=1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h5 id="transparent-huge-pages"><a href="#transparent-huge-pages" class="headerlink" title="transparent huge pages"></a>transparent huge pages</h5>警告：您在内核中启用了透明大页面（THP,不同于一般内存页的4k为2M）支持。 这将在<br>Redis中造成延迟和内存使用问题。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot;</span> &gt;&gt; /etc/rc.d/rc.local</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h4 id="systemctl管理redis"><a href="#systemctl管理redis" class="headerlink" title="systemctl管理redis"></a>systemctl管理redis</h4></li><li>创建redis用户<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -r -s /sbin/nologin redis</span><br><span class="line"><span class="built_in">chown</span> -R redis.redis /apps/redis/</span><br></pre></td></tr></table></figure></li><li>编辑 redis 服务启动文件 来源：yum安装的方式 &#x2F;lib&#x2F;systemd&#x2F;system&#x2F;redis.service<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Redis persistent key-value database</span><br><span class="line">After=network.target</span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/apps/redis/bin/redis-server /apps/redis/etc/redis.conf --</span><br><span class="line">supervised systemd</span><br><span class="line">ExecStop=/bin/kill -s QUIT <span class="variable">$MAINPID</span></span><br><span class="line">Type=notify</span><br><span class="line">User=redis</span><br><span class="line">Group=redis</span><br><span class="line">RuntimeDirectory=redis</span><br><span class="line">RuntimeDirectoryMode=0755</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li><li>验证<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl damen-deload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now redis</span><br><span class="line">ss -tnl</span><br></pre></td></tr></table></figure><h4 id="设置密码登录"><a href="#设置密码登录" class="headerlink" title="设置密码登录"></a>设置密码登录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/redis/etc/redis.conf</span><br><span class="line"><span class="comment"># 解除下面一行的注释 requirepass foobared</span></span><br><span class="line"><span class="comment"># 密码</span></span><br><span class="line">requirepass password</span><br></pre></td></tr></table></figure><h4 id="程序连接"><a href="#程序连接" class="headerlink" title="程序连接"></a>程序连接</h4>redis 支持多种开发语言访问<a href="https://redis.io/clients">https://redis.io/clients</a><h5 id="shell-连接方式"><a href="#shell-连接方式" class="headerlink" title="shell 连接方式"></a>shell 连接方式</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim redis_test.sh</span><br><span class="line">**********************</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">NUM=`seq 1 10000`</span><br><span class="line">PASS=centos</span><br><span class="line">for i in $&#123;NUM&#125;;do</span><br><span class="line">redis-cli -h 127.0.0.1 -a &quot;$PASS&quot; --no-auth-warning set key-$&#123;i&#125; value-$&#123;i&#125;</span><br><span class="line">echo &quot;key-$&#123;i&#125; value-$&#123;i&#125; 写入完成&quot;</span><br><span class="line">done</span><br><span class="line">echo &quot;一万个key写入到Redis完成&quot;</span><br></pre></td></tr></table></figure><h5 id="python-连接方式"><a href="#python-连接方式" class="headerlink" title="python 连接方式"></a>python 连接方式</h5></li><li>安装python运行环境<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python3 python3-redis</span><br></pre></td></tr></table></figure></li><li>编写python程序<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="comment">#import time</span></span><br><span class="line">pool = redis.ConnectionPool(host=<span class="string">&quot;127.0.0.1&quot;</span>,port=<span class="number">6379</span>,password=<span class="string">&quot;centos&quot;</span>)</span><br><span class="line">r = redis.Redis(connection_pool=pool)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">r.<span class="built_in">set</span>(<span class="string">&quot;k%d&quot;</span> % i,<span class="string">&quot;v%d&quot;</span> % i)</span><br><span class="line"><span class="comment"># time.sleep(1)</span></span><br><span class="line">data=r.get(<span class="string">&quot;k%d&quot;</span> % i)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h3>Redis 虽然是一个内存级别的缓存程序，也就是redis 是使用内存进行数据的缓存的，但是其可以将内存的数据按照一定的策略保存到硬盘上，从而实现数据持久保存的目的<br>目前redis支持两种不同方式的数据持久化保存机制，分别是RDB和AOF<br><strong>如果主要充当缓存功能,或者可以承受数分钟数据的丢失, 通常生产环境一般只需启用RDB即可,此也是默认值</strong><br>如果数据需要持久保存,一点不能丢失,<strong>可以选择同时开启RDB和AOF,一般不建议只开启AOF</strong></li></ul><h4 id="RDB-模式"><a href="#RDB-模式" class="headerlink" title="RDB 模式"></a>RDB 模式</h4><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><p><img src="/image/redis/4.jpg" alt="工作原理"></p><h5 id="实现快照"><a href="#实现快照" class="headerlink" title="实现快照"></a>实现快照</h5><p>基于时间的快照，其默认只保留当前最新的一次快照，特点是执行速度比较快，缺点是可能会丢失从上次快照到当前时间点之间未做快照的数据<br><img src="/image/redis/5.jpg" alt="快照"><br>Redis从master主进程先fork出一个子进程，使用写时复制机制，子进程将内存的数据保存为一个临时文件<br>当数据保存完成之后再将上一次保存的RDB文件替换掉，然后关闭子进程，这样可以保证每一次做RDB快照保存的数据都是完整的<br>因为直接替换RDB文件的时候,可能会出现突然断电等问题,而导致RDB文件还没有保存完整就因为突然关机停止保存,而导致数据丢失的情况.后续可以手动将每次生成的RDB文件进行备份，这样可以最大化保存历史数据</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>RDB快照保存了某个时间点的数据，可以通过脚本执行redis指令bgsave(非阻塞，后台执行)或者save(会阻塞写操作,不推荐)命令自定义时间点备份，可以保留多个备份，当出现问题可以恢复到不同时间点的版本,很适合备份,并且此文件格式也支持有不少第三方工具可以进行后续的数据分析<br><strong>RDB可以最大化Redis的性能</strong>，父进程在保存 RDB文件时唯一要做的就是fork出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘工&#x2F;0操作。<br>RDB在大量数据,比如几个G的数据，恢复的速度比AOF的快</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p><strong>不能实时保存数据</strong>，可能会丢失自上一次执行RDB备份到当前的内存数据<br>当数据量非常大的时候，从父进程fork子进程进行保存至RDB文件时需要一点时间，可能是毫秒或者秒，取决于磁盘IO性能<br>在数据集比较庞大时，fork()可能会非常耗时，造成服务器在一定时间内停止处理客户端﹔如果数据集非常巨大，并且CPU时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒或更久。<br>虽然 AOF重写也需要进行fork()，但无论AOF重写的执行间隔有多长，数据的持久性都不会有任何损失。</p><h5 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h5><p><img src="/image/redis/6.jpg" alt="重写"></p><ol><li>执行bgsave命令，Redis父进程判断当前是否存在正在执行的子进 程，如RDB&#x2F;AOF子进程，如果存在bgsave命令直接返回。</li><li>父进程执行fork操作创建子进程，fork操作过程中父进程会阻塞，通 过info stats命令查看latest_fork_usec选项，可以获取最近一个fork操作的耗时，单位为微秒。</li><li>父进程fork完成后，bgsave命令返回“Background saving started”信息 并不再阻塞父进程，可以继续响应其他命令。</li><li>子进程创建RDB文件，根据父进程内存生成临时快照文件，完成后对原有文件进行原子替换。执行lastsave命令可以获取最后一次生成RDB的 时间，对应info统计的rdb_last_save_time选项。</li><li>进程发送信号给父进程表示完成，父进程更新统计信息<h4 id="AOF-模式"><a href="#AOF-模式" class="headerlink" title="AOF 模式"></a>AOF 模式</h4><strong>AOF 模式默认是关闭</strong><br>按照操作顺序依次将操作追加到指定的日志文件末尾<br>同时<strong>启用RDB和AOF,进行恢复时,默认AOF文件优先级高于RDB文件</strong>,即会使用AOF文件进行恢复<h5 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h5><img src="/image/redis/7.jpg" alt="工作原理"><h5 id="重写-1"><a href="#重写-1" class="headerlink" title="重写"></a>重写</h5>将一些重复的,可以合并的,过期的数据重新写入一个新的AOF文件,从而节约AOF备份占用的硬盘空间,也能加速恢复过程<br>可以手动执行bgrewriteaof 触发AOF,或定义自动rewrite策略<br><img src="/image/redis/8.jpg" alt="重写"><br>1.执行AOF重写请求。<br>2.父进程执行fork创建子进程，开销等同于bgsave过程。<br>3.1主进程fork操作完成后，继续响应其他命令。所有修改命令依然写 入AOF缓冲区并根据appendfsync策略同步到硬盘，保证原有AOF机制正确性。<br>3.2由于fork操作运用写时复制技术，子进程只能共享fork操作时的内存数据。由于父进程依然响应命令，Redis使用“AOF重写缓冲区”保存这部分新数据，防止新AOF文件生成期间丢失这部分数据。<br>4.子进程根据内存快照，按照命令合并规则写入到新的AOF文件。每次批量写入硬盘数据量由配置aof-rewrite-incremental-fsync控制，默认为32MB，防止单次刷盘数据过多造成硬盘阻塞。<br>5.1新AOF文件写入完成后，子进程发送信号给父进程，父进程更新 统计信息，具体见info persistence下的aof _ * 相关统计。<br>5.2父进程把AOF重写缓冲区的数据写入到新的AOF文件。<br>5.3使用新AOF文件替换老文件，完成AOF重写。<h5 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h5><strong>数据安全性相对较高</strong>，根据所使用的fsync策略(fsync是同步内存中redis所有已经修改的文件到存储设备)，默认是appendfsync everysec，即每秒执行一次 fsync,在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据<br><strong>写入操作采用的是append模式，因此在写入过程中不需要seek, 即使出现宕机现象，也不会破坏日志文件中已经存在的内容</strong>。然而如果本次操作只是写入了一半数据就出现了系统崩溃问题，不用担心，在Redis下一次启动之前，可以<strong>通过 redis-check-aof 工具来解决数据一致性的问题</strong><br><strong>Redis可以在 AOF文件体积变得过大时，自动地在后台对AOF进行重写</strong>,重写后的新AOF文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的，因为Redis在创建新 AOF文件的过程中，append模式不断的将修改数据追加到现有的 AOF文件里面，即使重写过程中发生停机，现有的 AOF文件也不会丢失。而一旦新AOF文件创建完毕，Redis就会从旧AOF文件切换到新AOF文件，并开始对新AOF文件进行追加操作。<br><strong>AOF包含一个格式清晰、易于理解的日志文件用于记录所有的修改操作。</strong><br><strong>AOF文件有序地保存了对数据库执行的所有写入操作</strong>，这些写入操作以Redis协议的格式保存，因此 AOF文件的内容非常容易被人读懂，对文件进行分析(parse)也很轻松。<h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5>即使有些操作是重复的也会全部记录，<strong>AOF 的文件大小要大于 RDB 格式的文件</strong><br>AOF 在<strong>恢复大数据集时的速度比 RDB 的恢复速度要慢</strong><br>根据fsync策略不同,<strong>AOF速度可能会慢于RDB</strong><br>bug 出现的可能性更多<h3 id="Redis-常用命令"><a href="#Redis-常用命令" class="headerlink" title="Redis 常用命令"></a>Redis 常用命令</h3>开发文档：<a href="http://redisdoc.com/">http://redisdoc.com/</a><h4 id="INFO-显示当前节点redis运行状态信息"><a href="#INFO-显示当前节点redis运行状态信息" class="headerlink" title="INFO 显示当前节点redis运行状态信息"></a>INFO 显示当前节点redis运行状态信息</h4><h4 id="SELECT-切换数据库"><a href="#SELECT-切换数据库" class="headerlink" title="SELECT 切换数据库"></a>SELECT 切换数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select 0</span><br><span class="line">select 1</span><br></pre></td></tr></table></figure><h4 id="KEYS-查看当前库下的所有key"><a href="#KEYS-查看当前库下的所有key" class="headerlink" title="KEYS 查看当前库下的所有key"></a>KEYS 查看当前库下的所有key</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KEYS *</span><br></pre></td></tr></table></figure><h4 id="BGSAVE-手动在后台执行RDB持久化操作"><a href="#BGSAVE-手动在后台执行RDB持久化操作" class="headerlink" title="BGSAVE 手动在后台执行RDB持久化操作"></a>BGSAVE 手动在后台执行RDB持久化操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#交互式执行</span></span><br><span class="line">127.0.0.1:6379[1]&gt; BGSAVE</span><br><span class="line">Background saving started</span><br><span class="line"><span class="comment">#非交互式执行</span></span><br><span class="line">redis-cli -a centos --no-auth-warning bgsave</span><br><span class="line">Background saving started</span><br></pre></td></tr></table></figure><h4 id="DBSIZE-返回当前库下的所有key-数量"><a href="#DBSIZE-返回当前库下的所有key-数量" class="headerlink" title="DBSIZE 返回当前库下的所有key 数量"></a>DBSIZE 返回当前库下的所有key 数量</h4><h4 id="FLUSHDB-强制清空当前库中的所有key-慎用！"><a href="#FLUSHDB-强制清空当前库中的所有key-慎用！" class="headerlink" title="FLUSHDB 强制清空当前库中的所有key 慎用！"></a>FLUSHDB 强制清空当前库中的所有key 慎用！</h4><h4 id="FLUSHALL-强制清空当前redis服务器所有数据库中的所有数据-慎用！"><a href="#FLUSHALL-强制清空当前redis服务器所有数据库中的所有数据-慎用！" class="headerlink" title="FLUSHALL 强制清空当前redis服务器所有数据库中的所有数据 慎用！"></a>FLUSHALL 强制清空当前redis服务器所有数据库中的所有数据 慎用！</h4><h4 id="SHUTDOWN-停止所有客户端"><a href="#SHUTDOWN-停止所有客户端" class="headerlink" title="SHUTDOWN 停止所有客户端"></a>SHUTDOWN 停止所有客户端</h4>如果有至少一个保存点在等待，执行 SAVE 命令<br>如果 AOF 选项被打开，更新 AOF 文件<br>关闭 redis 服务器(server)<br><strong>如果持久化被打开的话， SHUTDOWN 命令会保证服务器正常关闭而不丢失任何数据</strong><h3 id="redis-数据类型"><a href="#redis-数据类型" class="headerlink" title="redis 数据类型"></a>redis 数据类型</h3><h4 id="字符串-string"><a href="#字符串-string" class="headerlink" title="字符串 string"></a>字符串 string</h4>redis中所有的 key 的类型都是字符串。常用于保存 Session</li></ol><ul><li>添加一个key<br>set 指令可以创建一个key 并赋值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set key1 value1</span></span><br><span class="line"><span class="built_in">set</span> title ceo ex 5 <span class="comment">#设置自动过期时间为5秒 #大小写敏感</span></span><br><span class="line"><span class="built_in">set</span> name sls nx <span class="comment">#不存在才设置</span></span><br><span class="line"><span class="built_in">set</span> name sls xx <span class="comment">#存在才设置进行覆盖</span></span><br></pre></td></tr></table></figure></li><li>获取一个和多个key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">get name <span class="comment"># 一个</span></span><br><span class="line"> <span class="comment"># 多个</span></span><br><span class="line">mget name age</span><br><span class="line">keys *</span><br><span class="line">keys k*</span><br></pre></td></tr></table></figure></li><li>删除一个和多个key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del name</span><br><span class="line">del age NAME</span><br></pre></td></tr></table></figure></li><li>批量设置多个key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mset k1 v1 k2 v2</span><br></pre></td></tr></table></figure></li><li>追加数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">append k2 <span class="string">&quot; append new value&quot;</span></span><br></pre></td></tr></table></figure></li><li>设置新值并返回旧值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getset name sls</span><br></pre></td></tr></table></figure></li><li>返回字符串 key 对应值的字节数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strlen name</span><br></pre></td></tr></table></figure></li><li>判断 key 是否存在<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exists name</span><br></pre></td></tr></table></figure></li><li>查看 key 的过期时间<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -1  #返回值表示永不过期，默认创建的key是永不过期，重新对key赋值，也会从有剩余生命周期变成永不过期</span></span><br><span class="line"><span class="comment"># -2  #返回值表示没有此key</span></span><br><span class="line"><span class="comment"># num #key的剩余有效期</span></span><br><span class="line">ttl name</span><br></pre></td></tr></table></figure></li><li>重新设置key的过期时间<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expire name 30</span><br></pre></td></tr></table></figure></li><li>取消key的过期时间<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">persist name <span class="comment"># 使键永久存在</span></span><br></pre></td></tr></table></figure></li><li>数值递增，递减<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">incr num <span class="comment"># 递增</span></span><br><span class="line">decr num</span><br></pre></td></tr></table></figure><h4 id="列表-list"><a href="#列表-list" class="headerlink" title="列表 list"></a>列表 list</h4>列表是一个双向可读写的管道，其头部是左侧，尾部是右侧，一个列表最多可以包含2^32-1</li><li>生成列表并插入数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpush name abc a b c</span><br><span class="line">lpush name abc c b a</span><br></pre></td></tr></table></figure></li><li>向列表追加数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpush name abc</span><br><span class="line">rpush name abc</span><br></pre></td></tr></table></figure></li><li>获取列表长度(元素个数)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">llen name</span><br></pre></td></tr></table></figure></li><li>获取列表指定位置数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lindex list1 0 <span class="comment">#获取0编号的元素</span></span><br><span class="line">lindex list1 -1 <span class="comment">#获取最后一个的元素</span></span><br><span class="line">lrange list1 0 -1 <span class="comment">#所有元素</span></span><br></pre></td></tr></table></figure></li><li>修改列表指定索引值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrange list1 0 -1</span><br></pre></td></tr></table></figure></li><li>移除列表数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lpop list1 <span class="comment">#弹出左边第一个元素，即删除第一个</span></span><br><span class="line">rpop list1 <span class="comment">#弹出右边第一个元素，即删除最后一个</span></span><br></pre></td></tr></table></figure></li><li>删除list<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">del list1</span><br></pre></td></tr></table></figure><h4 id="集合-set"><a href="#集合-set" class="headerlink" title="集合 set"></a>集合 set</h4>Set 是 String 类型的无序集合，集合中的成员是唯一的，这就意味着集合中不能出现重复的数据</li><li>生成集合key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd set2 v2 v3</span><br></pre></td></tr></table></figure></li><li>追加数值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sadd set1 v3 v4 v5</span><br></pre></td></tr></table></figure></li><li>查看集合的所有数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">smembers set1</span><br></pre></td></tr></table></figure></li><li>删除集合中的元素<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sadd goods mobile car laptop</span><br><span class="line">srem goods car</span><br></pre></td></tr></table></figure></li><li>获取集合的交集，并集，差集<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sinter set1 set2 <span class="comment"># 交集</span></span><br><span class="line">sunion set1 set2 <span class="comment"># 并集</span></span><br><span class="line">sdiff set1 set2 <span class="comment"># 差集</span></span><br></pre></td></tr></table></figure><h4 id="有序集合-sorted-set"><a href="#有序集合-sorted-set" class="headerlink" title="有序集合 sorted set"></a>有序集合 sorted set</h4>有序集合的成员是唯一的,但分数(score)却可以重复</li><li>生成有序集合<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zadd zset1 1 v1 <span class="comment">#分数为1</span></span><br><span class="line">zadd zset1 2 v3 <span class="comment">#分数可重复，元素值不可以重复</span></span><br></pre></td></tr></table></figure></li><li>有序集合实现排行榜<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zadd phb 90 xwz 95 tj 30 sg</span><br><span class="line">zrange phb 0 -1 <span class="comment">#正序排序后显示集合内所有的key，score从小到大显示</span></span><br><span class="line">zrevrange phb 0 -1 <span class="comment">#倒叙排序后显示集合内所有的key，score从大到小显示</span></span><br><span class="line">zrevrange phb 0 -1 withscores <span class="comment">#正序显示指定集合内所有key和得分情况</span></span><br></pre></td></tr></table></figure></li><li>获取集合的个数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zcard phb</span><br></pre></td></tr></table></figure></li><li>基于索引返回数值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrange phb 0 2</span><br></pre></td></tr></table></figure></li><li>返回某个数值的索引(排名)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrank phb sg</span><br></pre></td></tr></table></figure></li><li>获取分数<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zscore phb sg</span><br></pre></td></tr></table></figure></li><li>删除元素<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrem phb sg tj</span><br></pre></td></tr></table></figure><h4 id="哈希-hash"><a href="#哈希-hash" class="headerlink" title="哈希 hash"></a>哈希 hash</h4>hash 是一个string类型的字段(field)和值(value)的映射表</li><li>生成 hash key<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hset 9527 name sg age 3</span><br><span class="line"><span class="comment"># 增加字段</span></span><br><span class="line">hset 9527 gender man</span><br></pre></td></tr></table></figure></li><li>获取hash key的对应字段的值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hget 9527 name</span><br></pre></td></tr></table></figure></li><li>删除一个hash key 的对应字段<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdel 9527 age</span><br></pre></td></tr></table></figure></li><li>批量设置hash key的多个field和value<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmset 1024 name xls age 28 city changzhou</span><br></pre></td></tr></table></figure></li><li>获取hash中指定字段的值<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmget 1024 name city</span><br></pre></td></tr></table></figure></li><li>获取hash中的所有字段名field，value<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hkeys 1024 <span class="comment"># field</span></span><br><span class="line">hvals 1024 <span class="comment"># value</span></span><br><span class="line">hgetall 1024 <span class="comment"># field + value</span></span><br></pre></td></tr></table></figure></li><li>删除 hash<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">del 1024</span><br><span class="line">exists 1024</span><br></pre></td></tr></table></figure><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h3>消息队列: 把要传输的数据放在队列中，可以实现多个系统之间的解耦,异步,削峰&#x2F;限流等<br><strong>消息队列主要分为生产者&#x2F;消费者模式和发布者&#x2F;订阅者模式,这两种模式Redis都支持</strong><h4 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式</h4>生产者&#x2F;消费者(Producer&#x2F;Consumer)模式下，上层应用接收到的外部请求后开始处理其当前步骤的操作，在执行完成后将已经完成的操作发送至指定的频道(channel,逻辑队列)当中，并由其下层的应用监听该频道并继续下一步的操作，如果其处理完成后没有下一步的操作就直接返回数据给外部请求，如果还有下一步的操作就再将任务发布到另外一个频道，由另外一个消费者继续监听和处理。<br><strong>生产者消费者模式下，多个消费者同时监听一个队列，但是一个消息只能被最先抢到消息的消费者消费，即消息任务是一次性读取和处理</strong><br><img src="/image/redis/9.jpg" alt="生产者消费者模式"><h4 id="发布者订阅模式"><a href="#发布者订阅模式" class="headerlink" title="发布者订阅模式"></a>发布者订阅模式</h4>发布者订阅者模式下，发布者将消息发布到指定的channel里面，凡是监听该channel的消费者都会收到同样的一份消息<br><img src="/image/redis/10.jpg" alt="发布者订阅模式"></li><li>订阅者监听频道<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 订阅者监听频道</span></span><br><span class="line">subscribe channel1</span><br><span class="line"><span class="comment"># 订阅多个频道</span></span><br><span class="line">subscribe channel1 channel2</span><br><span class="line"><span class="comment"># 订阅所有频道</span></span><br><span class="line">psubscribe *  <span class="comment"># 支持通配符*</span></span><br><span class="line"><span class="comment"># 取消订阅</span></span><br><span class="line">unsubscribe channel1</span><br></pre></td></tr></table></figure><h3 id="redis主从复制"><a href="#redis主从复制" class="headerlink" title="redis主从复制"></a>redis主从复制</h3>Redis可以实现单机的数据持久化，但无论是RDB也好或者AOF也好，都解决不了单点宕机问题，即一旦单台 redis服务器本身出现系统故障、硬件故障等问题后，就会直接造成数据的丢失<br><img src="/image/redis/11.jpg" alt="主从复制架构"><br>一个master可以有多个slave<br>一个slave只能有一个master<br>数据流向是单向的，master到slave<h4 id="实现主从复制"><a href="#实现主从复制" class="headerlink" title="实现主从复制"></a>实现主从复制</h4><strong>Redis Slave也要开启持久化并设置和master同样的连接密码，因为后期slave会有提升为master的可能,Slave 端切换master同步后会丢失之前的所有数据,而通过持久化可以恢复数据</strong><br><strong>默认redis状态为master，需要转换为slave角色并指向master服务器的IP+PORT+Password</strong><h5 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h5></li><li>master上设置key1<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a centos</span><br><span class="line">info replication</span><br><span class="line"><span class="built_in">set</span> key1 v1-master</span><br><span class="line">get key1 <span class="comment"># &quot;v1-master&quot;</span></span><br></pre></td></tr></table></figure></li><li>在slave1上执行，登录，设置key1<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a centos --no-auth-warning</span><br><span class="line">info replication</span><br><span class="line"><span class="built_in">set</span> key1 v1-slave1</span><br><span class="line">get key1 <span class="comment"># &quot;v1-slave1&quot;</span></span><br></pre></td></tr></table></figure></li><li>slave2上也设置相同的key1，但值不同<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -a centos --no-auth-warning</span><br><span class="line">info replication</span><br><span class="line"><span class="built_in">set</span> key1 v1-slave2</span><br><span class="line">get key1 <span class="comment"># &quot;v1-slave2&quot;</span></span><br></pre></td></tr></table></figure></li><li>所有的slave上设置master的IP和端口，4.0版本之前的指令为slaveof<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave1</span></span><br><span class="line">replicaof 192.168.189.10 6379</span><br><span class="line">config <span class="built_in">set</span> masterauth centos <span class="comment"># 在slave上设置master的密码，才可以同步</span></span><br><span class="line">info replication</span><br><span class="line"><span class="comment"># role:slave #角色变为slave</span></span><br><span class="line"><span class="comment"># master_host:192.168.189.10 #指向master</span></span><br><span class="line">get key1 <span class="comment"># # 查看数据是否同步成功 &quot;v1-master&quot;</span></span><br><span class="line"><span class="comment"># slave2</span></span><br><span class="line">replicaof 192.168.175.10 6379</span><br><span class="line">config <span class="built_in">set</span> masterauth centos</span><br><span class="line">get key1</span><br><span class="line"><span class="comment"># master上可以看到所有slave的信息 info replication</span></span><br><span class="line"><span class="comment"># slave0:ip=192.168.189.30,port=6379,state=online,offset=224,lag=1</span></span><br><span class="line"><span class="comment"># slave1:ip=192.168.189.20,port=6379,state=online,offset=224,lag=0</span></span><br></pre></td></tr></table></figure></li><li>删除主从同步<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">replicaof no one</span><br><span class="line">info replication <span class="comment"># 角色变回了master</span></span><br></pre></td></tr></table></figure><h5 id="修改slave节点配置文件"><a href="#修改slave节点配置文件" class="headerlink" title="修改slave节点配置文件"></a>修改slave节点配置文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave1，2上</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;replicaof 192.168.189.10 6379&quot;</span> &gt;&gt; /apps/redis/etc/redis.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;masterauth centos&quot;</span> &gt;&gt; /apps/redis/etc/redis.conf</span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure><h4 id="主从复制故障恢复"><a href="#主从复制故障恢复" class="headerlink" title="主从复制故障恢复"></a>主从复制故障恢复</h4></li><li>slave节点故障和恢复，client指向另一个从节点即可，并及时修复故障从节点<br><img src="/image/redis/12.jpg" alt="slave节点故障"></li><li>master节点故障和恢复，提升slave为新的master<br><strong>master故障后只能手动提升一个slave为新master，不支持自动切换。master的切换会导致master_replid发生变化，slave之前的master_replid就和当前master不一致从而会引发所有slave的全量同步</strong><br><img src="/image/redis/13.jpg" alt="master节点故障"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.189.10故障，提升192.168.189.20为新的master</span></span><br><span class="line">systemctl stop redis <span class="comment"># 10 redis stop</span></span><br><span class="line"><span class="comment"># 停止slave1(192.168.189.20)同步并提升为新的master</span></span><br><span class="line">replicaof no one</span><br><span class="line"><span class="built_in">set</span> keytest1 vtest1 <span class="comment"># OK</span></span><br><span class="line"><span class="comment"># 修改所有的slave指向新的master节点</span></span><br><span class="line">replicaof 192.168.189.20 6379</span><br><span class="line">config <span class="built_in">set</span> masterauth centos</span><br><span class="line"><span class="built_in">set</span> key100 v100 <span class="comment"># only read</span></span><br><span class="line">get keytest1 <span class="comment"># &quot;vtest1&quot;</span></span><br></pre></td></tr></table></figure><h4 id="redis的级联复制"><a href="#redis的级联复制" class="headerlink" title="redis的级联复制"></a>redis的级联复制</h4>之前搭建好的一主一从架构中，master和slave1节点无需修改，只需要修改slave2及slave3指向slave1作为master即可<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># slave2,3</span></span><br><span class="line">redis-cli -a centos</span><br><span class="line">REPLICAOF 192.168.189.20 6379</span><br><span class="line">config <span class="built_in">set</span> masterauth centos</span><br><span class="line"><span class="comment"># slave1查看状态 info replication</span></span><br></pre></td></tr></table></figure><h4 id="主从复制优化"><a href="#主从复制优化" class="headerlink" title="主从复制优化"></a>主从复制优化</h4></li><li>主从同步完整过程</li></ul><ol><li>从服务器连接主服务器，发送PSYNC命令</li><li>主服务器接收到PSYNC命令后，开始执行BGSAVE命令生成RDB快照文件并使用缓冲区记录此后执行的所有写命令</li><li>主服务器BGSAVE执行完后，向所有从服务器发送RDB快照文件，并在发送期间继续记录被执行的写命令</li><li>从服务器收到快照文件后丢弃所有旧数据，载入收到的快照至内存</li><li>主服务器快照发送完毕后,开始向从服务器发送缓冲区中的写命令</li><li>从服务器完成对快照的载入，开始接收命令请求，并执行来自主服务器缓冲区的写命令</li><li>后期同步会先发送自己slave_repl_offset位置，只同步新增加的数据，不再全量同步<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">repl-diskless-sync no <span class="comment"># 是否使用无盘同步RDB文件，默认为no，no为不使用无盘，需要将RDB文件保存到磁盘后再发送给slave，yes为支持无盘，支持无盘就是RDB文件不需要保存至本地磁盘，而且直接通过socket文件发送给slave</span></span><br><span class="line">repl-diskless-sync-delay 5 <span class="comment">#diskless时复制的服务器等待的延迟时间</span></span><br><span class="line">repl-ping-slave-period 10 <span class="comment">#slave端向server端发送ping的时间间隔，默认为10秒</span></span><br><span class="line">repl-timeout 60 <span class="comment">#设置主从ping连接超时时间,超过此值无法连接,master_link_status显示为down,并记录错误日志</span></span><br><span class="line">repl-disable-tcp-nodelay no <span class="comment">#是否启用TCP_NODELAY，如设置成yes，则redis会合并小的TCP包从而节省带宽， 但会增加同步延迟（40ms），造成master与slave数据不一致，假如设置成no，则redismaster会立即发送同步数据，没有延迟，yes关注性能，no关注redis服务中的数据一致性</span></span><br><span class="line">repl-backlog-size 1mb <span class="comment">#master的写入数据缓冲区，用于记录自上一次同步后到下一次同步过程中间的写入命令，计算公式：repl-backlog-size = 允许从节点最大中断时长 * 主实例offset每秒写入量，比如master每秒最大写入64mb，最大允许60秒，那么就要设置为64mb*60秒=3840MB(3.8G),建议此值是设置的足够大</span></span><br><span class="line">repl-backlog-ttl 3600 <span class="comment">#如果一段时间后没有slave连接到master，则backlog size的内存将会被释放。如果值为0则表示永远不释放这部份内存。</span></span><br><span class="line">slave-priority 100 <span class="comment">#slave端的优先级设置，值是一个整数，数字越小表示优先级越高。当master故障时将会按照优先级来选择slave端进行恢复，如果值设置为0，则表示该slave永远不会被选择。</span></span><br><span class="line">min-replicas-to-write 1 <span class="comment">#设置一个master的可用slave不能少于多少个，否则master无法执行写</span></span><br><span class="line">min-slaves-max-lag 20 <span class="comment">#设置至少有上面数量的slave延迟时间都大于多少秒时，master不接收写操作(拒绝写入)</span></span><br></pre></td></tr></table></figure><h5 id="Redis主从复制分为全量同步和增量同步"><a href="#Redis主从复制分为全量同步和增量同步" class="headerlink" title="Redis主从复制分为全量同步和增量同步"></a>Redis主从复制分为全量同步和增量同步</h5></li></ol><ul><li>全量复制过程<br><strong>首次同步是全量同步，这时Slave需要将Master上的所有数据都复制一份。</strong>，主从同步可以让从服务器从主服务器同步数据，而且从服务器还可再有其它的从服务器，即另外一台redis服务器可以从一台从服务器进行数据同步，redis 的主从同步是非阻塞的，master收到从服务器的psync(2.8版本之前是SYNC)命令,会fork一个子进程在后台执行bgsave命令，并将新写入的数据写入到一个缓冲区中，bgsave执行完成之后,将生成的RDB文件发送给slave，然后master再将缓冲区的内容以redis协议格式再全部发送给slave，slave 先删除旧数据,slave将收到后的RDB文件载入自己的内存，再加载所有收到缓冲区的内容 从而这样一次完整的数据同步。<br><img src="/image/redis/14.jpg" alt="全量复制"></li><li>增量复制过程<br>全量同步之后再次需要同步时,从服务器只要发送当前的offset位置(等同于MySQL的binlog的位置)给主服务器，然后主服务器根据相应的位置将之后的数据(包括写在缓冲区的积压数据)发送给从服务器,其再次保存到其内存即可。<br><img src="/image/redis/15.jpg" alt="增量复制"><h5 id="复制缓冲区-环形队列-配置参数"><a href="#复制缓冲区-环形队列-配置参数" class="headerlink" title="复制缓冲区(环形队列)配置参数"></a>复制缓冲区(环形队列)配置参数</h5><img src="/image/redis/16.jpg" alt="环形队列"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#复制缓冲区大小，建议要设置足够大</span></span><br><span class="line">rep-backlog-size 1mb</span><br><span class="line"><span class="comment">#Redis同时也提供了当没有slave需要同步的时候，多久可以释放环形队列</span></span><br><span class="line">repl-backlog-ttl 3600</span><br></pre></td></tr></table></figure><h5 id="避免全量复制"><a href="#避免全量复制" class="headerlink" title="避免全量复制"></a>避免全量复制</h5>第一次全量复制不可避免,后续的全量复制可以利用小主节点(内存小),业务低峰时进行全量<br>节点运行 run-id 不匹配:主节点重启会导致RUNID变化,可能会触发全量复制,可以利用故障转<br>移，例如哨兵或集群,而从节点重新启动,不会导致全量复制<br><strong>复制积压缓冲区不足: 当主节点生成的新数据大于缓冲区大小,从节点恢复和主节点连接后,会<br>导致全量复制.解决方法将repl-backlog-size调大</strong><h5 id="单节点复制风暴"><a href="#单节点复制风暴" class="headerlink" title="单节点复制风暴"></a>单节点复制风暴</h5>尽量使用次级复联<br><img src="/image/redis/17.jpg" alt="单节点复制风暴"><h5 id="单机器复制风暴"><a href="#单机器复制风暴" class="headerlink" title="单机器复制风暴"></a>单机器复制风暴</h5>主节点分散多机器<br><img src="/image/redis/18.jpg" alt="单机器复制风暴"><h3 id="redis-哨兵-Sentinel"><a href="#redis-哨兵-Sentinel" class="headerlink" title="redis 哨兵(Sentinel)"></a>redis 哨兵(Sentinel)</h3>生产环境建议使用Redis的2.8版本的以后版本<br>哨兵(Sentinel) 是一个分布式系统，可以在一个架构中运行多个哨兵(sentinel) 进程，这些进程使用流言协议(gossip protocols)来接收关于Master主服务器是否下线的信息，并使用投票协议(AgreementProtocols)来决定是否执行自动故障迁移,以及选择哪个Slave作为新的Master<h4 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h4><img src="/image/redis/19.jpg" alt="Redis Sentinel架构"><br><strong>主从架构无法实现master和slave角色的自动切换</strong>，即当master出现redis服务异常、主机断电、磁盘损坏等问题导致master无法使用，而redis主从复制无法实现自动的故障转移(将slave 自动提升为新master)，需要手动修改环境配置,才能切换到slave redis服务器，另外也无法横向扩展Redis服务的并行写入性能，当单台Redis服务器性能无法满足业务写入需求的时候,也需要解决以上的两个核心问题</li></ul><ol><li>master和slave角色的无缝切换，让业务无感知从而不影响业务使用</li><li>可横向动态扩展Redis服务器，从而实现多台服务器并行写入以实现更高并发的目的。</li></ol><ul><li>Redis 集群实现方式<br>客户端分片: 由应用决定将不同的KEY发送到不同的Redis服务器<br>代理分片: 由代理决定将不同的KEY发送到不同的Redis服务器<br>Redis Cluster<h4 id="三个定时任务"><a href="#三个定时任务" class="headerlink" title="三个定时任务"></a>三个定时任务</h4></li><li>每10秒每个sentinel对master和slave执行info<br>发现slave节点<br>确认主从关系</li><li>每2秒每个sentinel通过master节点的channel交换信(pub&#x2F;sub)<br>通过sentinel_hello频道交互<br>交互对节点的“看法”和自身信息</li><li>每1秒每个sentinel对其他sentinel和redis执行ping<h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><strong>master的配置文件中masterauth和slave都必须相同</strong></li><li>在所有主从节点执行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim /apps/redis/etc/redis.conf</span></span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0</span><br><span class="line">masterauth centos</span><br><span class="line">requirepass centos</span><br><span class="line">*********************************************************</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;net.core.somaxconn = 1024\nvm.overcommit_memory = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&quot;</span> &gt;&gt; /etc/rc.d/rc.local</span><br><span class="line"><span class="built_in">chmod</span> +x /etc/rc.d/rc.local</span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure></li><li>设置主从复制，所有节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;replicaof 192.168.189.10 6379&quot;</span> &gt;&gt; /apps/redis/etc/redis.conf</span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure></li><li>编辑哨兵的配置文件<br>Sentinel实际上是一个特殊的redis服务器,有些redis指令支持,但很多指令并不支持.默认监听<br>在26379&#x2F;tcp端口<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译安装在源码目录有sentinel.conf，复制到安装目录即可</span></span><br><span class="line"><span class="built_in">cp</span> redis-5.0.9/sentinel.conf /apps/redis/etc/</span><br><span class="line">grep -Ev <span class="string">&quot;^(#|$)&quot;</span> /apps/redis/etc/sentinel.conf <span class="comment"># 去注释</span></span><br><span class="line"><span class="comment">#############################################################</span></span><br><span class="line">port 26379</span><br><span class="line">daemonize no</span><br><span class="line">pidfile /var/run/redis-sentinel.pid</span><br><span class="line">logfile <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">dir</span> /tmp <span class="comment">#工作目录</span></span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class="line"><span class="comment">#指定当前mymaster集群中master服务器的地址和端口</span></span><br><span class="line"><span class="comment">#2为法定人数限制(quorum)，即有几个sentinel认为master down了就进行故障转移，一般此值是所有sentinel节点(一般总数是&gt;=3的 奇数,如:3,5,7等)的一半以上的整数值，比如，总数是3，即3/2=1.5，取整为2,是master的ODOWN客观下线的依据</span></span><br><span class="line">sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line"><span class="comment">#mymaster集群中master的密码，注意此行要在上面行的下面</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"><span class="comment">#(SDOWN)判断mymaster集群中所有节点的主观下线的时间，单位：毫秒，建议30000</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"><span class="comment">#发生故障转移后，同时向新master同步数据的slave数量，数字越小总同步时间越长，但可以减轻新master的负载压力</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"><span class="comment">#所有slaves指向新的master所需的超时时间，单位：毫秒</span></span><br><span class="line">sentinel deny-scripts-reconfig <span class="built_in">yes</span></span><br><span class="line"><span class="comment">#禁止修改脚本</span></span><br><span class="line"><span class="comment">############################################################</span></span><br><span class="line"><span class="comment"># 主从服务器的配置</span></span><br><span class="line">port 26379</span><br><span class="line">daemonize no</span><br><span class="line">pidfile /apps/redis/run/redis-sentinel.pid</span><br><span class="line">logfile <span class="string">&quot;/apps/redis/log/sentinel.log&quot;</span></span><br><span class="line"><span class="built_in">dir</span> /tmp</span><br><span class="line">sentinel monitor mymaster 192.168.189.10 6379 2</span><br><span class="line">sentinel auth-pass mymaster centos</span><br><span class="line">sentinel down-after-milliseconds mymaster 3000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">sentinel deny-scripts-reconfig <span class="built_in">yes</span></span><br><span class="line"><span class="built_in">chown</span> redis.redis /apps/redis/etc/sentinel.conf</span><br></pre></td></tr></table></figure><h4 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三台哨兵服务器都要启动</span></span><br><span class="line"><span class="built_in">cat</span> &lt;&lt; <span class="string">EOF &gt; /lib/systemd/system/redis-sentinel.service</span></span><br><span class="line"><span class="string">    [Unit]</span></span><br><span class="line"><span class="string">    Description=Redis Sentinel</span></span><br><span class="line"><span class="string">    After=network.target</span></span><br><span class="line"><span class="string">    After=network-online.target</span></span><br><span class="line"><span class="string">    Wants=network-online.target</span></span><br><span class="line"><span class="string">    [Service]</span></span><br><span class="line"><span class="string">    ExecStart=/apps/redis/bin/redis-sentinel/apps/redis/etc/sentinel.conf --</span></span><br><span class="line"><span class="string">    supervised systemd</span></span><br><span class="line"><span class="string">    ExecStop=/usr/libexec/redis-shutdown redis-sentinel</span></span><br><span class="line"><span class="string">    Type=notify</span></span><br><span class="line"><span class="string">    User=redis</span></span><br><span class="line"><span class="string">    Group=redis</span></span><br><span class="line"><span class="string">    RuntimeDirectory=redis</span></span><br><span class="line"><span class="string">    RuntimeDirectoryMode=0755</span></span><br><span class="line"><span class="string">    [Install]</span></span><br><span class="line"><span class="string">    WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="comment"># 确保每个哨兵主机myid不同</span></span><br><span class="line">systemctl <span class="built_in">enable</span> --now redis-sentinel</span><br><span class="line">grep myid /apps/redis/etc/sentinel.conf</span><br><span class="line"><span class="comment"># 验证端口</span></span><br><span class="line">ss -tnl <span class="comment"># 26379</span></span><br></pre></td></tr></table></figure><h4 id="测试故障转移"><a href="#测试故障转移" class="headerlink" title="测试故障转移"></a>测试故障转移</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master</span></span><br><span class="line">yum install psmisc -y &amp;&amp; killall redis-server</span><br><span class="line"><span class="comment"># 故障转移后的redis配置文件会被自动修改</span></span><br><span class="line">grep <span class="string">&quot;^replicaof&quot;</span> /apps/redis/etc/redis.conf</span><br><span class="line"><span class="comment"># sentinel monitor IP 同样也会被修改</span></span><br><span class="line">grep monitor /apps/redis/etc/sentinel.conf</span><br></pre></td></tr></table></figure><h4 id="恢复故障"><a href="#恢复故障" class="headerlink" title="恢复故障"></a>恢复故障</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master</span></span><br><span class="line">systemctl start redis</span><br><span class="line">grep <span class="string">&quot;^replicaof&quot;</span> /apps/redis/etc/redis.conf</span><br><span class="line"><span class="comment"># replicaof 192.168.189.30 6379</span></span><br></pre></td></tr></table></figure></li><li>手动让主节点下线<br><strong>指定优先级,值越小sentinel会优先将之选为新的master,默为值为100</strong><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/redis/etc/redis.conf</span><br><span class="line"><span class="comment"># replica-priority 10</span></span><br><span class="line">systemctl restart redis</span><br><span class="line">redis-cli -p 26379</span><br></pre></td></tr></table></figure><h4 id="python连接redis"><a href="#python连接redis" class="headerlink" title="python连接redis"></a>python连接redis</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release python3 python3-redis</span><br><span class="line">vim sentinel_test.py</span><br><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> redis.sentinel <span class="keyword">import</span> Sentinel</span><br><span class="line"><span class="comment">#连接哨兵服务器(主机名也可以用域名)</span></span><br><span class="line">sentinel = Sentinel([(<span class="string">&#x27;192.168.189.10&#x27;</span>, <span class="number">26379</span>),(<span class="string">&#x27;192.168.189.20&#x27;</span>, <span class="number">26379</span>),(<span class="string">&#x27;192.168.189.30&#x27;</span>, <span class="number">26379</span>)],socket_timeout=<span class="number">0.5</span>)</span><br><span class="line">redis_auth_pass = <span class="string">&#x27;centos&#x27;</span></span><br><span class="line"><span class="comment">#mymaster 是配置哨兵模式的redis集群名称，此为默认值,实际名称按照个人部署案例来填写</span></span><br><span class="line"><span class="comment">#获取主服务器地址</span></span><br><span class="line">master = sentinel.discover_master(<span class="string">&#x27;mymaster&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(master)</span><br><span class="line"><span class="comment">#获取从服务器地址</span></span><br><span class="line">slave = sentinel.discover_slaves(<span class="string">&#x27;mymaster&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(slave)</span><br><span class="line"><span class="comment">#获取主服务器连接进行写入</span></span><br><span class="line">master = sentinel.master_for(<span class="string">&#x27;mymaster&#x27;</span>, socket_timeout=<span class="number">0.5</span>,password=redis_auth_pass, db=<span class="number">0</span>)</span><br><span class="line">w_ret = master.<span class="built_in">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"><span class="comment">#获取从服务器进行读取（默认是round-roubin）</span></span><br><span class="line">slave = sentinel.slave_for(<span class="string">&#x27;mymaster&#x27;</span>, socket_timeout=<span class="number">0.5</span>,password=redis_auth_pass, db=<span class="number">0</span>)</span><br><span class="line">r_ret = slave.get(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r_ret)</span><br><span class="line"><span class="comment"># python3 sentinel_test.py</span></span><br><span class="line">(<span class="string">&#x27;192.168.189.10&#x27;</span>, <span class="number">6379</span>)</span><br><span class="line">[(<span class="string">&#x27;192.168.189.20&#x27;</span>, <span class="number">6379</span>), (<span class="string">&#x27;192.168.189.30&#x27;</span>, <span class="number">6379</span>)]</span><br><span class="line"><span class="string">b&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h3>哨兵sentinel机制中，可以解决redis高可用问题，即当master故障后可以自动将slave提升为<br>master，从而可以保证redis服务的正常使用，<strong>但是无法解决redis单机写入的瓶颈问题，即单机redis写入性能受限于单机的内存大小、并发数量、网卡速率等因素。</strong><br>redis 3.0版本之后推出了无中心架构的redis cluster机制，在无中心的redis集群当中，其每个节点保存当前节点数据和整个集群状态,每个节点都和其他所有节点连接</li><li>Redis cluster 基本架构<br>节点A覆盖：0-5460<br>节点B覆盖：5461-10922<br>节点C覆盖：10923-16383<br><img src="/image/redis/20.jpg" alt="基本架构"></li><li>Redis cluster 主从架构<br>对每个master 节点都实现主从复制,从而实现 redis 高可用性<br><img src="/image/redis/21.jpg" alt="主从架构"><h4 id="原生命令手动部署redis-cluster"><a href="#原生命令手动部署redis-cluster" class="headerlink" title="原生命令手动部署redis cluster"></a>原生命令手动部署redis cluster</h4>官方文档：<a href="https://redis.io/topics/cluster-tutorial">https://redis.io/topics/cluster-tutorial</a><br><strong>6台服务器，分别是三组master&#x2F;slave，适用于生产环境</strong></li><li>所有节点安装redis并启动cluster功能，防火墙放行对应的端口号<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-port=1-65535/tcp --permanent</span><br><span class="line">firewall-cmd --add-port=1-65535/udp --permanent</span><br><span class="line">firewall-cmd --reload</span><br><span class="line">hostnamectl set-hostname master1</span><br></pre></td></tr></table></figure></li><li>所有节点启用redis集群支持<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cluster-enabled yes&quot;</span> &gt;&gt; /apps/redis/etc/redis.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;masterauth centos&quot;</span> &gt;&gt; /apps/redis/etc/redis.conf</span><br><span class="line"><span class="comment"># vim /apps/redis/etc/redis.conf</span></span><br><span class="line">cluster-enabled <span class="built_in">yes</span></span><br><span class="line">masterauth centos</span><br><span class="line"><span class="comment">##########################################################</span></span><br><span class="line">systemctl restart redis</span><br></pre></td></tr></table></figure></li><li>master1执行 meet 操作实现相互通信<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.189.10 -a centos --no-auth-warning cluster meet 192.168.189.11 6379</span><br><span class="line">redis-cli -h 192.168.189.10 -a centos --no-auth-warning cluster meet 192.168.189.20 6379</span><br><span class="line">redis-cli -h 192.168.189.10 -a centos --no-auth-warning cluster meet 192.168.189.21 6379</span><br><span class="line">redis-cli -h 192.168.189.10 -a centos --no-auth-warning cluster meet 192.168.189.30 6379</span><br><span class="line">redis-cli -h 192.168.189.10 -a centos --no-auth-warning cluster meet 192.168.189.31 6379</span><br></pre></td></tr></table></figure></li><li>每个master 节点指派槽位范围<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim addslots.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">HOST=<span class="variable">$1</span></span><br><span class="line">PORT=<span class="variable">$2</span></span><br><span class="line">START=<span class="variable">$3</span></span><br><span class="line">END=<span class="variable">$4</span></span><br><span class="line">PASS=centos</span><br><span class="line"><span class="keyword">for</span> slot <span class="keyword">in</span> `<span class="built_in">seq</span> <span class="variable">$&#123;START&#125;</span> <span class="variable">$&#123;END&#125;</span>`;<span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;slot: <span class="variable">$&#123;slot&#125;</span>&quot;</span></span><br><span class="line">redis-cli -h <span class="variable">$&#123;HOST&#125;</span> -p <span class="variable">$&#123;PORT&#125;</span> -a <span class="variable">$&#123;PASS&#125;</span> --no-auth-warning cluster addslots <span class="variable">$&#123;slot&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">bash addslots.sh 192.168.189.10 6379 0 5461</span><br><span class="line">bash addslots.sh 192.168.189.20 6379 5462 10922</span><br><span class="line">bash addslots.sh 192.168.189.30 6379 10923 16383</span><br></pre></td></tr></table></figure></li><li>指定各个节点的主从关系<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.175.10 -a centos --no-auth-warning cluster nodes</span><br><span class="line"><span class="comment"># 通过上面的cluster nodes 查看master的ID信息，执行下面操作，将对应的slave 指定相应的master节点，实现三对主从节点</span></span><br><span class="line">redis-cli -h 192.168.189.11 -a centos --no-auth-warning cluster replicate 48000fa51e653b3dbf3f70829fc9142c40195ff6</span><br><span class="line">redis-cli -h 192.168.189.21 -a centos --no-auth-warning cluster replicate 3ccb32a3e79572a16a1aa3e8188fff07121b1d1e</span><br><span class="line">redis-cli -h 192.168.189.31 -a centos --no-auth-warning cluster replicate fae9fe337678873ec0f3e0a44c39bd8064c85fb0</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;缓存&quot;&gt;&lt;a href=&quot;#缓存&quot; class=&quot;headerlink&quot; title=&quot;缓存&quot;&gt;&lt;/a&gt;缓存&lt;/h2&gt;&lt;p&gt;缓存是为了&lt;strong&gt;调节速度不一致的两个或多个不同的物质的速度，在中间对速度较快的一方起到一个加速访问速度较慢的一方的作用&lt;/stro</summary>
      
    
    
    
    <category term="Redis" scheme="http://xczf.shop/cate%EF%BC%9Agories/Redis/"/>
    
    
    <category term="Linux" scheme="http://xczf.shop/tags/Linux/"/>
    
    <category term="Redis" scheme="http://xczf.shop/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>LNMP</title>
    <link href="http://xczf.shop/2021/02/05/LNMP/"/>
    <id>http://xczf.shop/2021/02/05/LNMP/</id>
    <published>2021-02-05T11:00:41.000Z</published>
    <updated>2023-11-02T13:16:23.153Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a>LNMP</h2><p>LNMP是一套技术的组合，L&#x3D;Linux、N&#x3D;Nginx、M&#x3D;MySQL或Mariadb、P&#x3D;PHP</p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>  因为nginx服务不能请求动态请求，所以当起动态请求时，nginx无法处理的发起http请求，静态资源请求nginx则直接返回，如果是动态请求nginx则通过fastcgi协议转交给后端的PHP程序处理</p><hr><p><img src="/image/lnmp/1.png" alt="1"></p><hr><ol><li>用户通过http协议发起请求，请求会先抵达LNMP架构中的nginx；</li><li>nginx会根据用户的请求进行location规则匹配；</li><li>location如果匹配到请求是静态，则由nginx读取本地直接返回；</li><li>location如果匹配到请求是动态，则由nginx将请求转发给fastcgi协议；</li><li>fastcgi收到请求交给php-fpm管理进程，php-fpm管理进程接收到后会调用具体的工作进程wrapper；</li><li>wrapper进程会调用PHP程序进行解析，如果只是解析代码，php直接返回；</li><li>如果有查询数据库操作，则由php连接数据库（用户 密码 ip）发起查询的操作；</li><li>最终数据由mysql–&gt;php–&gt;php-fpm–&gt;fastcgi–&gt;nginx–&gt;http–&gt;user<h3 id="LNMP架构环境部署"><a href="#LNMP架构环境部署" class="headerlink" title="LNMP架构环境部署"></a>LNMP架构环境部署</h3><h4 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h4>安装步骤：<a href="https://xczf.shop/2023/02/03/nginx/">https://xczf.shop/2023/02/03/nginx/</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改nginx用户</span></span><br><span class="line">groupadd lnmp -g 666</span><br><span class="line">useradd lnmp --u 666 -g 666 -s /sbin/nologin -M</span><br><span class="line">sed -i <span class="string">&#x27;/^user/c user lnmp;&#x27;</span> /etc/nginx/nginx.conf</span><br><span class="line"><span class="comment">#sed c命令表示将指定行中的所有内容，替换成该选项后面的字符串</span></span><br><span class="line"></span><br><span class="line">systemctl start nginx.service</span><br><span class="line">systemctl <span class="built_in">enable</span> nginx</span><br></pre></td></tr></table></figure><h4 id="第三方扩展源安装php7-1-PHP版本过低会无法部署"><a href="#第三方扩展源安装php7-1-PHP版本过低会无法部署" class="headerlink" title="第三方扩展源安装php7.1(PHP版本过低会无法部署)"></a>第三方扩展源安装php7.1(PHP版本过低会无法部署)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 部署repo源仓库</span></span><br><span class="line">vim /etc/yum.repos.d/php.repo</span><br><span class="line"> [php]</span><br><span class="line"> name = php Repository</span><br><span class="line"> baseurl = https://repo.webtatic.com/yum/el7/x86_64/</span><br><span class="line"> gpgcheck = 0</span><br><span class="line">yum makecache</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum -y install php71w php71w-cli php71w-common php71w-devel php71w-embedded php71w-gd php71w-mcrypt php71w-mbstring php71w-pdo php71w-xml php71w-fpm php71w-mysqlnd php71w-opcache php71w-pecl-memcached php71w-pecl-redis php71w-pecl-mongodb</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># php-fpm用户与nginx的运行用户保持一致</span></span><br><span class="line">sed -i <span class="string">&#x27;/^user/c user = lnmp&#x27;</span> /etc/php-fpm.d/www.conf</span><br><span class="line">sed -i <span class="string">&#x27;/^group/c group = lnmp&#x27;</span> /etc/php-fpm.d/www.conf</span><br><span class="line"></span><br><span class="line">systemctl start php-fpm</span><br><span class="line">systemctl <span class="built_in">enable</span> php-fpm</span><br></pre></td></tr></table></figure><h4 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h4><h3 id="LNMP架构环境配置"><a href="#LNMP架构环境配置" class="headerlink" title="LNMP架构环境配置"></a>LNMP架构环境配置</h3><h4 id="fastcgi代理配置语法"><a href="#fastcgi代理配置语法" class="headerlink" title="fastcgi代理配置语法"></a>fastcgi代理配置语法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># fastcgi服务器的地址</span></span><br><span class="line">Syntax: fastcgi_pass address;</span><br><span class="line">Default:-</span><br><span class="line">Context:location,<span class="keyword">if</span> <span class="keyword">in</span> location</span><br><span class="line">**********************************************************************</span><br><span class="line">fastcgi_pass location:9000;</span><br><span class="line">fastcgi_pass unix:/tmp/fastcgi.socket;</span><br><span class="line"><span class="comment"># fastcgi默认的首页文件</span></span><br><span class="line">Syntax: fastcgi_index name;</span><br><span class="line">Default:-</span><br><span class="line">Context:http,server,location</span><br><span class="line"><span class="comment"># 过fastcgi_param设置变量</span></span><br><span class="line">Syntax: fastcgi_param parameter value [if_not_empty];</span><br><span class="line">Default:-</span><br><span class="line">Context:http,server,location</span><br><span class="line">**********************************************************************</span><br><span class="line">fastcgi_index index.php;</span><br><span class="line">fastcgi_param SCRIPT_FILENAME /code<span class="variable">$fastcgi_script_name</span></span><br></pre></td></tr></table></figure><h4 id="Nginx连接Fastcgi服务器配置"><a href="#Nginx连接Fastcgi服务器配置" class="headerlink" title="Nginx连接Fastcgi服务器配置"></a>Nginx连接Fastcgi服务器配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/php.conf</span><br><span class="line"> server &#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> server_name php.test.com;</span><br><span class="line"> root /code;</span><br><span class="line"> location / &#123;</span><br><span class="line"> index index.php index.html;</span><br><span class="line">&#125;</span><br><span class="line"> location ~ \.php$ &#123;</span><br><span class="line"> fastcgi_pass 127.0.0.1:9000;</span><br><span class="line"> fastcgi_param SCRIPT_FILENAME</span><br><span class="line"> $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"> include fastcgi_params;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">systemctl restart nginx <span class="comment"># 修改host文件</span></span><br><span class="line"><span class="comment"># 测试php</span></span><br><span class="line">mkidr /code</span><br><span class="line">vim /code/info.php</span><br><span class="line"> &lt;?php</span><br><span class="line"> phpinfo();</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试数据库连接</span></span><br><span class="line">vim /code/mysqli.php</span><br><span class="line"> &lt;?php</span><br><span class="line"> <span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"> <span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"> <span class="variable">$password</span> = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line"> <span class="variable">$conn</span> = mysqli_connect(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"> <span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line"> die(<span class="string">&quot;Connection failed: &quot;</span> . mysqli_connect_error());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">echo</span> <span class="string">&quot;连接MySQL...成功！&quot;</span>;</span><br><span class="line">?&gt;</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h3 id="wordpress部署"><a href="#wordpress部署" class="headerlink" title="wordpress部署"></a>wordpress部署</h3><h4 id="Nginx虚拟主机"><a href="#Nginx虚拟主机" class="headerlink" title="Nginx虚拟主机"></a>Nginx虚拟主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/wordpress.conf</span><br><span class="line"> server &#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> server_name blog.test.com;</span><br><span class="line"> root /code/wordpress;</span><br><span class="line"> index index.php index.html;</span><br><span class="line"> location ~ \.php$ &#123;</span><br><span class="line"> root /code/wordpress;</span><br><span class="line"> fastcgi_pass 127.0.0.1:9000;</span><br><span class="line"> fastcgi_index index.php;</span><br><span class="line"> fastcgi_param SCRIPT_FILENAME</span><br><span class="line"> $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"> include fastcgi_params;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx <span class="comment"># 修改hosts blog.test.com</span></span><br></pre></td></tr></table></figure><h4 id="wordpress源码"><a href="#wordpress源码" class="headerlink" title="wordpress源码"></a>wordpress源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /code</span><br><span class="line">wget https://cn.wordpress.org/latest-zh_CN.tar.gz</span><br><span class="line">tar xzvf latest-zh_CN.tar.gz</span><br><span class="line"><span class="built_in">chown</span> -R lnmp.lnmp /code/wordpress</span><br></pre></td></tr></table></figure><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4> mysql -uroot -p123456 -e “create database wordpress;show databases;”<h4 id="设置文件上传大小限制"><a href="#设置文件上传大小限制" class="headerlink" title="设置文件上传大小限制"></a>设置文件上传大小限制</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/wordpress.conf</span><br><span class="line"> ...</span><br><span class="line"> client_max_body_size 100m;</span><br><span class="line"><span class="comment"># 还是失败</span></span><br><span class="line">vim /etc/php.ini</span><br><span class="line"> upload_max_filesize = 1000M</span><br><span class="line"><span class="comment"># 发现还有post_max_size的限制</span></span><br><span class="line">vim /etc/php.ini</span><br><span class="line"> post_max_size = 800M</span><br><span class="line">systemctl restart php-fpm</span><br></pre></td></tr></table></figure><h3 id="wecenter"><a href="#wecenter" class="headerlink" title="wecenter"></a>wecenter</h3><h4 id="Nginx虚拟主机-1"><a href="#Nginx虚拟主机-1" class="headerlink" title="Nginx虚拟主机"></a>Nginx虚拟主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/conf.d/wecenter.conf</span><br><span class="line"> server &#123;</span><br><span class="line"> listen 80;</span><br><span class="line"> server_name wecenter.test.com;</span><br><span class="line"> root /code/wecenter;</span><br><span class="line"> index index.php index.html;</span><br><span class="line"> location ~ \.php$ &#123;</span><br><span class="line"> fastcgi_pass 127.0.0.1:9000;</span><br><span class="line"> fastcgi_index index.php;</span><br><span class="line"> fastcgi_param SCRIPT_FILENAME</span><br><span class="line"> $document_root<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"> include fastcgi_params;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">nginx -t</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h4 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /code/wecenter</span><br><span class="line"><span class="built_in">cd</span> /code/wecenter</span><br><span class="line">wget -O WeCenter_3-6-1.zip https://download.s21i.faiusr.com/23126342/0/0/ABUIABBPGAAgjvmphwYowKnuxwc.zip?f=WeCenter_3-6-1.zip&amp;v=1625980046</span><br><span class="line">yum install -y unzip</span><br><span class="line">unzip WeCenter_3-6-1.zip</span><br><span class="line"><span class="built_in">chown</span> -R lnmp.lnmp /code/wecenter/</span><br></pre></td></tr></table></figure><h4 id="数据库-1"><a href="#数据库-1" class="headerlink" title="数据库"></a>数据库</h4> mysql -uroot -p123456 -e “create database wecenter;show databases;”</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LNMP&quot;&gt;&lt;a href=&quot;#LNMP&quot; class=&quot;headerlink&quot; title=&quot;LNMP&quot;&gt;&lt;/a&gt;LNMP&lt;/h2&gt;&lt;p&gt;LNMP是一套技术的组合，L&amp;#x3D;Linux、N&amp;#x3D;Nginx、M&amp;#x3D;MySQL或Mariadb、P&amp;</summary>
      
    
    
    
    <category term="linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/linux/"/>
    
    
    <category term="linux" scheme="http://xczf.shop/tags/linux/"/>
    
    <category term="mariadb" scheme="http://xczf.shop/tags/mariadb/"/>
    
  </entry>
  
  <entry>
    <title>Nginx</title>
    <link href="http://xczf.shop/2021/02/03/nginx/"/>
    <id>http://xczf.shop/2021/02/03/nginx/</id>
    <published>2021-02-03T11:00:41.000Z</published>
    <updated>2023-10-31T06:09:11.810Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>官网：<a href="https://nginx.org/">https://nginx.org/</a><br>特点：模块化的设计，高可靠性（行时间能够满足预计时间），低内存消耗，使用异步IO模型<br>异步IO详解：<a href="https://segmentfault.com/a/1190000003063859#item-3-13">https://segmentfault.com/a/1190000003063859#item-3-13</a></p><h3 id="Nginx进程结构"><a href="#Nginx进程结构" class="headerlink" title="Nginx进程结构"></a>Nginx进程结构</h3><ul><li><strong>多进程方式</strong>:服务器每接收到一个请求就有主进程就会生成子进程响应，直到关闭连接。优点处理速度快，子进程是相互独立的，但是一但请求过大，服务器就会崩溃。</li><li><strong>多线程方式</strong>:收到请求会有服务进程派生出一个线程来个客户方进行交互，线程的开销远远小于进程。缺点多个线程位于同一个进程内的时候，可以相互访问同样的内存地址空间，所以相互影响，主进程dead则所有子线程都不能工作。<br>Nginx是多进程组织模型，由一个由<strong>Master主进程和Worker工作进程</strong>组成，Nginx里也有线程。<h3 id="Nginx进程间通信"><a href="#Nginx进程间通信" class="headerlink" title="Nginx进程间通信"></a>Nginx进程间通信</h3>root启用⼯作进程生成主进程⽣，主进程⽤<strong>fork()函数</strong>在Nginx启动中根据配置文件的需求生成工作进程的数量，生成一个工作表统计未释放的工作进程。<br>主进程指向⼯作进程的单向通道，包含了主进程向⼯作进程发出的指令、⼯作进程ID、⼯作进程在⼯作进程表中的索引和必要的⽂件描述符等信息，<strong>工作进程只能监听内容之后读取指令</strong>。<br>⼯作进程之间能够取得彼此的信息，建⽴管道即可通信，由于⼯作进程之间是完全隔离的，因此<strong>进程想要知道另外⼀个进程的状态信息就只能通过主进程来设置</strong>。<br>主进程在⽣成⼯作进程后会在⼯作进程表中进⾏遍历，新进程的ID以及针对该进程建⽴的管道句柄<strong>传递给⼯作进程中的其他进程</strong>，为⼯作进程之间的通信做准备，当⼯作进程1向⼯作进程2发送指令的时候，⾸先在主进程给它的其他⼯作进程⼯作信息中找到2的进程ID，然后将正确的指令写⼊指向进程2的管道，⼯作进程2捕获到管道中的事件后，解析指令并进⾏相关操作，这样就完成了⼯作进程之间的通信</li></ul><hr><p><img src="/image/nginx/1.png" alt="1"></p><hr><h3 id="IO多路复用机制"><a href="#IO多路复用机制" class="headerlink" title="IO多路复用机制"></a>IO多路复用机制</h3><p>文件描述: <a href="https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E">https://baike.baidu.com/item/%E6%96%87%E4%BB%B6%E6%8F%8F%E8%BF%B0%E</a><br>7%AC%A6&#x2F;9809582?fr&#x3D;aladdin<br>详情: <a href="https://xczf.shop/2023/01/31/linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/">https://xczf.shop/2023/01/31/linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/</a><br>select:轮询,将所有正在监听的文件描述符<strong>都放到一个数组里面</strong>（最大为1024）<br>poll:轮询，解决了数组最大1024的问题，因为采用了链表的方式存储<br>epoll:触发了event后会自动去通知，基于事件的通知方式</p><h3 id="连接建立和请求处理过程"><a href="#连接建立和请求处理过程" class="headerlink" title="连接建立和请求处理过程"></a>连接建立和请求处理过程</h3><p>  Nginx启动时，Master进程，加载配置文件-&gt;Master进程，初始化监听的socket-&gt;Master进程，fork出多个Worker进程-&gt;Worker进程，竞争新的连接，获胜方通过三次握手，建立Socket连接，并处理请求</p><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加repo仓库</span></span><br><span class="line">vim /etc/yum.repos.d/nginx.repo</span><br><span class="line"> [nginx]</span><br><span class="line"> name=nginx repo</span><br><span class="line"> baseurl=https://nginx.org/packages/centos/7/<span class="variable">$basearch</span>/</span><br><span class="line"> gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">yum makecache</span><br><span class="line">yum install -y epel-release</span><br><span class="line">yum -y install nginx</span><br><span class="line">yum info nginx <span class="comment"># 查看版本</span></span><br></pre></td></tr></table></figure><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>官方包链接：<a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget</span><br><span class="line">wget https://nginx.org/download/nginx-xxx.tar.gz -P</span><br><span class="line">/usr/local/src/</span><br><span class="line"><span class="built_in">cd</span> /usr/local/src</span><br><span class="line">tar xvzf nginx-xx</span><br><span class="line"><span class="built_in">cd</span> nginx-xx</span><br><span class="line">./configure --<span class="built_in">help</span> <span class="comment"># 查看编译的参数配置的帮助</span></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line">yum -y install gcc pcre-devel openssl-devel zlib-devel</span><br><span class="line">useradd -r -s /sbin/nologin nginx</span><br><span class="line"></span><br><span class="line">./configure --prefix=/apps/nginx \</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_realip_module</span><br><span class="line"> make -j 8 &amp;&amp; make install <span class="comment"># 多线程安装</span></span><br><span class="line"><span class="built_in">chown</span> -R nginx.nginx /apps/nginx <span class="comment"># 改变属组属主</span></span><br><span class="line"><span class="built_in">ln</span> -s /apps/nginx/sbin/nginx /usr/bin/</span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">systemctl start nginx.service</span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭</span></span><br><span class="line">systemctl stop nginx,service</span><br><span class="line">nginx -s stop</span><br></pre></td></tr></table></figure><h4 id="四个主要的目录"><a href="#四个主要的目录" class="headerlink" title="四个主要的目录"></a>四个主要的目录</h4><ul><li>conf:保存nginx所有的配置文件，其中nginx.conf是nginx服务器的最核心的配置文件，其他.conf则是用来配置nginx相关的功能。（mime.types：MIME多用途互联网邮件扩展类型，MIME消息能包含文本、图像、音频、视频以及其他应用程序专用的数据，是设定某种扩展名的文件用一种应用程序来打开的方式类型，当该扩展名文件被访问的时候，浏览器会自动使用指定应用程序来打开。<br>MIME参考文档:<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types%EF%BC%89">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types）</a></li><li>html:nginx服务器的web文件，有一个50x的web文件是默认的错误页面提示页面。</li><li>logs:用来保存nginx服务器的访问日志错误日志，<strong>pid文件应该放置于run目录下，并且修改nginx.conf</strong>。</li><li>sbin:保存nginx二进制启动脚本，可以接受不同的参数以实现不同的功能。<h5 id="nginx自启动文件"><a href="#nginx自启动文件" class="headerlink" title="nginx自启动文件"></a>nginx自启动文件</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制同一版本的nginx的yum安装生成的service文件</span></span><br><span class="line">vim /usr/lib/systemd/system/nginx.service</span><br><span class="line">[Unit]</span><br><span class="line">Description=The nginx HTTP and reverse proxy server</span><br><span class="line">Documentation=http://nginx.org/en/docs/</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">Wants=network-online.target</span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/apps/nginx/run/nginx.pid</span><br><span class="line">ExecStart=/apps/nginx/sbin/nginx -c /apps/nginx/conf/nginx.conf</span><br><span class="line">ExecReload=/bin/kill -s HUP <span class="variable">$MAINPID</span></span><br><span class="line">ExecStop=/bin/kill -s TERM <span class="variable">$MAINPID</span></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="comment"># 重载</span></span><br><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h2 id="Nginx核心配置"><a href="#Nginx核心配置" class="headerlink" title="Nginx核心配置"></a>Nginx核心配置</h2><h3 id="主配置文件结构"><a href="#主配置文件结构" class="headerlink" title="主配置文件结构"></a>主配置文件结构</h3>main block：主配置段，全局配置段<br>event 事件驱动相关的配置<br>http&#x2F;https 协议相关配置段<br><em>默认配置文件不包括下面两个块</em><br>mail 协议相关配置段<br>stream 服务器相关配置段</li></ul><p><strong>include &#x2F;apps&#x2F;nginx&#x2F;conf.d&#x2F;？.conf  导入其他路径的配置文件</strong></p><hr><p><img src="/image/nginx/2.png" alt="2"></p><hr><p><img src="/image/nginx/3.png" alt="3"></p><hr><h4 id="CPU性能优化"><a href="#CPU性能优化" class="headerlink" title="CPU性能优化"></a>CPU性能优化</h4><p>  Nginx工作进程绑定到指定的CPU核心，默认Nginx是不进行进程绑定的，绑定并不是意味着当前nginx进程独占一核心CPU，但是可以保障此进程不会运行在其他核心上，极大减少了nginx的工作进程在不同的cpu核心上的来回跳转，减少了cpu对进程的资源分配与回收以及内存管理等，因此可以有效的提升nginx服务器的性能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf.d/nginx.conf</span><br><span class="line"><span class="comment">#启动Nginx工作进程的数量，一般设为和CPU核心数相同</span></span><br><span class="line">worker_processes 4</span><br><span class="line">worker_cpu_affinity 1000 0100 0010 0001;</span><br><span class="line"><span class="comment"># 查看nginx进程对应的CPU</span></span><br><span class="line">watch -n.5 <span class="string">&#x27;ps axo pid,cmd,psr |grep nginx&#x27;</span></span><br><span class="line">6834 nginx: master process /apps 2</span><br><span class="line">47621 nginx: worker process 3</span><br><span class="line">47622 nginx: worker process 2</span><br><span class="line">47623 nginx: worker process 1</span><br><span class="line">47624 nginx: worker process 0</span><br><span class="line"><span class="comment"># 压力测试下的核心就不会来回跳</span></span><br><span class="line">yum install -y httpd-tools</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span>;<span class="keyword">do</span> ab -c 1000 -n 2000 http://127.0.0.1/;<span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="错误日志记录"><a href="#错误日志记录" class="headerlink" title="错误日志记录"></a>错误日志记录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 错误日志记录配置语法：error_log file [debug | info | notice | warn | error |crit | alert |emerg]</span></span><br><span class="line">vim /apps/nginx/conf/nginx.conf</span><br><span class="line">error_log logs/error.log;</span><br><span class="line">error_log logs/error.log notice;</span><br></pre></td></tr></table></figure><h4 id="其他优化配置"><a href="#其他优化配置" class="headerlink" title="其他优化配置"></a>其他优化配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">daemon off; <span class="comment"># 前台运行nginx服务</span></span><br><span class="line">master_process off|on; <span class="comment"># 是否开启Nginx的master-worker工作模式，，默认为on</span></span><br><span class="line">worker_connections 65536; <span class="comment"># 设置单个工作进程的最大并发连接数</span></span><br><span class="line">use epoll; <span class="comment"># 使用epoll事件驱动，Nginx支持众多的事件驱动，比如：select、poll、epoll,只能设置在events模块中</span></span><br><span class="line">accept_mutex on; <span class="comment"># on为同一时刻一个请求轮流由work进程处理，而防止被同时唤醒所有worker，避免多个睡眠进程被唤醒的设置，默认为off,，建议设置为on</span></span><br><span class="line">multi_accept on; <span class="comment"># Nginx服务器的每个工作进程可以同时接受多个新的网络连接，off默认为一个工作进程只能一次接受一个新的网络连接，打开后几个同时接受多个，建议设置为on</span></span><br></pre></td></tr></table></figure><h4 id="httpd协议模块"><a href="#httpd协议模块" class="headerlink" title="httpd协议模块"></a>httpd协议模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">include mime.types; <span class="comment"># 导入支持的文件类型，是相对于/apps/nginx/conf的目录</span></span><br><span class="line">default_type application/octet-stream; <span class="comment"># 除mime.types中文件类型外，设置其他文件默认类型，访问其他类型时会提示下载不匹配的类型文件</span></span><br><span class="line">tcp_nopush on;<span class="comment">#在开启了sendfile的情况下，合并请求后统一发送给客户端</span></span><br><span class="line">tcp_nodelay off;<span class="comment">#在开启了keeplived模式下的连接是否启用TCP_NODELAY选项，当为off时，延迟0.2s发送，默认on时，不延迟</span></span><br><span class="line">listen 80;<span class="comment"># 设置监听端口</span></span><br><span class="line">server_name localhost;<span class="comment"># 设置server name,可以空格隔开写多个，并支持正则表达</span></span><br></pre></td></tr></table></figure><p>修改curl下的报文头部信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim src/core/nginx.h</span><br><span class="line"> define NGINX_VERSION <span class="string">&quot;1.68.9&quot;</span></span><br><span class="line"> define NGINX_VER <span class="string">&quot;xcnginx&quot;</span> NGINX_VERSION</span><br><span class="line"><span class="comment"># 如果server_tokens off, 修改 src/http/ngx_http_header_filter_module.c</span></span><br><span class="line">vim /src/http/ngx_http_header_filter_module.c</span><br><span class="line"> static char ngx_http_server_string[] = <span class="string">&#x27;Server: xcnginx&#x27;</span> CRLF;</span><br><span class="line"><span class="comment"># 后重新编译，见源码安装</span></span><br></pre></td></tr></table></figure><h3 id="核心配置"><a href="#核心配置" class="headerlink" title="核心配置"></a>核心配置</h3><h4 id="PC和mobile"><a href="#PC和mobile" class="headerlink" title="PC和mobile"></a>PC和mobile</h4><p>  User Agent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /apps/nginx/conf.d</span><br><span class="line">vim /apps/nginx/conf/nginx.conf</span><br><span class="line"> include /apps/nginx/conf.d/*.conf; <span class="comment"># 移入http里</span></span><br><span class="line"><span class="comment"># 创建pc网站配置</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /apps/nginx/html/pc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello computer&quot;</span> &gt; /apps/nginx/html/pc/index.html</span><br><span class="line">vim /apps/nginx/conf.d/pc.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.pc.com;</span><br><span class="line">location / &#123;</span><br><span class="line">root /apps/nginx/html/pc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 需要在客服端加入域名解析</span></span><br><span class="line"><span class="comment"># 创建moblie网站配置</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /apps/nginx/html/moblie</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello moblie&quot;</span> &gt; /apps/nginx/html/moblie/index.html</span><br><span class="line">vim /apps/nginx/conf.d/moblie.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name www.moblie.com;</span><br><span class="line">location / &#123;</span><br><span class="line">root /apps/nginx/html/moblie;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">systemctl reload nginx</span><br></pre></td></tr></table></figure><h4 id="root与alias"><a href="#root与alias" class="headerlink" title="root与alias"></a>root与alias</h4><p>root：web的家目录，定义location的时候，文件的绝对路径等于root+location</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf.d/test.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name a.test.com;</span><br><span class="line">location / &#123;</span><br><span class="line">root /apps/nginx/html/www;</span><br><span class="line">&#125;</span><br><span class="line">location /about &#123;</span><br><span class="line">root /apps/nginx/html/about; <span class="comment"># 访问的是/apps/nginx/html/下的about的about，不需要加about root /apps/nginx/html/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 域名解析</span></span><br><span class="line">***</span><br><span class="line"><span class="built_in">mkdir</span> -p /apps/nginx/html/about</span><br><span class="line"><span class="built_in">echo</span> about &gt; /apps/nginx/html/about/index.html</span><br><span class="line"><span class="comment"># 重启Nginx并访问测试会404</span></span><br></pre></td></tr></table></figure><p>alias：定义路径别名，会把访问的路径重新定义到其指定的路径，文档映射的另一种机制；仅能用<br>于location上下文，使用较少</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /about &#123; <span class="comment"># 注意about后不要加/，使用alias的时候uri后面加了斜杠，下面的路径也必须加，不然403错误</span></span><br><span class="line"><span class="built_in">alias</span> /apps/nginx/html/about; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="location使用"><a href="#location使用" class="headerlink" title="location使用"></a>location使用</h3><p>location官方:<a href="https://nginx.org/en/docs/http/ngx_http_core_module.html#location">https://nginx.org/en/docs/http/ngx_http_core_module.html#location</a></p><h4 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location = /logo.jpg &#123;</span><br><span class="line">root /apps/nginx/html/images; <span class="comment"># 精确匹配指定路径的文件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="区分大小写"><a href="#区分大小写" class="headerlink" title="区分大小写"></a>区分大小写</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ /A.?\.jpg &#123; <span class="comment"># ~ 实现区分大小写的模糊匹配</span></span><br><span class="line">index index.html;</span><br><span class="line">root /apps/nginx/html/images;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">mv</span> logo.jpg Aa.jpg <span class="comment"># 可以访问</span></span><br><span class="line"><span class="built_in">mv</span> logo.jpg aa.jpg <span class="comment"># 不可以访问</span></span><br></pre></td></tr></table></figure><h4 id="不区分大小写"><a href="#不区分大小写" class="headerlink" title="不区分大小写"></a>不区分大小写</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location ~* /A.?\.jpg &#123; <span class="comment"># ~*用来对用户请求的uri做模糊匹配</span></span><br><span class="line">index index.html;</span><br><span class="line">root /apps/nginx/html/images;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h4><p><em><em>location &#x3D;  &gt;  location ^~ 路径  &gt;  location <del>,</del></em> 正则  &gt;  location 完整路径  &gt;  location<br>部分起始路径  &gt;  默认（&#x2F;）</em>*</p><h3 id="Nginx四层访问控制"><a href="#Nginx四层访问控制" class="headerlink" title="Nginx四层访问控制"></a>Nginx四层访问控制</h3><h4 id="白名单-模块ngx-http-access-module"><a href="#白名单-模块ngx-http-access-module" class="headerlink" title="白名单 模块ngx_http_access_module"></a>白名单 模块ngx_http_access_module</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf.d/baimingdan.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name a.baimingdan.com;</span><br><span class="line">location / &#123;</span><br><span class="line">root /apps/nginx/html/www;</span><br><span class="line">location = /1.jpg &#123;</span><br><span class="line">index index.html;</span><br><span class="line">root /apps/nginx/html/image;</span><br><span class="line">allow 192.168.8.3;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 禁止了主机访问，虚拟机本机可以访问刚才的1.jpg</span></span><br></pre></td></tr></table></figure><h4 id="Nginx账户认证功能-ngx-http-auth-basic-module模块"><a href="#Nginx账户认证功能-ngx-http-auth-basic-module模块" class="headerlink" title="Nginx账户认证功能 ngx_http_auth_basic_module模块"></a>Nginx账户认证功能 ngx_http_auth_basic_module模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建用户</span></span><br><span class="line"><span class="comment"># -c 创建用户</span></span><br><span class="line"><span class="comment"># -b 非交互方式提交密码</span></span><br><span class="line">htpasswd -cb /apps/nginx/conf/.htpasswd user1 123456</span><br><span class="line">htpasswd -cb /apps/nginx/conf/.htpasswd user2 123456</span><br><span class="line">vim /apps/nginx/conf.d/jiaohu.conf</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name a.jiaohu.com;</span><br><span class="line">auth_basic <span class="string">&quot;login password&quot;</span>;</span><br><span class="line">auth_basic_user_file /apps/nginx/conf/.htpasswd;</span><br><span class="line">  location = /1.jpg &#123;</span><br><span class="line">index index.html;</span><br><span class="line">root /apps/nginx/html/image;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h4><p>定义错误页，以指定的响应状态码进行响应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf.d/test.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name a.error.com;</span><br><span class="line">error_page 404 /40x.html; <span class="comment"># 定义错位的代码指向的页面</span></span><br><span class="line">location = /1.jpg &#123;</span><br><span class="line">index index.html;</span><br><span class="line">root /apps/nginx/html/image;</span><br><span class="line">  &#125;</span><br><span class="line">location /40x.html&#123;</span><br><span class="line">root /apps/nginx/html</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义错误日志"><a href="#自定义错误日志" class="headerlink" title="自定义错误日志"></a>自定义错误日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">error_page 500 502 503 504 404 403 /error.html;</span><br><span class="line">access_log /apps/nginx/logs/test_access.log;</span><br><span class="line">error_log /apps/nginx/logs/test_error.log;</span><br><span class="line">location = /error.html &#123;</span><br><span class="line">root html;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="长连接配置"><a href="#长连接配置" class="headerlink" title="长连接配置"></a>长连接配置</h4><p>keepalive_timeout timeout [header_timeout];<br>设定保持连接超时时长，0表示禁止长连接，默认为75s,通常配置在http字段作为站点全局配置<br>keepalive_requests number;<br>在一次长连接上所允许请求的资源的最大数量，默认为100次，建议适当调大</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">yum install telnet -y</span><br><span class="line">vim /apps/nginx/conf/nginx.conf</span><br><span class="line">http &#123;</span><br><span class="line">keepalive_requests 3;</span><br><span class="line">keepalive_timeout 65 60;</span><br><span class="line"><span class="comment"># 开启长连接后，返回客户端的会话保持时间为60s，单次长连接累计请求达到指定次数请求或65秒就会被断开，后面的60为发送给客户端应答报文头部中显示的超时时间设置为60s，如不设置客户端将不显示超时时间。</span></span><br><span class="line">keep-Alive:<span class="built_in">timeout</span>=60;</span><br><span class="line"><span class="comment"># 使用命令测试</span></span><br><span class="line">telnet a.test.com 80</span><br><span class="line">...</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">GET / HTTP/1.1</span><br></pre></td></tr></table></figure><h4 id="下载服务器-ngx-http-autoindex-module模块"><a href="#下载服务器-ngx-http-autoindex-module模块" class="headerlink" title="下载服务器 ngx_http_autoindex_module模块"></a>下载服务器 ngx_http_autoindex_module模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">autoindex on|off;</span><br><span class="line"><span class="comment"># 自动文件索引功能，默认off</span></span><br><span class="line">autoindex_exact_size on|off;</span><br><span class="line"><span class="comment"># 计算文件确切大小,off显示大概大小,默认on</span></span><br><span class="line">autoindex_localtime on|off;</span><br><span class="line"><span class="comment"># 显示本机时间,默认off</span></span><br><span class="line">autoindex_format html|xml|json|jsonp;</span><br><span class="line"><span class="comment"># 显示索引的页面分割，默认html</span></span><br><span class="line">limit_rate rate;</span><br><span class="line"><span class="comment"># 限制响应客户端传输速率(除GET和HEAD以外的所有方法)</span></span><br></pre></td></tr></table></figure><p>下载站点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /apps/nginx/html/www/download</span><br><span class="line"><span class="built_in">cd</span> /apps/nginx/html/www/download/</span><br><span class="line"><span class="built_in">touch</span>  f&#123;1,2&#125;</span><br><span class="line">vim /apps/nginx/conf.d/download.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name file.download.com;</span><br><span class="line">location /download &#123;</span><br><span class="line">autoindex on; <span class="comment"># 自动索引功能,开启才会展示出文件列表</span></span><br><span class="line">autoindex_exact_size off; <span class="comment"># 关闭详细文件大小统计，让文件大小显示MB，GB单位，默认为b</span></span><br><span class="line">autoindex_localtime on; <span class="comment"># on表示显示本机时间</span></span><br><span class="line">limit_rate 1024k; <span class="comment"># 限速，默认不限速</span></span><br><span class="line">root /apps/nginx/html/www;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><h5 id="浏览器禁用长连接"><a href="#浏览器禁用长连接" class="headerlink" title="浏览器禁用长连接"></a>浏览器禁用长连接</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keepalive_disable none | browser ...;</span><br></pre></td></tr></table></figure><h5 id="限制客户端使用指定的请求方法"><a href="#限制客户端使用指定的请求方法" class="headerlink" title="限制客户端使用指定的请求方法"></a>限制客户端使用指定的请求方法</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf.d/limit.conf</span><br><span class="line">location /download &#123;</span><br><span class="line">root /apps/nginx/html/www;</span><br><span class="line">autoindex on;</span><br><span class="line">autoindex_exact_size off;</span><br><span class="line">autoindex_localtime on;</span><br><span class="line">limit_except POST &#123; <span class="comment">#相当于只允许底下允许列表里的使用除了post外的其他方</span></span><br><span class="line">法</span><br><span class="line">allow 192.168.8.3; <span class="comment">#只有浏览器可以使用除了post外的其他方法，其他人只能用post</span></span><br><span class="line">deny all;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">systemctl restart nginx</span><br></pre></td></tr></table></figure><h5 id="启用I-x2F-O-AIO-功能-异步可以提高效率"><a href="#启用I-x2F-O-AIO-功能-异步可以提高效率" class="headerlink" title="启用I&#x2F;O(AIO)功能,异步可以提高效率"></a>启用I&#x2F;O(AIO)功能,异步可以提高效率</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/src/nginx-xxx</span><br><span class="line">./configure --prefix=/apps/nginx \</span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-file-aio <span class="comment"># 需要编译开启 --with-file-aio</span></span><br><span class="line">make -j 8 &amp;&amp; make install</span><br><span class="line">vim /apps/nginx/conf.d/limit.conf</span><br><span class="line">server&#123;</span><br><span class="line">...</span><br><span class="line">aio on;</span><br><span class="line">...</span><br><span class="line">directio size | off; <span class="comment"># 文件到磁盘的时候大小大于size的时候，直接写磁盘，而非写缓存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx高级配置"><a href="#Nginx高级配置" class="headerlink" title="Nginx高级配置"></a>Nginx高级配置</h3><h4 id="Nginx状态页-ngx-http-stub-status-module模块"><a href="#Nginx状态页-ngx-http-stub-status-module模块" class="headerlink" title="Nginx状态页 ngx_http_stub_status_module模块"></a>Nginx状态页 ngx_http_stub_status_module模块</h4><p>需要添加编译参数–with-http_stub_status_module,否则配置完成之后监测会是提示语法错误<br><strong>状态页显示的是整个服务器的状态</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf.d/nginx_status.conf</span><br><span class="line">location /nginx_status &#123;</span><br><span class="line">stub_status on;</span><br><span class="line">auth_basic <span class="string">&quot;auth login&quot;</span>;</span><br><span class="line">auth_basic_user_file /apps/nginx/conf/.htpasswd;</span><br><span class="line">allow 192.168.0.0/16; <span class="comment"># 白名单</span></span><br><span class="line">allow 127.0.0.1;</span><br><span class="line">deny all;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><img src="/image/nginx/4.png" alt="4"></p><hr><p>Active connections 2 ：Nginx正在处理的活动连接数2个。<br>server 2 ：Nginx启动到现在共处理了2个连接<br>accepts 2 ：Nginx启动到现在共成功创建2次握手<br>handled requests 1 ：总共处理了 1 次请求<br>Reading:Nginx 读取到客户端的 Header 信息数，数值越大，说明排队越长，性能不足<br>Writing:Nginx 返回给客户端 Header 信息数，数值越大，说明访问量越大<br>Waiting:Nginx 已经处理完正在等候下一次请求指令的驻留链接</p><h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h4><p>  第三模块是对nginx的功能扩展，第三方模块需要在编译安装Nginx的时候使用参数–add-module&#x3D;PATH指定路径添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/openresty/echo-nginxmodule/archive/refs/heads/master.zip</span><br><span class="line">unzip master.zip</span><br><span class="line"><span class="built_in">mv</span> echo-nginx-module-master echo-nginx-module</span><br><span class="line"><span class="comment"># 编译...</span></span><br><span class="line">--add-module=/usr/local/src/echo-nginx-module <span class="comment"># 注意路径</span></span><br><span class="line">make -j 8 &amp;&amp; make install</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Nginx变量"><a href="#Nginx变量" class="headerlink" title="Nginx变量"></a>Nginx变量</h4><p>官方文档：<a href="https://nginx.org/en/docs/varindex.html">https://nginx.org/en/docs/varindex.html</a><br>常用变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="comment"># 存放了客户端公网IP</span></span><br><span class="line"><span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"><span class="comment"># 此变量表示将客户端IP追加请求报文中X-Forwarded-For首部字段，多个IP之间用逗号分隔，如果请求中没有X-Forwarder-For，就使用$remote_addr</span></span><br><span class="line"><span class="variable">$args</span>;</span><br><span class="line"><span class="comment"># 变量中存放了URL中的参数</span></span><br><span class="line"><span class="variable">$document_root</span>;</span><br><span class="line"><span class="comment"># 保存了针对当前资源的系统根目录</span></span><br><span class="line"><span class="variable">$document_uri</span>;</span><br><span class="line"><span class="comment"># 保存了当前请求中不包含参数的URI,不包含请求的指令</span></span><br><span class="line"><span class="variable">$host</span>;</span><br><span class="line"><span class="comment"># 存放了请求的host名称</span></span><br><span class="line">limit_rate 10240;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$limit_rate</span>;</span><br><span class="line"><span class="comment"># 如果nginx服务器使用limit_rate配置了显示网络速率，则会显示，如果没有设置，则显示0</span></span><br><span class="line"><span class="variable">$remote_port</span>;</span><br><span class="line"><span class="comment"># 客户端请求Nginx服务器时随机打开的端口，这是每个客户端自己的端口</span></span><br><span class="line"><span class="variable">$remote_user</span>;</span><br><span class="line"><span class="comment"># 已经经过Auth Basic Module验证的用户名</span></span><br><span class="line"><span class="variable">$request_body_file</span>;</span><br><span class="line"><span class="comment"># 做反向代理时发给后端服务器的本地资源的名称</span></span><br><span class="line"><span class="variable">$request_method</span>;</span><br><span class="line"><span class="comment"># 请求资源的方式</span></span><br><span class="line"><span class="variable">$request_filename</span>;</span><br><span class="line"><span class="comment"># 当前请求的资源文件的磁盘路径，由root或alias指令与URL请求生成的文件绝对路径</span></span><br><span class="line"><span class="variable">$request_uri</span>;</span><br><span class="line"><span class="comment"># 包含请求参数的原始URI,不包含主机名，相当于:$document_uri?$args</span></span><br><span class="line"><span class="variable">$scheme</span>;</span><br><span class="line"><span class="comment"># 请求的协议</span></span><br><span class="line"><span class="variable">$server_protocol</span>;</span><br><span class="line"><span class="comment"># 保存了客户端请求资源使用的协议版本，例如：HTTP/1.0,HTTP/1.1,HTTP/2.0等等</span></span><br><span class="line"><span class="variable">$server_addr</span>;</span><br><span class="line"><span class="comment"># 保存了服务器的IP地址</span></span><br><span class="line"><span class="variable">$server_name</span>;</span><br><span class="line"><span class="comment"># 请求的服务器的主机名</span></span><br><span class="line"><span class="variable">$server_port</span>;</span><br><span class="line"><span class="comment"># 请求的服务器的端口号</span></span><br><span class="line"><span class="variable">$http_</span>&lt;name&gt;</span><br><span class="line"><span class="comment"># name为任意请求报文首部字段，表示记录请求报文的首部字段</span></span><br><span class="line"><span class="variable">$http_user_agent</span>;</span><br><span class="line"><span class="comment"># 客户端浏览器的详细信息</span></span><br><span class="line"><span class="variable">$http_cookie</span>;</span><br><span class="line"><span class="comment"># 客户端的cookie信息</span></span><br><span class="line"><span class="variable">$cookie_</span>&lt;name&gt;</span><br><span class="line"><span class="comment"># name为任意请求报文首部字段cookie的key名</span></span><br></pre></td></tr></table></figure><p><strong>自定义变量 :set $variable value;</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="variable">$name</span> bl;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span>;</span><br></pre></td></tr></table></figure><h4 id="Nginx访问日志-ngx-http-log-module模块"><a href="#Nginx访问日志-ngx-http-log-module模块" class="headerlink" title="Nginx访问日志 ngx_http_log_module模块"></a>Nginx访问日志 ngx_http_log_module模块</h4><p>自定义json格式日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">log_format access_json <span class="string">&#x27;&#123;&quot;@timestamp&quot;:&quot;$time_iso8601&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;host&quot;:&quot;$server_addr&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;clientip&quot;:&quot;$remote_addr&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;size&quot;:$body_bytes_sent,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;responsetime&quot;:$request_time,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;upstreamhost&quot;:&quot;$upstream_response_time&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;upstreamhost&quot;:&quot;$upstream_addr&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;http_host&quot;:&quot;$host&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;uri&quot;:&quot;$uri&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;xff&quot;:&quot;$http_x_forwarded_for&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;referer&quot;:&quot;$http_referer&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;tcp_xff&quot;:&quot;$proxy_protocol_addr&quot;,&#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;status&quot;:&quot;$status&quot;&#125;&#x27;</span>;</span><br><span class="line">access_log logs/access.log access_json;</span><br></pre></td></tr></table></figure><h4 id="Nginx压缩于-ngx-http-gzip-module模块"><a href="#Nginx压缩于-ngx-http-gzip-module模块" class="headerlink" title="Nginx压缩于 ngx_http_gzip_module模块"></a>Nginx压缩于 ngx_http_gzip_module模块</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启用或禁用gzip压缩，默认关闭</span></span><br><span class="line">gzip on | off;</span><br><span class="line"><span class="comment"># 压缩比由低到高1到9，默认为1</span></span><br><span class="line">gzip_comp_level level;</span><br><span class="line"><span class="comment"># 禁用IE6 gzip功能</span></span><br><span class="line">gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"><span class="comment"># gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class="line">gzip_min_length 1k;</span><br><span class="line"><span class="comment"># 启用压缩功能时，协议的最小版本，默认HTTP/1.1</span></span><br><span class="line">gzip_http_version 1.0 | 1.1;</span><br><span class="line"><span class="comment"># 指定Nginx服务需要向服务器申请的缓存空间的个数和大小，平台不同，默认：32 4k或者 16 8k;</span></span><br><span class="line">gzip_buffers number size;</span><br><span class="line"><span class="comment"># 指明仅对哪些类型的资源执行压缩操作，默认为gzip_types text/html,不用显示指定，否则出错</span></span><br><span class="line">gzip_types mime-type ...;</span><br><span class="line"><span class="comment"># 如果启用压缩，是否在相应报文首部插入&quot;vary: Accept-Encoding&quot;,一般建议打开</span></span><br><span class="line">gzip_vary on | off</span><br><span class="line"><span class="comment"># 重启nginx并进行访问测试压缩功能</span></span><br><span class="line">curl -I --compressed 127.0.0.1</span><br></pre></td></tr></table></figure><h3 id="https功能"><a href="#https功能" class="headerlink" title="https功能"></a>https功能</h3><p>https 实现过程如下：<br><strong>1. 客户端发起HTTPS请求<br>客户端访问某个web端的https地址，一般都是443端口<br>2. 服务端的配置<br>采用https协议的服务器必须要有一套证书，可以通过一些组织申请，也可以自己制作，目前<br>国内很多⽹站都⾃⼰做的，当你访问⼀个⽹站的时候提示证书不可信任就表示证书是⾃⼰做<br>的，证书就是⼀个公钥和私钥匙，就像⼀把锁和钥匙，正常情况下只有你的钥匙可以打开你的<br>锁，你可以把这个送给别⼈让他锁住⼀个箱⼦，⾥⾯放满了钱或秘密，别⼈不知道⾥⾯放了什<br>么⽽且别⼈也打不开，只有你的钥匙是可以打开的。<br>3. 传送证书<br>服务端给客户端传递证书，其实就是公钥，⾥⾯包含了很多信息，例如证书得到颁发机构、过<br>期时间等等。<br>4. 客户端解析证书<br>这部分⼯作是有客户端完成的，⾸先回验证公钥的有效性，⽐如颁发机构、过期时间等等，如<br>果发现异常则会弹出⼀个警告框提示证书可能存在问题，如果证书没有问题就⽣成⼀个随机<br>值，然后⽤证书对该随机值进⾏加密，就像2步骤所说把随机值锁起来，不让别⼈看到。<br>5. 传送4步骤的加密数据<br>就是将⽤证书加密后的随机值传递给服务器，⽬的就是为了让服务器得到这个随机值，以后客<br>户端和服务端的通信就可以通过这个随机值进⾏加密解密了。<br>6. 服务端解密信息<br>服务端用私钥解密5步骤加密后的随机值之后，得到了客户端传过来的随机值(私钥)，然后把<br>内容通过该值进⾏对称加密，对称加密就是将信息和私钥通过算法混合在⼀起，这样除非你知<br>道私钥，不然是⽆法获取其内部的内容，而正好客户端和服务端都知道这个私钥，所以只要机<br>密算法够复杂就可以保证数据的安全性。<br>7. 传输加密后的信息<br>服务端将⽤私钥加密后的数据传递给客户端，在客户端可以被还原出原数据内容<br>8. 客户端解密信息<br>客户端⽤之前⽣成的私钥获解密服务端传递过来的数据，由于数据⼀直是加密的，因此即使第<br>三⽅获取到数据也⽆法知道其详细内容。</strong></p><hr><p>配置参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ssl on | off;</span><br><span class="line">listen 443 ssl;</span><br><span class="line"><span class="comment"># 为指定的虚拟主机配置是否启用ssl功能，此功能在1.15.0废弃，使用listen [ssl]替代。</span></span><br><span class="line">ssl_certificate /path/to/file;</span><br><span class="line"><span class="comment"># 当前虚拟主机使用使用的公钥文件，一般是crt文件</span></span><br><span class="line">ssl_certificate_key /path/to/file;</span><br><span class="line"><span class="comment"># 当前虚拟主机使用的私钥文件，一般是key文件</span></span><br><span class="line">ssl_protocols [SSLv2] [SSLv3] [TLSv1] [TLSv1.1] [TLSv1.2];</span><br><span class="line"><span class="comment"># 支持ssl协议版本，早期为ssl现在是TSL，默认为后三个</span></span><br><span class="line">ssl_session_cache off | none | [<span class="built_in">builtin</span>[:size]] [shared:name:size];</span><br><span class="line"><span class="comment"># 配置ssl缓存</span></span><br><span class="line">    off：</span><br><span class="line">    <span class="comment"># 关闭缓存</span></span><br><span class="line">    none:</span><br><span class="line">    <span class="comment"># 通知客户端支持ssl session cache，但实际不支持</span></span><br><span class="line">    <span class="built_in">builtin</span>[:size]：</span><br><span class="line">    <span class="comment"># 使用OpenSSL内建缓存，为每worker进程私有</span></span><br><span class="line">[shared:name:size]：</span><br><span class="line"><span class="comment"># 在各worker之间使用一个共享的缓存，需要定义一个缓存名称和缓存空间大小，一兆可以存储4000个会话信息，多个虚拟主机可以使用相同的缓存名称。</span></span><br><span class="line">ssl_session_timeout time;</span><br><span class="line"><span class="comment"># 客户端连接可以复用ssl session cache中缓存的有效时长，默认5m</span></span><br></pre></td></tr></table></figure><h4 id="自签名证书-了解"><a href="#自签名证书-了解" class="headerlink" title="自签名证书(了解)"></a>自签名证书(了解)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成ca证书</span></span><br><span class="line"><span class="built_in">cd</span> /apps/nginx</span><br><span class="line"><span class="built_in">mkdir</span> certs &amp;&amp; <span class="built_in">cd</span> certs</span><br><span class="line">openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 3650 -out ca.crt</span><br><span class="line"><span class="comment"># 生成证书请求文件</span></span><br><span class="line">openssl req -newkey rsa:4096 -nodes -sha256 -keyout iproute.cn.key -out</span><br><span class="line">iproute.cn.csr</span><br><span class="line"><span class="comment"># 签发证书</span></span><br><span class="line">openssl x509 -req -days 36500 -<span class="keyword">in</span> iproute.cn.csr -CA ca.crt -CAkey ca.key -</span><br><span class="line">CAcreateserial -out iproute.cn.crt</span><br><span class="line"><span class="built_in">cat</span> iproute.cn.crt ca.crt &gt; iproute.crt</span><br><span class="line"><span class="comment"># 验证证书内容</span></span><br><span class="line">openssl x509 -<span class="keyword">in</span> iproute.cn.crt -noout -text</span><br><span class="line"><span class="comment"># 证书配置</span></span><br><span class="line">vim /apps/nginx/conf/nginx.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    ssl_certificate /apps/nginx/certs/iproute.crt;</span><br><span class="line">    ssl_certificate_key /apps/nginx/certs/iproute.cn.key;</span><br><span class="line">    ssl_session_cache shared:sslcache:20m;</span><br><span class="line">    ssl_session_timeout 10m;</span><br><span class="line">    root /apps/nginx/html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">vim /apps/nginx/conf.d/a.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen *:8080;</span><br><span class="line">server_name xuni.com;</span><br><span class="line">location / &#123;</span><br><span class="line">root /apps/html/a;</span><br><span class="line">index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">vim /apps/nginx/conf.d/b.conf</span><br><span class="line">server &#123;</span><br><span class="line">listen *:8080;</span><br><span class="line">server_name xuni.com;</span><br><span class="line">location / &#123;</span><br><span class="line">root /apps/html/b;</span><br><span class="line">index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Nginx&quot;&gt;&lt;a href=&quot;#Nginx&quot; class=&quot;headerlink&quot; title=&quot;Nginx&quot;&gt;&lt;/a&gt;Nginx&lt;/h2&gt;&lt;p&gt;官网：&lt;a href=&quot;https://nginx.org/&quot;&gt;https://nginx.org/&lt;/a&gt;&lt;br&gt;</summary>
      
    
    
    
    <category term="linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/linux/"/>
    
    
    <category term="linux" scheme="http://xczf.shop/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>案例：四则计算器</title>
    <link href="http://xczf.shop/2021/02/01/C%E7%9A%84%E5%9B%9B%E5%88%99%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://xczf.shop/2021/02/01/C%E7%9A%84%E5%9B%9B%E5%88%99%E8%AE%A1%E7%AE%97%E5%99%A8/</id>
    <published>2021-02-01T11:00:41.000Z</published>
    <updated>2023-11-06T09:02:06.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c语言四则计算器"><a href="#c语言四则计算器" class="headerlink" title="c语言四则计算器"></a>c语言四则计算器</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>运算符的优先级比sop栈栈顶的优先级高时，直接入栈。<br>运算符的优先级没有sop栈栈顶的优先级高时，则不断出栈并开始compute运算，直到该运算符的优先级比目前sop栈栈顶的运算符高为止。<br>当遇到右括号时，则不断出栈，符号栈出一个就开始计算一个，直至遇到左括号时停止。</p><h3 id="主函数-main-c"><a href="#主函数-main-c" class="headerlink" title="主函数 main.c"></a>主函数 main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,<span class="string">&quot;请输入需要运算式子&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line"></span><br><span class="line">datatype i,value = <span class="number">0</span>,flag = <span class="number">0</span>;</span><br><span class="line">datatype old_op;</span><br><span class="line"></span><br><span class="line">STACK *snum,*sop;</span><br><span class="line">snum = st_create(); <span class="comment">// 创建存放数字的栈</span></span><br><span class="line"><span class="keyword">if</span>(snum == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">sop = st_create(); <span class="comment">// 创建存放运算符的栈</span></span><br><span class="line"><span class="keyword">if</span>(sop == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);     </span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(str[i] != <span class="string">&#x27;\0&#x27;</span>)&#123; <span class="comment">// 开始遍历字符数字中每一个字符</span></span><br><span class="line"><span class="keyword">if</span>(str[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; str[i] &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;<span class="comment">//符合num的</span></span><br><span class="line">value = value * <span class="number">10</span> + (str[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">//利用ASCII码化为整数</span></span><br><span class="line">flag = <span class="number">1</span>;   <span class="comment">// 用标志位存放两位数的数字</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;        <span class="comment">// 遇到符号执行else语句</span></span><br><span class="line"><span class="keyword">if</span>(flag)&#123;   <span class="comment">// 数字入栈</span></span><br><span class="line">st_push(snum,&amp;value);  <span class="comment">//数字入栈，并且value和flag需要为0</span></span><br><span class="line">value = <span class="number">0</span>; </span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(str[i] == <span class="string">&#x27;)&#x27;</span>)   <span class="comment">// 开始出栈，并开始计算</span></span><br><span class="line">deal_bracket(snum,sop);</span><br><span class="line"><span class="keyword">else</span> <span class="comment">// +-*/( 入符号栈     </span></span><br><span class="line">deal_op(snum,sop,str[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//括号里面的元素都运算结束</span></span><br><span class="line"><span class="keyword">if</span>(flag) <span class="comment">// 将字符数组中的最后一个数字进栈</span></span><br><span class="line">st_push(snum,&amp;value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!st_isempty(sop))&#123; <span class="comment">//只要符号栈不为空就开始运算</span></span><br><span class="line">st_pop(sop,&amp;old_op);</span><br><span class="line">compute(snum,old_op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack_pop(snum,&amp;value); <span class="comment">//value为最后要输出的结果，将它出栈</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s = %d\n&quot;</span>,str,value);</span><br><span class="line"></span><br><span class="line">st_destroy(snum);</span><br><span class="line">st_destroy(sop);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遇到右括号时运算的函数-deal-bracket"><a href="#遇到右括号时运算的函数-deal-bracket" class="headerlink" title="遇到右括号时运算的函数 deal_bracket"></a>遇到右括号时运算的函数 deal_bracket</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deal_bracket</span><span class="params">(sqstack *snum,sqstack *sop)</span>&#123;</span><br><span class="line">datatype old_op;</span><br><span class="line">st_top(sop,&amp;old_op); <span class="comment">//查看符号栈栈顶的运算符</span></span><br><span class="line"><span class="keyword">while</span>(old_op != <span class="string">&#x27;(&#x27;</span>)&#123; <span class="comment">//直至遇到左括号时停止出栈</span></span><br><span class="line">st_pop(sop,&amp;old_op);</span><br><span class="line">compute(snum,&amp;old_op); <span class="comment">//计算括号里的表达式</span></span><br><span class="line">st_top(sop,&amp;old_op);</span><br><span class="line">&#125;</span><br><span class="line">st_pop(sop,&amp;old_op); <span class="comment">//把‘(’出栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="没有括号的运算函数-deal-op"><a href="#没有括号的运算函数-deal-op" class="headerlink" title="没有括号的运算函数 deal_op"></a>没有括号的运算函数 deal_op</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">deal_op</span><span class="params">(sqstack *snum,sqstack *sop,<span class="type">int</span> op)</span>&#123;</span><br><span class="line">datatype old_op;</span><br><span class="line"><span class="keyword">if</span>(st_isempt(sop) || op == <span class="string">&#x27;(&#x27;</span>)&#123; <span class="comment">//如果字符栈里面没有字符或者为(，则直接入栈</span></span><br><span class="line">st_push(sop,&amp;op);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">st_top(sop,&amp;old_op); <span class="comment">//查看栈顶运算符的值，存到old_op中去</span></span><br><span class="line"><span class="keyword">if</span>(get_pri(op) &gt; get_pri(old_op))&#123; <span class="comment">//运算符优先级比栈顶元素优先级高，入栈</span></span><br><span class="line">st_push(sop,&amp;op);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(get_pri(op) &lt;= get_pri(old_op))&#123; <span class="comment">// 运算符优先级没有栈顶元素优先级高或者优先级相等时</span></span><br><span class="line">st_pop(sop,&amp;old_op); <span class="comment">//取栈顶元素并且出栈并进行运算</span></span><br><span class="line">compute(snum,old_op);</span><br><span class="line"><span class="keyword">if</span>(st_isempty(sop))</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">st_top(sop,&amp;old_op);</span><br><span class="line">&#125;</span><br><span class="line">st_push(sop,&amp;op); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果运算函数compute"><a href="#结果运算函数compute" class="headerlink" title="结果运算函数compute"></a>结果运算函数compute</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">compute</span><span class="params">(sqstack *snum,datatype op)</span>&#123;</span><br><span class="line">datatype n1,n2,n;</span><br><span class="line">st_pop(snum,&amp;n2); <span class="comment">// 取栈顶元素n2并且出栈</span></span><br><span class="line">st_pop(snum,&amp;n1); <span class="comment">// 取栈顶元素n1并且出栈</span></span><br><span class="line"><span class="keyword">switch</span>(*op)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">n = n1 + n2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">n = n1 - n2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">n = n1 * n2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">n = n1 / n2;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">st_push(snum,&amp;n); <span class="comment">// 新的数字入栈</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运算符优先级函数-get-pri"><a href="#运算符优先级函数-get-pri" class="headerlink" title="运算符优先级函数 get_pri"></a>运算符优先级函数 get_pri</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> datatype <span class="title function_">get_pri</span><span class="params">(datatype op)</span>   <span class="comment">//op为要运算的运算符</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span>(op)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="栈的函数实现"><a href="#栈的函数实现" class="headerlink" title="栈的函数实现"></a>栈的函数实现</h2><h3 id="sqstack-c"><a href="#sqstack-c" class="headerlink" title="sqstack.c"></a>sqstack.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sqstack.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">sqstack *<span class="title function_">st_create</span><span class="params">(<span class="type">void</span>)</span>&#123;</span><br><span class="line">sqstack *st;</span><br><span class="line">st = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(*st));</span><br><span class="line"><span class="keyword">if</span>(st == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">st-&gt;top = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> st;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_isempty</span><span class="params">(sqstack *st)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (st-&gt;top == <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_push</span><span class="params">(sqdtack *st,datatype *data)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st-&gt;top == (MAXSIZE - <span class="number">1</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">st-&gt;data[++st-&gt;top] = *data;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_pop</span><span class="params">(sqdtack *st,datatype *data)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st_isempty(st))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">*data = st-&gt;data[st-&gt;top--];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_top</span><span class="params">(sqstack *st,datatype *data)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st_isempty(st))</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">*data = st-&gt;data[st-&gt;top];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">st_travel</span><span class="params">(sqstack *)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(st_isempty(st))</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= st-&gt;top;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,st-&gt;data[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">st_destory</span><span class="params">(sqstack *st)</span>&#123;</span><br><span class="line"><span class="built_in">free</span>(st);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sqstack-h"><a href="#sqstack-h" class="headerlink" title="sqstack.h"></a>sqstack.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SQSTACK_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SQSTACK_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXSIZE 1024</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> datatype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node_st</span>&#123;</span></span><br><span class="line">datatype data[MAXSIZE];</span><br><span class="line"><span class="type">int</span> top; <span class="comment">// 栈顶:允许进行插入和删除操作</span></span><br><span class="line">&#125;sqstack;</span><br><span class="line"></span><br><span class="line">sqstack *<span class="title function_">st_create</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_isempty</span><span class="params">(sqstack *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_push</span><span class="params">(sqdtack *,datatype *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_pop</span><span class="params">(sqdtack *,datatype *)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">st_top</span><span class="params">(sqstack *,datatype *)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">st_travel</span><span class="params">(sqstack *)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">st_destory</span><span class="params">(sqstack *)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;c语言四则计算器&quot;&gt;&lt;a href=&quot;#c语言四则计算器&quot; class=&quot;headerlink&quot; title=&quot;c语言四则计算器&quot;&gt;&lt;/a&gt;c语言四则计算器&lt;/h2&gt;&lt;h3 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="C" scheme="http://xczf.shop/cate%EF%BC%9Agories/C/"/>
    
    
    <category term="C" scheme="http://xczf.shop/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络IO模型</title>
    <link href="http://xczf.shop/2021/01/31/linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/"/>
    <id>http://xczf.shop/2021/01/31/linux%E7%BD%91%E7%BB%9CIO%E6%A8%A1%E5%9E%8B/</id>
    <published>2021-01-31T11:00:41.000Z</published>
    <updated>2023-10-31T06:08:06.202Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux网络IO模型"><a href="#Linux网络IO模型" class="headerlink" title="Linux网络IO模型"></a>Linux网络IO模型</h2><h3 id="用户空间与内核空间"><a href="#用户空间与内核空间" class="headerlink" title="用户空间与内核空间"></a>用户空间与内核空间</h3><p>现在操作系统都是采用虚拟存储器，那么对32位操作系统而言，它的寻址空间（虚拟存储空间）为4G。<br><strong>操作系统的核心是内核，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核（kernel），保证内核的安全，操心系统将虚拟空间划分为两部分，一部分为内核空间，一部分为用户空间。</strong><br>针对linux操作系统而言，将最高的1G字节（从虚拟地址0xC0000000到0xFFFFFFFF），供内核使用，称为内核空间，而将较低的3G字节（从虚拟地址0x00000000到0xBFFFFFFF），供各个进程使用，称为用户空间。</p><h3 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h3><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程的执行。这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。<strong>从一个进程的运行转到另一个进程上运行很耗资源</strong><br>从一个进程的运行转到另一个进程上运行，这个过程中经过下面这些变化：</p><ol><li>保存处理机上下文，包括程序计数器和其他寄存器。</li><li>更新PCB信息。(PCB(印制电路板)，是重要的电子部件，是电子元器件的支撑体，是电<br>子元器件电气相互连接的载体。)</li><li>把进程的PCB移入相应的队列，如就绪、在某事件阻塞等队列。</li><li>选择另一个进程执行，并更新其PCB。</li><li>更新内存管理的数据结构。</li><li>恢复处理机上下文。<h3 id="进程的阻塞"><a href="#进程的阻塞" class="headerlink" title="进程的阻塞"></a>进程的阻塞</h3>正在执行的进程，由于期待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据尚未到达或无新工作做等，则由系统自动执行阻塞原语(Block)，使自己由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态的进程（获得CPU），才可能将其转为阻塞状态。当进程进入阻塞状态，是不占用CPU资源的。<h3 id="fd-文件描述符"><a href="#fd-文件描述符" class="headerlink" title="fd(文件描述符)"></a>fd(文件描述符)</h3>文件描述符是计算机科学中的一个术语，是一个用于表述指向文件的引用的抽象化概念。<br>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维<br>护的该进程打开文件的记录表。当程序打开一个现有文件或者创建一个新文件时，内核向进程<br>返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展<br>开。但是文件描述符这一概念往往只适用于UNIX、Linux这样的操作系统。<h3 id="缓存-I-x2F-O"><a href="#缓存-I-x2F-O" class="headerlink" title="缓存 I&#x2F;O"></a>缓存 I&#x2F;O</h3>缓存 I&#x2F;O 又被称作标准 I&#x2F;O，大多数文件系统的默认 I&#x2F;O 操作都是缓存 I&#x2F;O。在 Linux 的缓存<br>I&#x2F;O 机制中，操作系统会将 I&#x2F;O 的数据缓存在文件系统的页缓存（ page cache ）中，也就是<br>说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应<br>用程序的地址空间。<h4 id="缓存-I-x2F-O-的缺点："><a href="#缓存-I-x2F-O-的缺点：" class="headerlink" title="缓存 I&#x2F;O 的缺点："></a>缓存 I&#x2F;O 的缺点：</h4><strong>数据在传输过程中需要在应用程序地址空间和内核进行多次数据拷贝操作，这些数据拷贝操作<br>所带来的 CPU 以及内存开销是非常大的。</strong><h3 id="linux系统网络模式的方案"><a href="#linux系统网络模式的方案" class="headerlink" title="linux系统网络模式的方案"></a>linux系统网络模式的方案</h3><h4 id="阻塞-I-x2F-O（blocking-IO）"><a href="#阻塞-I-x2F-O（blocking-IO）" class="headerlink" title="阻塞 I&#x2F;O（blocking IO）"></a>阻塞 I&#x2F;O（blocking IO）</h4><strong>阻塞：进程给CPU传达一个任务之后，一直等待CPU处理完成，然后才执行后面的操作</strong></li></ol><hr><p><img src="/image/IO/1.png" alt="1"></p><hr><p>1.用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据（对于<br>网络IO来说，很多时候数据在一开始还没有到达。比如，还没有收到一个完整的UDP包。<br>2.这个时候kernel就要等待足够的数据到来。这个过程需要等待，也就是说数据被拷贝到操作<br>系统内核的缓冲区中是需要一个过程的。而在用户进程这边，整个进程会被阻塞（当然，是进<br>程自己选择的阻塞）。<br>3.当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返<br>回结果，用户进程才解除block的状态，重新运行起来。<br>blocking IO的特点就是在IO执行的两个阶段都被block了。</p><h4 id="非阻塞-I-x2F-O（nonblocking-IO）"><a href="#非阻塞-I-x2F-O（nonblocking-IO）" class="headerlink" title="非阻塞 I&#x2F;O（nonblocking IO）"></a>非阻塞 I&#x2F;O（nonblocking IO）</h4><p><strong>非阻塞：进程给CPU传达后，继续处理后续的操作，隔断时间再来询问之前的操作是否!完成。<br>这样的过程其实也叫轮询</strong></p><hr><p><img src="/image/IO/2.png" alt="2"></p><hr><p>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进<br>程，而是立刻返回一个error。<br>从用户进程角度讲 ，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用<br>户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操<br>作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上<br>就将数据拷贝到了用户内存，然后返回。<br><strong>缺点:nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。</strong></p><h4 id="I-x2F-O-多路复用（-IO-multiplexing）"><a href="#I-x2F-O-多路复用（-IO-multiplexing）" class="headerlink" title="I&#x2F;O 多路复用（ IO multiplexing）"></a>I&#x2F;O 多路复用（ IO multiplexing）</h4><p>I&#x2F;O 多路复用就是我们说的select，poll，epoll<br>select&#x2F;epoll的好处就在于单个process就可以同时处理多个网络连接的IO。它的基本原理就<br>是select，poll，epoll这个function会不断的轮询所负责的所有socket，<strong>当某个socket有数<br>据到达了，就通知用户进程。</strong></p><hr><p><img src="/image/IO/3.png" alt="3"></p><hr><p>当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负<br>责的socket，<strong>当任何一个socket中的数据准备好了，select就会返回</strong>。这个时候用户进程再调<br>用read操作，将数据从kernel拷贝到用户进程。<br>所以，I&#x2F;O 多路复用的特点是通过一种机制一个进程能同时<strong>等待多个文件描述符</strong>，而这些文件<br>描述符（套接字描述符）其中的任意一个进入读就绪状态，select()函数就可以返回。<br>如果处理的连接数不是很高的话，使用select&#x2F;epoll的web server不一定比使用multithreading + blocking IO的web server性能更好，可能延迟还更大。<br>select&#x2F;epoll的优势并不是对于单个连接能处理得更快，而是在于能处理更多的连接。<br>在IO multiplexing Model中，实际中，对于每一个socket，一般都设置成为nonblocking，但是，如上图所示，整个用户的process其实是一直被block的。只不过process是<br>被select这个函数block，而不是被socket IO给block。</p><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><p>它通过一个select()系统调用来监视多个文件描述符的数组，当select()返回后，该数组中就绪<br>的文件描述符便会被内核修改标志位，使得进程可以获得这些文件描述符从而进行后续的读写<br>操作。<br>缺点：1.文件描述符数量默认1024；2.开销随着文件描述符线性增长</p><h5 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h5><p>取消了最大文件描述符的数量<br>Linux 2.5.44版本后，poll被epoll取代。和select实现的功能差不多，poll的作用是把当前的<br>文件指针挂到等待队列。<br>select和poll都需要在返回后，通过遍历文件描述符来获取已经就绪的socket。事实上，同时<br>连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增<br>长，其效率也会线性下降。<br>缺点：开销随着文件描述符线性增长</p><h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h5><p>对于select和poll来说，epoll更加灵活，没有描述符限制。epoll使用一个文件描述符管理多<br>个描述符，将用户关系的文件描述符的事件存放到内核的一个事件表中，这样在用户空间和内<br>核空间的copy只需一次。<br>epoll采用基于事件的就绪通知方式。在select&#x2F;poll中，进程只有在调用一定的方法后，内核<br>才对所有监视的文件描<br>述符进行扫描，而epoll事先通过epoll_ctl()来注册一个文件描述符，一旦基于某个文件描述<br>符就绪时，内核会采用<br>类似callback的回调机制，迅速激活这个文件描述符，当进程调用epoll_wait()时便得到通知</p><h4 id="信号驱动-I-x2F-O（-signal-driven-IO）"><a href="#信号驱动-I-x2F-O（-signal-driven-IO）" class="headerlink" title="信号驱动 I&#x2F;O（ signal driven IO）"></a>信号驱动 I&#x2F;O（ signal driven IO）</h4><p>异步 I&#x2F;O（asynchronous IO）<br><strong>同步：执行一个操作后，等待结果，然后才执行后续的操作<br>异步：执行一个操作后，可以执行其他操作，然后等待通知再回来执行刚才没执行完的操作</strong></p><hr><p><img src="/image/IO/4.png" alt="4"></p><hr><p>1.用户进程发起read操作之后，立刻就可以开始去做其它的事。<br>2.而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返<br>回，所以不会对用户进程产生任何block。<br>3.kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会<br>给用户进程发送一个signal，告诉它read操作完成了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.非阻塞 I&#x2F;O和阻塞 I&#x2F;O的区别<br>调用blocking IO会一直block住对应的进程直到操作完成，而non-blocking IO在kernel还准<br>备数据的情况下会立刻返回。<br>2.阻塞、非阻塞、多路IO复用，都是同步IO，异步必定是非阻塞的<br>3.只有用户线程在操作IO的时候根本不去考虑IO的执行全部都交给CPU去完成，而自己只等待一<br>个完成信号的时候，才是真正的异步IO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux网络IO模型&quot;&gt;&lt;a href=&quot;#Linux网络IO模型&quot; class=&quot;headerlink&quot; title=&quot;Linux网络IO模型&quot;&gt;&lt;/a&gt;Linux网络IO模型&lt;/h2&gt;&lt;h3 id=&quot;用户空间与内核空间&quot;&gt;&lt;a href=&quot;#用户空间与内核空</summary>
      
    
    
    
    <category term="linux" scheme="http://xczf.shop/cate%EF%BC%9Agories/linux/"/>
    
    
    <category term="linux" scheme="http://xczf.shop/tags/linux/"/>
    
    <category term="系统原理" scheme="http://xczf.shop/tags/%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
</feed>
